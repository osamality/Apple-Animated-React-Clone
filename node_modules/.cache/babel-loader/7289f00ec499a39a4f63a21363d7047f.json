{"ast":null,"code":"import * as THREE from 'three';\nconst PINCH_MAX = 0.05;\nconst PINCH_THRESHOLD = 0.02;\nconst PINCH_MIN = 0.01;\nconst POINTER_ADVANCE_MAX = 0.02;\nconst POINTER_OPACITY_MAX = 1;\nconst POINTER_OPACITY_MIN = 0.4;\nconst POINTER_FRONT_RADIUS = 0.002;\nconst POINTER_REAR_RADIUS = 0.01;\nconst POINTER_REAR_RADIUS_MIN = 0.003;\nconst POINTER_LENGTH = 0.035;\nconst POINTER_SEGMENTS = 16;\nconst POINTER_RINGS = 12;\nconst POINTER_HEMISPHERE_ANGLE = 110;\nconst YAXIS = new THREE.Vector3(0, 1, 0);\nconst ZAXIS = new THREE.Vector3(0, 0, 1);\nconst CURSOR_RADIUS = 0.02;\nconst CURSOR_MAX_DISTANCE = 1.5;\n\nclass OculusHandPointerModel extends THREE.Object3D {\n  constructor(hand, controller) {\n    super();\n    this.hand = hand;\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.pointerGeometry = null;\n    this.pointerMesh = null;\n    this.pointerObject = null;\n    this.pinched = false;\n    this.attached = false;\n    this.cursorObject = null;\n    this.raycaster = null;\n    hand.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand) {\n        this.visible = true;\n        this.xrInputSource = xrInputSource;\n        this.createPointer();\n      }\n    });\n  }\n\n  _drawVerticesRing(vertices, baseVector, ringIndex) {\n    const segmentVector = baseVector.clone();\n\n    for (var i = 0; i < POINTER_SEGMENTS; i++) {\n      segmentVector.applyAxisAngle(ZAXIS, Math.PI * 2 / POINTER_SEGMENTS);\n      const vid = ringIndex * POINTER_SEGMENTS + i;\n      vertices[3 * vid] = segmentVector.x;\n      vertices[3 * vid + 1] = segmentVector.y;\n      vertices[3 * vid + 2] = segmentVector.z;\n    }\n  }\n\n  _updatePointerVertices(rearRadius) {\n    const vertices = this.pointerGeometry.attributes.position.array; // first ring for front face\n\n    const frontFaceBase = new THREE.Vector3(POINTER_FRONT_RADIUS, 0, -1 * (POINTER_LENGTH - rearRadius));\n\n    this._drawVerticesRing(vertices, frontFaceBase, 0); // rings for rear hemisphere\n\n\n    const rearBase = new THREE.Vector3(Math.sin(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius, Math.cos(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius, 0);\n\n    for (var i = 0; i < POINTER_RINGS; i++) {\n      this._drawVerticesRing(vertices, rearBase, i + 1);\n\n      rearBase.applyAxisAngle(YAXIS, Math.PI * POINTER_HEMISPHERE_ANGLE / 180 / (POINTER_RINGS * -2));\n    } // front and rear face center vertices\n\n\n    const frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n    const rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n    const frontCenter = new THREE.Vector3(0, 0, -1 * (POINTER_LENGTH - rearRadius));\n    vertices[frontCenterIndex * 3] = frontCenter.x;\n    vertices[frontCenterIndex * 3 + 1] = frontCenter.y;\n    vertices[frontCenterIndex * 3 + 2] = frontCenter.z;\n    const rearCenter = new THREE.Vector3(0, 0, rearRadius);\n    vertices[rearCenterIndex * 3] = rearCenter.x;\n    vertices[rearCenterIndex * 3 + 1] = rearCenter.y;\n    vertices[rearCenterIndex * 3 + 2] = rearCenter.z;\n    this.pointerGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3)); // verticesNeedUpdate = true;\n  }\n\n  createPointer() {\n    var i, j;\n    const vertices = new Array(((POINTER_RINGS + 1) * POINTER_SEGMENTS + 2) * 3).fill(0); // const vertices = [];\n\n    const indices = [];\n    this.pointerGeometry = new THREE.BufferGeometry();\n    this.pointerGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\n    this._updatePointerVertices(POINTER_REAR_RADIUS); // construct faces to connect rings\n\n\n    for (i = 0; i < POINTER_RINGS; i++) {\n      for (j = 0; j < POINTER_SEGMENTS - 1; j++) {\n        indices.push(i * POINTER_SEGMENTS + j, i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n        indices.push(i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n      }\n\n      indices.push((i + 1) * POINTER_SEGMENTS - 1, i * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n      indices.push(i * POINTER_SEGMENTS, (i + 1) * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n    } // construct front and rear face\n\n\n    const frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n    const rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n\n    for (i = 0; i < POINTER_SEGMENTS - 1; i++) {\n      indices.push(frontCenterIndex, i + 1, i);\n      indices.push(rearCenterIndex, i + POINTER_SEGMENTS * POINTER_RINGS, i + POINTER_SEGMENTS * POINTER_RINGS + 1);\n    }\n\n    indices.push(frontCenterIndex, 0, POINTER_SEGMENTS - 1);\n    indices.push(rearCenterIndex, POINTER_SEGMENTS * (POINTER_RINGS + 1) - 1, POINTER_SEGMENTS * POINTER_RINGS);\n    const material = new THREE.MeshBasicMaterial();\n    material.transparent = true;\n    material.opacity = POINTER_OPACITY_MIN;\n    this.pointerGeometry.setIndex(indices);\n    this.pointerMesh = new THREE.Mesh(this.pointerGeometry, material);\n    this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n    this.pointerObject = new THREE.Object3D();\n    this.pointerObject.add(this.pointerMesh);\n    this.raycaster = new THREE.Raycaster(); // create cursor\n\n    const cursorGeometry = new THREE.SphereGeometry(CURSOR_RADIUS, 10, 10);\n    const cursorMaterial = new THREE.MeshBasicMaterial();\n    cursorMaterial.transparent = true;\n    cursorMaterial.opacity = POINTER_OPACITY_MIN;\n    this.cursorObject = new THREE.Mesh(cursorGeometry, cursorMaterial);\n    this.pointerObject.add(this.cursorObject);\n    this.add(this.pointerObject);\n  }\n\n  _updateRaycaster() {\n    if (this.raycaster) {\n      const pointerMatrix = this.pointerObject.matrixWorld;\n      const tempMatrix = new THREE.Matrix4();\n      tempMatrix.identity().extractRotation(pointerMatrix);\n      this.raycaster.ray.origin.setFromMatrixPosition(pointerMatrix);\n      this.raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n    }\n  }\n\n  _updatePointer() {\n    this.pointerObject.visible = this.controller.visible;\n    const indexTip = this.hand.joints['index-finger-tip'];\n    const thumbTip = this.hand.joints['thumb-tip'];\n    const distance = indexTip.position.distanceTo(thumbTip.position);\n    const position = indexTip.position.clone().add(thumbTip.position).multiplyScalar(0.5);\n    this.pointerObject.position.copy(position);\n    this.pointerObject.quaternion.copy(this.controller.quaternion);\n    this.pinched = distance <= PINCH_THRESHOLD;\n    const pinchScale = (distance - PINCH_MIN) / (PINCH_MAX - PINCH_MIN);\n    const focusScale = (distance - PINCH_MIN) / (PINCH_THRESHOLD - PINCH_MIN);\n\n    if (pinchScale > 1) {\n      this._updatePointerVertices(POINTER_REAR_RADIUS);\n\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n      this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n    } else if (pinchScale > 0) {\n      const rearRadius = (POINTER_REAR_RADIUS - POINTER_REAR_RADIUS_MIN) * pinchScale + POINTER_REAR_RADIUS_MIN;\n\n      this._updatePointerVertices(rearRadius);\n\n      if (focusScale < 1) {\n        this.pointerMesh.position.set(0, 0, -1 * rearRadius - (1 - focusScale) * POINTER_ADVANCE_MAX);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN + (1 - focusScale) * (POINTER_OPACITY_MAX - POINTER_OPACITY_MIN);\n      } else {\n        this.pointerMesh.position.set(0, 0, -1 * rearRadius);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n      }\n    } else {\n      this._updatePointerVertices(POINTER_REAR_RADIUS_MIN);\n\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS_MIN - POINTER_ADVANCE_MAX);\n      this.pointerMesh.material.opacity = POINTER_OPACITY_MAX;\n    }\n\n    this.cursorObject.material.opacity = this.pointerMesh.material.opacity;\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.pointerGeometry) {\n      this._updatePointer();\n\n      this._updateRaycaster();\n    }\n  }\n\n  isPinched() {\n    return this.pinched;\n  }\n\n  setAttached(attached) {\n    this.attached = attached;\n  }\n\n  isAttached() {\n    return this.attached;\n  }\n\n  intersectObject(object, recursive = true) {\n    if (this.raycaster) {\n      return this.raycaster.intersectObject(object, recursive);\n    }\n  }\n\n  intersectObjects(objects, recursive = true) {\n    if (this.raycaster) {\n      return this.raycaster.intersectObjects(objects, recursive);\n    }\n  }\n\n  checkIntersections(objects, recursive = false) {\n    if (this.raycaster && !this.attached) {\n      const intersections = this.raycaster.intersectObjects(objects, recursive);\n      const direction = new THREE.Vector3(0, 0, -1);\n\n      if (intersections.length > 0) {\n        const intersection = intersections[0];\n        const distance = intersection.distance;\n        this.cursorObject.position.copy(direction.multiplyScalar(distance));\n      } else {\n        this.cursorObject.position.copy(direction.multiplyScalar(CURSOR_MAX_DISTANCE));\n      }\n    }\n  }\n\n  setCursor(distance) {\n    const direction = new THREE.Vector3(0, 0, -1);\n\n    if (this.raycaster && !this.attached) {\n      this.cursorObject.position.copy(direction.multiplyScalar(distance));\n    }\n  }\n\n}\n\nexport { OculusHandPointerModel };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/webxr/OculusHandPointerModel.js"],"names":["THREE","PINCH_MAX","PINCH_THRESHOLD","PINCH_MIN","POINTER_ADVANCE_MAX","POINTER_OPACITY_MAX","POINTER_OPACITY_MIN","POINTER_FRONT_RADIUS","POINTER_REAR_RADIUS","POINTER_REAR_RADIUS_MIN","POINTER_LENGTH","POINTER_SEGMENTS","POINTER_RINGS","POINTER_HEMISPHERE_ANGLE","YAXIS","Vector3","ZAXIS","CURSOR_RADIUS","CURSOR_MAX_DISTANCE","OculusHandPointerModel","Object3D","constructor","hand","controller","motionController","envMap","mesh","pointerGeometry","pointerMesh","pointerObject","pinched","attached","cursorObject","raycaster","addEventListener","event","xrInputSource","data","visible","createPointer","_drawVerticesRing","vertices","baseVector","ringIndex","segmentVector","clone","i","applyAxisAngle","Math","PI","vid","x","y","z","_updatePointerVertices","rearRadius","attributes","position","array","frontFaceBase","rearBase","sin","cos","frontCenterIndex","rearCenterIndex","frontCenter","rearCenter","setAttribute","Float32BufferAttribute","j","Array","fill","indices","BufferGeometry","push","material","MeshBasicMaterial","transparent","opacity","setIndex","Mesh","set","add","Raycaster","cursorGeometry","SphereGeometry","cursorMaterial","_updateRaycaster","pointerMatrix","matrixWorld","tempMatrix","Matrix4","identity","extractRotation","ray","origin","setFromMatrixPosition","direction","applyMatrix4","_updatePointer","indexTip","joints","thumbTip","distance","distanceTo","multiplyScalar","copy","quaternion","pinchScale","focusScale","updateMatrixWorld","force","isPinched","setAttached","isAttached","intersectObject","object","recursive","intersectObjects","objects","checkIntersections","intersections","length","intersection","setCursor"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\n\nconst PINCH_MAX = 0.05;\nconst PINCH_THRESHOLD = 0.02;\nconst PINCH_MIN = 0.01;\nconst POINTER_ADVANCE_MAX = 0.02;\nconst POINTER_OPACITY_MAX = 1;\nconst POINTER_OPACITY_MIN = 0.4;\nconst POINTER_FRONT_RADIUS = 0.002;\nconst POINTER_REAR_RADIUS = 0.01;\nconst POINTER_REAR_RADIUS_MIN = 0.003;\nconst POINTER_LENGTH = 0.035;\nconst POINTER_SEGMENTS = 16;\nconst POINTER_RINGS = 12;\nconst POINTER_HEMISPHERE_ANGLE = 110;\nconst YAXIS = new THREE.Vector3(0, 1, 0);\nconst ZAXIS = new THREE.Vector3(0, 0, 1);\nconst CURSOR_RADIUS = 0.02;\nconst CURSOR_MAX_DISTANCE = 1.5;\n\nclass OculusHandPointerModel extends THREE.Object3D {\n  constructor(hand, controller) {\n    super();\n    this.hand = hand;\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.pointerGeometry = null;\n    this.pointerMesh = null;\n    this.pointerObject = null;\n    this.pinched = false;\n    this.attached = false;\n    this.cursorObject = null;\n    this.raycaster = null;\n    hand.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand) {\n        this.visible = true;\n        this.xrInputSource = xrInputSource;\n        this.createPointer();\n      }\n    });\n  }\n\n  _drawVerticesRing(vertices, baseVector, ringIndex) {\n    const segmentVector = baseVector.clone();\n\n    for (var i = 0; i < POINTER_SEGMENTS; i++) {\n      segmentVector.applyAxisAngle(ZAXIS, Math.PI * 2 / POINTER_SEGMENTS);\n      const vid = ringIndex * POINTER_SEGMENTS + i;\n      vertices[3 * vid] = segmentVector.x;\n      vertices[3 * vid + 1] = segmentVector.y;\n      vertices[3 * vid + 2] = segmentVector.z;\n    }\n  }\n\n  _updatePointerVertices(rearRadius) {\n    const vertices = this.pointerGeometry.attributes.position.array; // first ring for front face\n\n    const frontFaceBase = new THREE.Vector3(POINTER_FRONT_RADIUS, 0, -1 * (POINTER_LENGTH - rearRadius));\n\n    this._drawVerticesRing(vertices, frontFaceBase, 0); // rings for rear hemisphere\n\n\n    const rearBase = new THREE.Vector3(Math.sin(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius, Math.cos(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius, 0);\n\n    for (var i = 0; i < POINTER_RINGS; i++) {\n      this._drawVerticesRing(vertices, rearBase, i + 1);\n\n      rearBase.applyAxisAngle(YAXIS, Math.PI * POINTER_HEMISPHERE_ANGLE / 180 / (POINTER_RINGS * -2));\n    } // front and rear face center vertices\n\n\n    const frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n    const rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n    const frontCenter = new THREE.Vector3(0, 0, -1 * (POINTER_LENGTH - rearRadius));\n    vertices[frontCenterIndex * 3] = frontCenter.x;\n    vertices[frontCenterIndex * 3 + 1] = frontCenter.y;\n    vertices[frontCenterIndex * 3 + 2] = frontCenter.z;\n    const rearCenter = new THREE.Vector3(0, 0, rearRadius);\n    vertices[rearCenterIndex * 3] = rearCenter.x;\n    vertices[rearCenterIndex * 3 + 1] = rearCenter.y;\n    vertices[rearCenterIndex * 3 + 2] = rearCenter.z;\n    this.pointerGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3)); // verticesNeedUpdate = true;\n  }\n\n  createPointer() {\n    var i, j;\n    const vertices = new Array(((POINTER_RINGS + 1) * POINTER_SEGMENTS + 2) * 3).fill(0); // const vertices = [];\n\n    const indices = [];\n    this.pointerGeometry = new THREE.BufferGeometry();\n    this.pointerGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\n    this._updatePointerVertices(POINTER_REAR_RADIUS); // construct faces to connect rings\n\n\n    for (i = 0; i < POINTER_RINGS; i++) {\n      for (j = 0; j < POINTER_SEGMENTS - 1; j++) {\n        indices.push(i * POINTER_SEGMENTS + j, i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n        indices.push(i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n      }\n\n      indices.push((i + 1) * POINTER_SEGMENTS - 1, i * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n      indices.push(i * POINTER_SEGMENTS, (i + 1) * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n    } // construct front and rear face\n\n\n    const frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n    const rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n\n    for (i = 0; i < POINTER_SEGMENTS - 1; i++) {\n      indices.push(frontCenterIndex, i + 1, i);\n      indices.push(rearCenterIndex, i + POINTER_SEGMENTS * POINTER_RINGS, i + POINTER_SEGMENTS * POINTER_RINGS + 1);\n    }\n\n    indices.push(frontCenterIndex, 0, POINTER_SEGMENTS - 1);\n    indices.push(rearCenterIndex, POINTER_SEGMENTS * (POINTER_RINGS + 1) - 1, POINTER_SEGMENTS * POINTER_RINGS);\n    const material = new THREE.MeshBasicMaterial();\n    material.transparent = true;\n    material.opacity = POINTER_OPACITY_MIN;\n    this.pointerGeometry.setIndex(indices);\n    this.pointerMesh = new THREE.Mesh(this.pointerGeometry, material);\n    this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n    this.pointerObject = new THREE.Object3D();\n    this.pointerObject.add(this.pointerMesh);\n    this.raycaster = new THREE.Raycaster(); // create cursor\n\n    const cursorGeometry = new THREE.SphereGeometry(CURSOR_RADIUS, 10, 10);\n    const cursorMaterial = new THREE.MeshBasicMaterial();\n    cursorMaterial.transparent = true;\n    cursorMaterial.opacity = POINTER_OPACITY_MIN;\n    this.cursorObject = new THREE.Mesh(cursorGeometry, cursorMaterial);\n    this.pointerObject.add(this.cursorObject);\n    this.add(this.pointerObject);\n  }\n\n  _updateRaycaster() {\n    if (this.raycaster) {\n      const pointerMatrix = this.pointerObject.matrixWorld;\n      const tempMatrix = new THREE.Matrix4();\n      tempMatrix.identity().extractRotation(pointerMatrix);\n      this.raycaster.ray.origin.setFromMatrixPosition(pointerMatrix);\n      this.raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n    }\n  }\n\n  _updatePointer() {\n    this.pointerObject.visible = this.controller.visible;\n    const indexTip = this.hand.joints['index-finger-tip'];\n    const thumbTip = this.hand.joints['thumb-tip'];\n    const distance = indexTip.position.distanceTo(thumbTip.position);\n    const position = indexTip.position.clone().add(thumbTip.position).multiplyScalar(0.5);\n    this.pointerObject.position.copy(position);\n    this.pointerObject.quaternion.copy(this.controller.quaternion);\n    this.pinched = distance <= PINCH_THRESHOLD;\n    const pinchScale = (distance - PINCH_MIN) / (PINCH_MAX - PINCH_MIN);\n    const focusScale = (distance - PINCH_MIN) / (PINCH_THRESHOLD - PINCH_MIN);\n\n    if (pinchScale > 1) {\n      this._updatePointerVertices(POINTER_REAR_RADIUS);\n\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n      this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n    } else if (pinchScale > 0) {\n      const rearRadius = (POINTER_REAR_RADIUS - POINTER_REAR_RADIUS_MIN) * pinchScale + POINTER_REAR_RADIUS_MIN;\n\n      this._updatePointerVertices(rearRadius);\n\n      if (focusScale < 1) {\n        this.pointerMesh.position.set(0, 0, -1 * rearRadius - (1 - focusScale) * POINTER_ADVANCE_MAX);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN + (1 - focusScale) * (POINTER_OPACITY_MAX - POINTER_OPACITY_MIN);\n      } else {\n        this.pointerMesh.position.set(0, 0, -1 * rearRadius);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n      }\n    } else {\n      this._updatePointerVertices(POINTER_REAR_RADIUS_MIN);\n\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS_MIN - POINTER_ADVANCE_MAX);\n      this.pointerMesh.material.opacity = POINTER_OPACITY_MAX;\n    }\n\n    this.cursorObject.material.opacity = this.pointerMesh.material.opacity;\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.pointerGeometry) {\n      this._updatePointer();\n\n      this._updateRaycaster();\n    }\n  }\n\n  isPinched() {\n    return this.pinched;\n  }\n\n  setAttached(attached) {\n    this.attached = attached;\n  }\n\n  isAttached() {\n    return this.attached;\n  }\n\n  intersectObject(object, recursive = true) {\n    if (this.raycaster) {\n      return this.raycaster.intersectObject(object, recursive);\n    }\n  }\n\n  intersectObjects(objects, recursive = true) {\n    if (this.raycaster) {\n      return this.raycaster.intersectObjects(objects, recursive);\n    }\n  }\n\n  checkIntersections(objects, recursive = false) {\n    if (this.raycaster && !this.attached) {\n      const intersections = this.raycaster.intersectObjects(objects, recursive);\n      const direction = new THREE.Vector3(0, 0, -1);\n\n      if (intersections.length > 0) {\n        const intersection = intersections[0];\n        const distance = intersection.distance;\n        this.cursorObject.position.copy(direction.multiplyScalar(distance));\n      } else {\n        this.cursorObject.position.copy(direction.multiplyScalar(CURSOR_MAX_DISTANCE));\n      }\n    }\n  }\n\n  setCursor(distance) {\n    const direction = new THREE.Vector3(0, 0, -1);\n\n    if (this.raycaster && !this.attached) {\n      this.cursorObject.position.copy(direction.multiplyScalar(distance));\n    }\n  }\n\n}\n\nexport { OculusHandPointerModel };\n"]},"metadata":{},"sourceType":"module"}