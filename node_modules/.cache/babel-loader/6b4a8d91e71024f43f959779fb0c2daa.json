{"ast":null,"code":"import Node from '../core/Node.js';\n\nclass JoinNode extends Node {\n  constructor(nodes = []) {\n    super();\n    this.nodes = nodes;\n  }\n\n  getNodeType(builder) {\n    return builder.getTypeFromLength(this.nodes.reduce((count, cur) => count + builder.getTypeLength(cur.getNodeType(builder)), 0));\n  }\n\n  generate(builder) {\n    const type = this.getNodeType(builder);\n    const nodes = this.nodes;\n    const snippetValues = [];\n\n    for (let i = 0; i < nodes.length; i++) {\n      const input = nodes[i];\n      const inputSnippet = input.build(builder);\n      snippetValues.push(inputSnippet);\n    }\n\n    return `${builder.getType(type)}( ${snippetValues.join(', ')} )`;\n  }\n\n}\n\nexport default JoinNode;","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/nodes/utils/JoinNode.js"],"names":["Node","JoinNode","constructor","nodes","getNodeType","builder","getTypeFromLength","reduce","count","cur","getTypeLength","generate","type","snippetValues","i","length","input","inputSnippet","build","push","getType","join"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,iBAAjB;;AAEA,MAAMC,QAAN,SAAuBD,IAAvB,CAA4B;AAC1BE,EAAAA,WAAW,CAACC,KAAK,GAAG,EAAT,EAAa;AACtB;AACA,SAAKA,KAAL,GAAaA,KAAb;AACD;;AAEDC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,WAAOA,OAAO,CAACC,iBAAR,CAA0B,KAAKH,KAAL,CAAWI,MAAX,CAAkB,CAACC,KAAD,EAAQC,GAAR,KAAgBD,KAAK,GAAGH,OAAO,CAACK,aAAR,CAAsBD,GAAG,CAACL,WAAJ,CAAgBC,OAAhB,CAAtB,CAA1C,EAA2F,CAA3F,CAA1B,CAAP;AACD;;AAEDM,EAAAA,QAAQ,CAACN,OAAD,EAAU;AAChB,UAAMO,IAAI,GAAG,KAAKR,WAAL,CAAiBC,OAAjB,CAAb;AACA,UAAMF,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAMU,aAAa,GAAG,EAAtB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,KAAK,CAACY,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,YAAME,KAAK,GAAGb,KAAK,CAACW,CAAD,CAAnB;AACA,YAAMG,YAAY,GAAGD,KAAK,CAACE,KAAN,CAAYb,OAAZ,CAArB;AACAQ,MAAAA,aAAa,CAACM,IAAd,CAAmBF,YAAnB;AACD;;AAED,WAAQ,GAAEZ,OAAO,CAACe,OAAR,CAAgBR,IAAhB,CAAsB,KAAIC,aAAa,CAACQ,IAAd,CAAmB,IAAnB,CAAyB,IAA7D;AACD;;AAtByB;;AA0B5B,eAAepB,QAAf","sourcesContent":["import Node from '../core/Node.js';\n\nclass JoinNode extends Node {\n  constructor(nodes = []) {\n    super();\n    this.nodes = nodes;\n  }\n\n  getNodeType(builder) {\n    return builder.getTypeFromLength(this.nodes.reduce((count, cur) => count + builder.getTypeLength(cur.getNodeType(builder)), 0));\n  }\n\n  generate(builder) {\n    const type = this.getNodeType(builder);\n    const nodes = this.nodes;\n    const snippetValues = [];\n\n    for (let i = 0; i < nodes.length; i++) {\n      const input = nodes[i];\n      const inputSnippet = input.build(builder);\n      snippetValues.push(inputSnippet);\n    }\n\n    return `${builder.getType(type)}( ${snippetValues.join(', ')} )`;\n  }\n\n}\n\nexport default JoinNode;\n"]},"metadata":{},"sourceType":"module"}