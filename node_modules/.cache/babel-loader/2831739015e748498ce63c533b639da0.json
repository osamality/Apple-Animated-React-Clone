{"ast":null,"code":"import { Vector2 } from 'three';\n/**\n * Convolution shader\n * ported from o3d sample to WebGL / GLSL\n * http://o3d.googlecode.com/svn/trunk/samples/convolution.html\n */\n\nconst ConvolutionShader = {\n  defines: {\n    KERNEL_SIZE_FLOAT: '25.0',\n    KERNEL_SIZE_INT: '25'\n  },\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    uImageIncrement: {\n      value: new Vector2(0.001953125, 0.0)\n    },\n    cKernel: {\n      value: []\n    }\n  },\n  vertexShader: ['uniform vec2 uImageIncrement;', 'varying vec2 vUv;', 'void main() {', '\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float cKernel[ KERNEL_SIZE_INT ];', 'uniform sampler2D tDiffuse;', 'uniform vec2 uImageIncrement;', 'varying vec2 vUv;', 'void main() {', '\tvec2 imageCoord = vUv;', '\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );', '\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {', '\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];', '\t\timageCoord += uImageIncrement;', '\t}', '\tgl_FragColor = sum;', '}'].join('\\n'),\n  buildKernel: function (sigma) {\n    // We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.\n    function gauss(x, sigma) {\n      return Math.exp(-(x * x) / (2.0 * sigma * sigma));\n    }\n\n    const kMaxKernelSize = 25;\n    const kernelSize = Math.min(2 * Math.ceil(sigma * 3.0) + 1, kMaxKernelSize);\n    const halfWidth = (kernelSize - 1) * 0.5;\n    const values = new Array(kernelSize);\n    let sum = 0.0;\n\n    for (let i = 0; i < kernelSize; ++i) {\n      values[i] = gauss(i - halfWidth, sigma);\n      sum += values[i];\n    } // normalize the kernel\n\n\n    for (let i = 0; i < kernelSize; ++i) values[i] /= sum;\n\n    return values;\n  }\n};\nexport { ConvolutionShader };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/shaders/ConvolutionShader.js"],"names":["Vector2","ConvolutionShader","defines","KERNEL_SIZE_FLOAT","KERNEL_SIZE_INT","uniforms","tDiffuse","value","uImageIncrement","cKernel","vertexShader","join","fragmentShader","buildKernel","sigma","gauss","x","Math","exp","kMaxKernelSize","kernelSize","min","ceil","halfWidth","values","Array","sum","i"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,iBAAiB,EAAE,MADZ;AAEPC,IAAAA,eAAe,EAAE;AAFV,GADe;AAKxBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE;AADC,KADF;AAIRC,IAAAA,eAAe,EAAE;AACfD,MAAAA,KAAK,EAAE,IAAIP,OAAJ,CAAY,WAAZ,EAAyB,GAAzB;AADQ,KAJT;AAORS,IAAAA,OAAO,EAAE;AACPF,MAAAA,KAAK,EAAE;AADA;AAPD,GALc;AAgBxBG,EAAAA,YAAY,EAAE,CAAC,+BAAD,EAAkC,mBAAlC,EAAuD,eAAvD,EAAwE,sEAAxE,EAAgJ,4EAAhJ,EAA8N,GAA9N,EAAmOC,IAAnO,CAAwO,IAAxO,CAhBU;AAiBxBC,EAAAA,cAAc,EAAE,CAAC,2CAAD,EAA8C,6BAA9C,EAA6E,+BAA7E,EAA8G,mBAA9G,EAAmI,eAAnI,EAAoJ,yBAApJ,EAA+K,yCAA/K,EAA0N,gDAA1N,EAA4Q,4DAA5Q,EAA0U,kCAA1U,EAA8W,IAA9W,EAAoX,sBAApX,EAA4Y,GAA5Y,EAAiZD,IAAjZ,CAAsZ,IAAtZ,CAjBQ;AAkBxBE,EAAAA,WAAW,EAAE,UAAUC,KAAV,EAAiB;AAC5B;AACA,aAASC,KAAT,CAAeC,CAAf,EAAkBF,KAAlB,EAAyB;AACvB,aAAOG,IAAI,CAACC,GAAL,CAAS,EAAEF,CAAC,GAAGA,CAAN,KAAY,MAAMF,KAAN,GAAcA,KAA1B,CAAT,CAAP;AACD;;AAED,UAAMK,cAAc,GAAG,EAAvB;AACA,UAAMC,UAAU,GAAGH,IAAI,CAACI,GAAL,CAAS,IAAIJ,IAAI,CAACK,IAAL,CAAUR,KAAK,GAAG,GAAlB,CAAJ,GAA6B,CAAtC,EAAyCK,cAAzC,CAAnB;AACA,UAAMI,SAAS,GAAG,CAACH,UAAU,GAAG,CAAd,IAAmB,GAArC;AACA,UAAMI,MAAM,GAAG,IAAIC,KAAJ,CAAUL,UAAV,CAAf;AACA,QAAIM,GAAG,GAAG,GAAV;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAApB,EAAgC,EAAEO,CAAlC,EAAqC;AACnCH,MAAAA,MAAM,CAACG,CAAD,CAAN,GAAYZ,KAAK,CAACY,CAAC,GAAGJ,SAAL,EAAgBT,KAAhB,CAAjB;AACAY,MAAAA,GAAG,IAAIF,MAAM,CAACG,CAAD,CAAb;AACD,KAf2B,CAe1B;;;AAGF,SAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAApB,EAAgC,EAAEO,CAAlC,EAAqCH,MAAM,CAACG,CAAD,CAAN,IAAaD,GAAb;;AAErC,WAAOF,MAAP;AACD;AAvCuB,CAA1B;AA0CA,SAASvB,iBAAT","sourcesContent":["import { Vector2 } from 'three';\n\n/**\n * Convolution shader\n * ported from o3d sample to WebGL / GLSL\n * http://o3d.googlecode.com/svn/trunk/samples/convolution.html\n */\n\nconst ConvolutionShader = {\n  defines: {\n    KERNEL_SIZE_FLOAT: '25.0',\n    KERNEL_SIZE_INT: '25'\n  },\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    uImageIncrement: {\n      value: new Vector2(0.001953125, 0.0)\n    },\n    cKernel: {\n      value: []\n    }\n  },\n  vertexShader: ['uniform vec2 uImageIncrement;', 'varying vec2 vUv;', 'void main() {', '\tvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform float cKernel[ KERNEL_SIZE_INT ];', 'uniform sampler2D tDiffuse;', 'uniform vec2 uImageIncrement;', 'varying vec2 vUv;', 'void main() {', '\tvec2 imageCoord = vUv;', '\tvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );', '\tfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {', '\t\tsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];', '\t\timageCoord += uImageIncrement;', '\t}', '\tgl_FragColor = sum;', '}'].join('\\n'),\n  buildKernel: function (sigma) {\n    // We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.\n    function gauss(x, sigma) {\n      return Math.exp(-(x * x) / (2.0 * sigma * sigma));\n    }\n\n    const kMaxKernelSize = 25;\n    const kernelSize = Math.min(2 * Math.ceil(sigma * 3.0) + 1, kMaxKernelSize);\n    const halfWidth = (kernelSize - 1) * 0.5;\n    const values = new Array(kernelSize);\n    let sum = 0.0;\n\n    for (let i = 0; i < kernelSize; ++i) {\n      values[i] = gauss(i - halfWidth, sigma);\n      sum += values[i];\n    } // normalize the kernel\n\n\n    for (let i = 0; i < kernelSize; ++i) values[i] /= sum;\n\n    return values;\n  }\n};\n\nexport { ConvolutionShader };\n"]},"metadata":{},"sourceType":"module"}