{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Matrix4, EventDispatcher, EllipseCurve, BufferGeometry, MathUtils, Vector3, GridHelper, LineBasicMaterial, Line, Raycaster, Vector2, Quaternion, Group, Box3, Sphere } from 'three'; //trackball state\n\nconst STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nconst INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n}; //cursor center coordinates\n\nconst _center = {\n  x: 0,\n  y: 0\n}; //transformation matrices for gizmos and camera\n\nconst _transformation = {\n  camera: new Matrix4(),\n  gizmos: new Matrix4()\n}; //events\n\nconst _changeEvent = {\n  type: 'change'\n};\nconst _startEvent = {\n  type: 'start'\n};\nconst _endEvent = {\n  type: 'end'\n};\n/**\n *\n * @param {CamOrthographicCamera | PerspectiveCameraera} camera Virtual camera used in the scene\n * @param {HTMLElement=null} domElement Renderer's dom element\n * @param {Scene=null} scene The scene to be rendered\n */\n\nclass ArcballControls extends EventDispatcher {\n  constructor(_camera, _domElement = null, scene = null) {\n    super();\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"domElement\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"mouseActions\", void 0);\n\n    _defineProperty(this, \"_mouseOp\", void 0);\n\n    _defineProperty(this, \"_v2_1\", void 0);\n\n    _defineProperty(this, \"_v3_1\", void 0);\n\n    _defineProperty(this, \"_v3_2\", void 0);\n\n    _defineProperty(this, \"_m4_1\", void 0);\n\n    _defineProperty(this, \"_m4_2\", void 0);\n\n    _defineProperty(this, \"_quat\", void 0);\n\n    _defineProperty(this, \"_translationMatrix\", void 0);\n\n    _defineProperty(this, \"_rotationMatrix\", void 0);\n\n    _defineProperty(this, \"_scaleMatrix\", void 0);\n\n    _defineProperty(this, \"_rotationAxis\", void 0);\n\n    _defineProperty(this, \"_cameraMatrixState\", void 0);\n\n    _defineProperty(this, \"_cameraProjectionState\", void 0);\n\n    _defineProperty(this, \"_fovState\", void 0);\n\n    _defineProperty(this, \"_upState\", void 0);\n\n    _defineProperty(this, \"_zoomState\", void 0);\n\n    _defineProperty(this, \"_nearPos\", void 0);\n\n    _defineProperty(this, \"_farPos\", void 0);\n\n    _defineProperty(this, \"_gizmoMatrixState\", void 0);\n\n    _defineProperty(this, \"_up0\", void 0);\n\n    _defineProperty(this, \"_zoom0\", void 0);\n\n    _defineProperty(this, \"_fov0\", void 0);\n\n    _defineProperty(this, \"_initialNear\", void 0);\n\n    _defineProperty(this, \"_nearPos0\", void 0);\n\n    _defineProperty(this, \"_initialFar\", void 0);\n\n    _defineProperty(this, \"_farPos0\", void 0);\n\n    _defineProperty(this, \"_cameraMatrixState0\", void 0);\n\n    _defineProperty(this, \"_gizmoMatrixState0\", void 0);\n\n    _defineProperty(this, \"_button\", void 0);\n\n    _defineProperty(this, \"_touchStart\", void 0);\n\n    _defineProperty(this, \"_touchCurrent\", void 0);\n\n    _defineProperty(this, \"_input\", void 0);\n\n    _defineProperty(this, \"_switchSensibility\", void 0);\n\n    _defineProperty(this, \"_startFingerDistance\", void 0);\n\n    _defineProperty(this, \"_currentFingerDistance\", void 0);\n\n    _defineProperty(this, \"_startFingerRotation\", void 0);\n\n    _defineProperty(this, \"_currentFingerRotation\", void 0);\n\n    _defineProperty(this, \"_devPxRatio\", void 0);\n\n    _defineProperty(this, \"_downValid\", void 0);\n\n    _defineProperty(this, \"_nclicks\", void 0);\n\n    _defineProperty(this, \"_downEvents\", void 0);\n\n    _defineProperty(this, \"_clickStart\", void 0);\n\n    _defineProperty(this, \"_maxDownTime\", void 0);\n\n    _defineProperty(this, \"_maxInterval\", void 0);\n\n    _defineProperty(this, \"_posThreshold\", void 0);\n\n    _defineProperty(this, \"_movementThreshold\", void 0);\n\n    _defineProperty(this, \"_currentCursorPosition\", void 0);\n\n    _defineProperty(this, \"_startCursorPosition\", void 0);\n\n    _defineProperty(this, \"_grid\", void 0);\n\n    _defineProperty(this, \"_gridPosition\", void 0);\n\n    _defineProperty(this, \"_gizmos\", void 0);\n\n    _defineProperty(this, \"_curvePts\", void 0);\n\n    _defineProperty(this, \"_timeStart\", void 0);\n\n    _defineProperty(this, \"_animationId\", void 0);\n\n    _defineProperty(this, \"focusAnimationTime\", void 0);\n\n    _defineProperty(this, \"_timePrev\", void 0);\n\n    _defineProperty(this, \"_timeCurrent\", void 0);\n\n    _defineProperty(this, \"_anglePrev\", void 0);\n\n    _defineProperty(this, \"_angleCurrent\", void 0);\n\n    _defineProperty(this, \"_cursorPosPrev\", void 0);\n\n    _defineProperty(this, \"_cursorPosCurr\", void 0);\n\n    _defineProperty(this, \"_wPrev\", void 0);\n\n    _defineProperty(this, \"_wCurr\", void 0);\n\n    _defineProperty(this, \"adjustNearFar\", void 0);\n\n    _defineProperty(this, \"scaleFactor\", void 0);\n\n    _defineProperty(this, \"dampingFactor\", void 0);\n\n    _defineProperty(this, \"wMax\", void 0);\n\n    _defineProperty(this, \"enableAnimations\", void 0);\n\n    _defineProperty(this, \"enableGrid\", void 0);\n\n    _defineProperty(this, \"cursorZoom\", void 0);\n\n    _defineProperty(this, \"minFov\", void 0);\n\n    _defineProperty(this, \"maxFov\", void 0);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"enablePan\", void 0);\n\n    _defineProperty(this, \"enableRotate\", void 0);\n\n    _defineProperty(this, \"enableZoom\", void 0);\n\n    _defineProperty(this, \"minDistance\", void 0);\n\n    _defineProperty(this, \"maxDistance\", void 0);\n\n    _defineProperty(this, \"minZoom\", void 0);\n\n    _defineProperty(this, \"maxZoom\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"_currentTarget\", void 0);\n\n    _defineProperty(this, \"_tbRadius\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    _defineProperty(this, \"onWindowResize\", () => {\n      const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n\n      if (this.camera) {\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n      }\n\n      const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n      const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n      for (const gizmo in this._gizmos.children) {\n        const child = this._gizmos.children[gizmo];\n        child.geometry = curveGeometry;\n      }\n\n      this.dispatchEvent(_changeEvent);\n    });\n\n    _defineProperty(this, \"onContextMenu\", event => {\n      if (!this.enabled) {\n        return;\n      }\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == 2) {\n          //prevent only if button 2 is actually used\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerCancel\", () => {\n      this._touchStart.splice(0, this._touchStart.length);\n\n      this._touchCurrent.splice(0, this._touchCurrent.length);\n\n      this._input = INPUT.NONE;\n    });\n\n    _defineProperty(this, \"onPointerDown\", event => {\n      if (event.button == 0 && event.isPrimary) {\n        this._downValid = true;\n\n        this._downEvents.push(event);\n      } else {\n        this._downValid = false;\n      }\n\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        this._touchStart.push(event);\n\n        this._touchCurrent.push(event);\n\n        switch (this._input) {\n          case INPUT.NONE:\n            //singleStart\n            this._input = INPUT.ONE_FINGER;\n            this.onSinglePanStart(event, 'ROTATE');\n            window.addEventListener('pointermove', this.onPointerMove);\n            window.addEventListener('pointerup', this.onPointerUp);\n            break;\n\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //doubleStart\n            this._input = INPUT.TWO_FINGER;\n            this.onRotateStart();\n            this.onPinchStart();\n            this.onDoublePanStart();\n            break;\n\n          case INPUT.TWO_FINGER:\n            //multipleStart\n            this._input = INPUT.MULT_FINGER;\n            this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.NONE) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        this._mouseOp = this.getOpFromAction(event.button, modifier);\n\n        if (this._mouseOp) {\n          window.addEventListener('pointermove', this.onPointerMove);\n          window.addEventListener('pointerup', this.onPointerUp); //singleStart\n\n          this._input = INPUT.CURSOR;\n          this._button = event.button;\n          this.onSinglePanStart(event, this._mouseOp);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerMove\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n            //singleMove\n            this.updateTouchEvent(event);\n            this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n\n          case INPUT.ONE_FINGER_SWITCHED:\n            const movement = this.calculatePointersDistance(this._touchCurrent[0], event) * this._devPxRatio;\n\n            if (movement >= this._switchSensibility) {\n              //singleMove\n              this._input = INPUT.ONE_FINGER;\n              this.updateTouchEvent(event);\n              this.onSinglePanStart(event, 'ROTATE');\n              break;\n            }\n\n            break;\n\n          case INPUT.TWO_FINGER:\n            //rotate/pan/pinchMove\n            this.updateTouchEvent(event);\n            this.onRotateMove();\n            this.onPinchMove();\n            this.onDoublePanMove();\n            break;\n\n          case INPUT.MULT_FINGER:\n            //multMove\n            this.updateTouchEvent(event);\n            this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        const mouseOpState = this.getOpStateFromAction(this._button, modifier);\n\n        if (mouseOpState) {\n          this.onSinglePanMove(event, mouseOpState);\n        }\n      } //checkDistance\n\n\n      if (this._downValid) {\n        const movement = this.calculatePointersDistance(this._downEvents[this._downEvents.length - 1], event) * this._devPxRatio;\n\n        if (movement > this._movementThreshold) {\n          this._downValid = false;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerUp\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        const nTouch = this._touchCurrent.length;\n\n        for (let i = 0; i < nTouch; i++) {\n          if (this._touchCurrent[i].pointerId == event.pointerId) {\n            this._touchCurrent.splice(i, 1);\n\n            this._touchStart.splice(i, 1);\n\n            break;\n          }\n        }\n\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //singleEnd\n            window.removeEventListener('pointermove', this.onPointerMove);\n            window.removeEventListener('pointerup', this.onPointerUp);\n            this._input = INPUT.NONE;\n            this.onSinglePanEnd();\n            break;\n\n          case INPUT.TWO_FINGER:\n            //doubleEnd\n            this.onDoublePanEnd();\n            this.onPinchEnd();\n            this.onRotateEnd(); //switching to singleStart\n\n            this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n\n          case INPUT.MULT_FINGER:\n            if (this._touchCurrent.length == 0) {\n              window.removeEventListener('pointermove', this.onPointerMove);\n              window.removeEventListener('pointerup', this.onPointerUp); //multCancel\n\n              this._input = INPUT.NONE;\n              this.onTriplePanEnd();\n            }\n\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        window.removeEventListener('pointermove', this.onPointerMove);\n        window.removeEventListener('pointerup', this.onPointerUp);\n        this._input = INPUT.NONE;\n        this.onSinglePanEnd();\n        this._button = -1;\n      }\n\n      if (event.isPrimary) {\n        if (this._downValid) {\n          const downTime = event.timeStamp - this._downEvents[this._downEvents.length - 1].timeStamp;\n\n          if (downTime <= this._maxDownTime) {\n            if (this._nclicks == 0) {\n              //first valid click detected\n              this._nclicks = 1;\n              this._clickStart = performance.now();\n            } else {\n              const clickInterval = event.timeStamp - this._clickStart;\n\n              const movement = this.calculatePointersDistance(this._downEvents[1], this._downEvents[0]) * this._devPxRatio;\n\n              if (clickInterval <= this._maxInterval && movement <= this._posThreshold) {\n                //second valid click detected\n                //fire double tap and reset values\n                this._nclicks = 0;\n\n                this._downEvents.splice(0, this._downEvents.length);\n\n                this.onDoubleTap(event);\n              } else {\n                //new 'first click'\n                this._nclicks = 1;\n\n                this._downEvents.shift();\n\n                this._clickStart = performance.now();\n              }\n            }\n          } else {\n            this._downValid = false;\n            this._nclicks = 0;\n\n            this._downEvents.splice(0, this._downEvents.length);\n          }\n        } else {\n          this._nclicks = 0;\n\n          this._downEvents.splice(0, this._downEvents.length);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onWheel\", event => {\n      var _this$camera3;\n\n      if (this.enabled && this.enableZoom && this.domElement) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        const mouseOp = this.getOpFromAction('WHEEL', modifier);\n\n        if (mouseOp) {\n          event.preventDefault();\n          this.dispatchEvent(_startEvent);\n          const notchDeltaY = 125; //distance of one notch of mouse wheel\n\n          let sgn = event.deltaY / notchDeltaY;\n          let size = 1;\n\n          if (sgn > 0) {\n            size = 1 / this.scaleFactor;\n          } else if (sgn < 0) {\n            size = this.scaleFactor;\n          }\n\n          switch (mouseOp) {\n            case 'ZOOM':\n              this.updateTbState(STATE.SCALE, true);\n\n              if (sgn > 0) {\n                size = 1 / Math.pow(this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(this.scaleFactor, -sgn);\n              }\n\n              if (this.cursorZoom && this.enablePan) {\n                var _this$camera, _this$camera2;\n\n                let scalePoint;\n\n                if (((_this$camera = this.camera) === null || _this$camera === void 0 ? void 0 : _this$camera.type) === 'OrthographicCamera') {\n                  var _this$unprojectOnTbPl;\n\n                  scalePoint = (_this$unprojectOnTbPl = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl === void 0 ? void 0 : _this$unprojectOnTbPl.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n                }\n\n                if (((_this$camera2 = this.camera) === null || _this$camera2 === void 0 ? void 0 : _this$camera2.type) === 'PerspectiveCamera') {\n                  var _this$unprojectOnTbPl2;\n\n                  scalePoint = (_this$unprojectOnTbPl2 = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl2 === void 0 ? void 0 : _this$unprojectOnTbPl2.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n                }\n\n                if (scalePoint !== undefined) this.applyTransformMatrix(this.applyScale(size, scalePoint));\n              } else {\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n\n            case 'FOV':\n              if (((_this$camera3 = this.camera) === null || _this$camera3 === void 0 ? void 0 : _this$camera3.type) === 'PerspectiveCamera') {\n                this.updateTbState(STATE.FOV, true); //Vertigo effect\n                //\t  fov / 2\n                //\t\t|\\\n                //\t\t| \\\n                //\t\t|  \\\n                //\tx\t|\t\\\n                //\t\t| \t \\\n                //\t\t| \t  \\\n                //\t\t| _ _ _\\\n                //\t\t\ty\n                //check for iOs shift shortcut\n\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(this.scaleFactor, -sgn);\n                  }\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this.camera.fov * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                if (newFov > this.maxFov) {\n                  newFov = this.maxFov;\n                } else if (newFov < this.minFov) {\n                  newFov = this.minFov;\n                }\n\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position, false));\n              }\n\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanStart\", (event, operation) => {\n      var _this$camera4;\n\n      if (this.enabled && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (operation) {\n          case 'PAN':\n            if (!this.enablePan) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            if (this.camera) {\n              this.updateTbState(STATE.PAN, true);\n              const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              if (this.enableGrid) {\n                this.drawGrid();\n                this.dispatchEvent(_changeEvent);\n              }\n            }\n\n            break;\n\n          case 'ROTATE':\n            if (!this.enableRotate) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n            }\n\n            if (this.camera) {\n              this.updateTbState(STATE.ROTATE, true);\n              const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              this.activateGizmos(true);\n\n              if (this.enableAnimations) {\n                this._timePrev = this._timeCurrent = performance.now();\n                this._angleCurrent = this._anglePrev = 0;\n\n                this._cursorPosPrev.copy(this._startCursorPosition);\n\n                this._cursorPosCurr.copy(this._cursorPosPrev);\n\n                this._wCurr = 0;\n                this._wPrev = this._wCurr;\n              }\n            }\n\n            this.dispatchEvent(_changeEvent);\n            break;\n\n          case 'FOV':\n            if (!this.enableZoom) return;\n\n            if (((_this$camera4 = this.camera) === null || _this$camera4 === void 0 ? void 0 : _this$camera4.type) === 'PerspectiveCamera') {\n              if (this._animationId != -1) {\n                cancelAnimationFrame(this._animationId);\n                this._animationId = -1;\n                this._timeStart = -1;\n                this.activateGizmos(false);\n                this.dispatchEvent(_changeEvent);\n              }\n\n              this.updateTbState(STATE.FOV, true);\n\n              this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n              this._currentCursorPosition.copy(this._startCursorPosition);\n            }\n\n            break;\n\n          case 'ZOOM':\n            if (!this.enableZoom) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            this.updateTbState(STATE.SCALE, true);\n\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n            this._currentCursorPosition.copy(this._startCursorPosition);\n\n            break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanMove\", (event, opState) => {\n      var _this$camera5;\n\n      if (this.enabled && this.domElement) {\n        const restart = opState != this._state;\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (opState) {\n          case STATE.PAN:\n            if (this.enablePan && this.camera) {\n              if (restart) {\n                //switch to pan operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.drawGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with pan operation\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition));\n              }\n            }\n\n            break;\n\n          case STATE.ROTATE:\n            if (this.enableRotate && this.camera) {\n              if (restart) {\n                //switch to rotate operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(true);\n              } else {\n                //continue with rotate operation\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                const distance = this._startCursorPosition.distanceTo(this._currentCursorPosition);\n\n                const angle = this._startCursorPosition.angleTo(this._currentCursorPosition);\n\n                const amount = Math.max(distance / this._tbRadius, angle); //effective rotation angle\n\n                this.applyTransformMatrix(this.rotate(this.calculateRotationAxis(this._startCursorPosition, this._currentCursorPosition), amount));\n\n                if (this.enableAnimations) {\n                  this._timePrev = this._timeCurrent;\n                  this._timeCurrent = performance.now();\n                  this._anglePrev = this._angleCurrent;\n                  this._angleCurrent = amount;\n\n                  this._cursorPosPrev.copy(this._cursorPosCurr);\n\n                  this._cursorPosCurr.copy(this._currentCursorPosition);\n\n                  this._wPrev = this._wCurr;\n                  this._wCurr = this.calculateAngularSpeed(this._anglePrev, this._angleCurrent, this._timePrev, this._timeCurrent);\n                }\n              }\n            }\n\n            break;\n\n          case STATE.SCALE:\n            if (this.enableZoom) {\n              if (restart) {\n                //switch to zoom operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with zoom operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n            }\n\n            break;\n\n          case STATE.FOV:\n            if (this.enableZoom && ((_this$camera5 = this.camera) === null || _this$camera5 === void 0 ? void 0 : _this$camera5.type) === 'PerspectiveCamera') {\n              if (restart) {\n                //switch to fov operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with fov operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n\n                this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n                const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n                this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n\n            break;\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanEnd\", () => {\n      if (this._state == STATE.ROTATE) {\n        if (!this.enableRotate) {\n          return;\n        }\n\n        if (this.enableAnimations) {\n          //perform rotation animation\n          const deltaTime = performance.now() - this._timeCurrent;\n\n          if (deltaTime < 120) {\n            const w = Math.abs((this._wPrev + this._wCurr) / 2);\n            const self = this;\n            this._animationId = window.requestAnimationFrame(function (t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              const rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            //cursor has been standing still for over 120 ms since last movement\n            this.updateTbState(STATE.IDLE, false);\n            this.activateGizmos(false);\n            this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else if (this._state == STATE.PAN || this._state == STATE.IDLE) {\n        this.updateTbState(STATE.IDLE, false);\n\n        if (this.enableGrid) {\n          this.disposeGrid();\n        }\n\n        this.activateGizmos(false);\n        this.dispatchEvent(_changeEvent);\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onDoubleTap\", event => {\n      if (this.enabled && this.enablePan && this.scene && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        const hitP = this.unprojectOnObj(this.getCursorNDC(_center.x, _center.y, this.domElement), this.camera);\n\n        if (hitP && this.enableAnimations) {\n          const self = this;\n\n          if (this._animationId != -1) {\n            window.cancelAnimationFrame(this._animationId);\n          }\n\n          this._timeStart = -1;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP && !this.enableAnimations) {\n          this.updateTbState(STATE.FOCUS, true);\n          this.focus(hitP, this.scaleFactor);\n          this.updateTbState(STATE.IDLE, false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onDoublePanStart\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.PAN, true);\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n\n        if (rayDir !== undefined) {\n          this._startCursorPosition.copy(rayDir);\n        }\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n\n        this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(this, \"onDoublePanMove\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n\n        if (this._state != STATE.PAN) {\n          this.updateTbState(STATE.PAN, true);\n\n          this._startCursorPosition.copy(this._currentCursorPosition);\n        }\n\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== undefined) this._currentCursorPosition.copy(rayDir);\n        this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition, true));\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onDoublePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onRotateStart\", () => {\n      if (this.enabled && this.enableRotate) {\n        var _this$camera6;\n\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.ZROTATE, true); //this._startFingerRotation = event.rotation;\n\n        this._startFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        this._currentFingerRotation = this._startFingerRotation;\n        (_this$camera6 = this.camera) === null || _this$camera6 === void 0 ? void 0 : _this$camera6.getWorldDirection(this._rotationAxis); //rotation axis\n\n        if (!this.enablePan && !this.enableZoom) {\n          this.activateGizmos(true);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onRotateMove\", () => {\n      if (this.enabled && this.enableRotate && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        let rotationPoint;\n\n        if (this._state != STATE.ZROTATE) {\n          this.updateTbState(STATE.ZROTATE, true);\n          this._startFingerRotation = this._currentFingerRotation;\n        } //this._currentFingerRotation = event.rotation;\n\n\n        this._currentFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n\n        if (!this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(this._gizmoMatrixState);\n        } else if (this.camera) {\n          var _this$unprojectOnTbPl3;\n\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n          rotationPoint = (_this$unprojectOnTbPl3 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl3 === void 0 ? void 0 : _this$unprojectOnTbPl3.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._v3_2);\n        }\n\n        const amount = MathUtils.DEG2RAD * (this._startFingerRotation - this._currentFingerRotation);\n\n        if (rotationPoint !== undefined) {\n          this.applyTransformMatrix(this.zRotate(rotationPoint, amount));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onRotateEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.activateGizmos(false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onPinchStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        this._startFingerDistance = this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]);\n        this._currentFingerDistance = this._startFingerDistance;\n        this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(this, \"onPinchMove\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const minDistance = 12; //minimum distance between fingers (in css pixels)\n\n        if (this._state != STATE.SCALE) {\n          this._startFingerDistance = this._currentFingerDistance;\n          this.updateTbState(STATE.SCALE, true);\n        }\n\n        this._currentFingerDistance = Math.max(this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]), minDistance * this._devPxRatio);\n        const amount = this._currentFingerDistance / this._startFingerDistance;\n        let scalePoint;\n\n        if (!this.enablePan) {\n          scalePoint = this._gizmos.position;\n        } else {\n          var _this$camera7, _this$camera8;\n\n          if (((_this$camera7 = this.camera) === null || _this$camera7 === void 0 ? void 0 : _this$camera7.type) === 'OrthographicCamera') {\n            var _this$unprojectOnTbPl4;\n\n            scalePoint = (_this$unprojectOnTbPl4 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl4 === void 0 ? void 0 : _this$unprojectOnTbPl4.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n          } else if (((_this$camera8 = this.camera) === null || _this$camera8 === void 0 ? void 0 : _this$camera8.type) === 'PerspectiveCamera') {\n            var _this$unprojectOnTbPl5;\n\n            scalePoint = (_this$unprojectOnTbPl5 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl5 === void 0 ? void 0 : _this$unprojectOnTbPl5.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n          }\n        }\n\n        if (scalePoint !== undefined) {\n          this.applyTransformMatrix(this.applyScale(amount, scalePoint));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onPinchEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onTriplePanStart\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true); //const center = event.center;\n\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n\n        this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n      }\n    });\n\n    _defineProperty(this, \"onTriplePanMove\", () => {\n      if (this.enabled && this.enableZoom && this.camera && this.domElement) {\n        //\t  fov / 2\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\tx\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t\t| _ _ _\\\n        //\t\t\ty\n        //const center = event.center;\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n        this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n        let size = 1;\n\n        if (movement < 0) {\n          size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(this.scaleFactor, movement * screenNotches);\n        }\n\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        const x = this._v3_1.distanceTo(this._gizmos.position);\n\n        let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n        //check min and max distance\n\n        xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n        const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n        let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n        newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n        const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n        this.setFov(newFov);\n        this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n        const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onTriplePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent); //this.dispatchEvent( _changeEvent );\n    });\n\n    _defineProperty(this, \"setCenter\", (clientX, clientY) => {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n\n    _defineProperty(this, \"initializeMouseActions\", () => {\n      this.setMouseAction('PAN', 0, 'CTRL');\n      this.setMouseAction('PAN', 2);\n      this.setMouseAction('ROTATE', 0);\n      this.setMouseAction('ZOOM', 'WHEEL');\n      this.setMouseAction('ZOOM', 1);\n      this.setMouseAction('FOV', 'WHEEL', 'SHIFT');\n      this.setMouseAction('FOV', 1, 'SHIFT');\n    });\n\n    _defineProperty(this, \"setMouseAction\", (operation, mouse, key = null) => {\n      const operationInput = ['PAN', 'ROTATE', 'ZOOM', 'FOV'];\n      const mouseInput = [0, 1, 2, 'WHEEL'];\n      const keyInput = ['CTRL', 'SHIFT', null];\n      let state;\n\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        //invalid parameters\n        return false;\n      }\n\n      if (mouse == 'WHEEL') {\n        if (operation != 'ZOOM' && operation != 'FOV') {\n          //cannot associate 2D operation to 1D input\n          return false;\n        }\n      }\n\n      switch (operation) {\n        case 'PAN':\n          state = STATE.PAN;\n          break;\n\n        case 'ROTATE':\n          state = STATE.ROTATE;\n          break;\n\n        case 'ZOOM':\n          state = STATE.SCALE;\n          break;\n\n        case 'FOV':\n          state = STATE.FOV;\n          break;\n      }\n\n      const action = {\n        operation: operation,\n        mouse: mouse,\n        key: key,\n        state: state\n      };\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == action.mouse && this.mouseActions[i].key == action.key) {\n          this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n\n      this.mouseActions.push(action);\n      return true;\n    });\n\n    _defineProperty(this, \"getOpFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getOpStateFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getAngle\", (p1, p2) => {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n\n    _defineProperty(this, \"updateTouchEvent\", event => {\n      for (let i = 0; i < this._touchCurrent.length; i++) {\n        if (this._touchCurrent[i].pointerId == event.pointerId) {\n          this._touchCurrent.splice(i, 1, event);\n\n          break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"calculateAngularSpeed\", (p0, p1, t0, t1) => {\n      const s = p1 - p0;\n      const t = (t1 - t0) / 1000;\n\n      if (t == 0) {\n        return 0;\n      }\n\n      return s / t;\n    });\n\n    _defineProperty(this, \"calculatePointersDistance\", (p0, p1) => {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n\n    _defineProperty(this, \"calculateRotationAxis\", (vec1, vec2) => {\n      this._rotationMatrix.extractRotation(this._cameraMatrixState);\n\n      this._quat.setFromRotationMatrix(this._rotationMatrix);\n\n      this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(this._quat);\n\n      return this._rotationAxis.normalize().clone();\n    });\n\n    _defineProperty(this, \"calculateTbRadius\", camera => {\n      const factor = 0.67;\n      const distance = camera.position.distanceTo(this._gizmos.position);\n\n      if (camera.type == 'PerspectiveCamera') {\n        const halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5; //vertical fov/2 in radians\n\n        const halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV)); //horizontal fov/2 in radians\n\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera.type == 'OrthographicCamera') {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n\n    _defineProperty(this, \"focus\", (point, size, amount = 1) => {\n      if (this.camera) {\n        const focusPoint = point.clone(); //move center of camera (along with gizmos) towards point of interest\n\n        focusPoint.sub(this._gizmos.position).multiplyScalar(amount);\n\n        this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n\n        const gizmoStateTemp = this._gizmoMatrixState.clone();\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        const cameraStateTemp = this._cameraMatrixState.clone();\n\n        this._cameraMatrixState.premultiply(this._translationMatrix);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale); //apply zoom\n\n\n        if (this.enableZoom) {\n          this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n        }\n\n        this._gizmoMatrixState.copy(gizmoStateTemp);\n\n        this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n\n    _defineProperty(this, \"drawGrid\", () => {\n      if (this.scene) {\n        var _this$camera9, _this$camera10;\n\n        const color = 0x888888;\n        const multiplier = 3;\n        let size, divisions, maxLength, tick;\n\n        if (((_this$camera9 = this.camera) === null || _this$camera9 === void 0 ? void 0 : _this$camera9.type) === 'OrthographicCamera') {\n          const width = this.camera.right - this.camera.left;\n          const height = this.camera.bottom - this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / this.camera.zoom * multiplier;\n          divisions = size / tick * this.camera.zoom;\n        } else if (((_this$camera10 = this.camera) === null || _this$camera10 === void 0 ? void 0 : _this$camera10.type) === 'PerspectiveCamera') {\n          const distance = this.camera.position.distanceTo(this._gizmos.position);\n          const halfFovV = MathUtils.DEG2RAD * this.camera.fov * 0.5;\n          const halfFovH = Math.atan(this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n\n        if (this._grid == null && this.camera) {\n          this._grid = new GridHelper(size, divisions, color, color);\n\n          this._grid.position.copy(this._gizmos.position);\n\n          this._gridPosition.copy(this._grid.position);\n\n          this._grid.quaternion.copy(this.camera.quaternion);\n\n          this._grid.rotateX(Math.PI * 0.5);\n\n          this.scene.add(this._grid);\n        }\n      }\n    });\n\n    _defineProperty(this, \"connect\", domElement => {\n      // https://github.com/mrdoob/three.js/issues/20575\n      if (domElement === document) {\n        console.error('THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n\n      this.domElement = domElement; // disables touch scroll\n      // touch-action needs to be defined for pointer events to work on mobile\n      // https://stackoverflow.com/a/48254578\n\n      this.domElement.style.touchAction = 'none';\n      this.domElement.addEventListener('contextmenu', this.onContextMenu);\n      this.domElement.addEventListener('pointerdown', this.onPointerDown);\n      this.domElement.addEventListener('pointercancel', this.onPointerCancel);\n      this.domElement.addEventListener('wheel', this.onWheel);\n    });\n\n    _defineProperty(this, \"dispose\", () => {\n      var _this$domElement, _this$domElement2, _this$domElement3, _this$domElement4, _this$scene;\n\n      if (this._animationId != -1) {\n        window.cancelAnimationFrame(this._animationId);\n      }\n\n      (_this$domElement = this.domElement) === null || _this$domElement === void 0 ? void 0 : _this$domElement.removeEventListener('pointerdown', this.onPointerDown);\n      (_this$domElement2 = this.domElement) === null || _this$domElement2 === void 0 ? void 0 : _this$domElement2.removeEventListener('pointercancel', this.onPointerCancel);\n      (_this$domElement3 = this.domElement) === null || _this$domElement3 === void 0 ? void 0 : _this$domElement3.removeEventListener('wheel', this.onWheel);\n      (_this$domElement4 = this.domElement) === null || _this$domElement4 === void 0 ? void 0 : _this$domElement4.removeEventListener('contextmenu', this.onContextMenu);\n      window.removeEventListener('pointermove', this.onPointerMove);\n      window.removeEventListener('pointerup', this.onPointerUp);\n      window.removeEventListener('resize', this.onWindowResize);\n      (_this$scene = this.scene) === null || _this$scene === void 0 ? void 0 : _this$scene.remove(this._gizmos);\n      this.disposeGrid();\n    });\n\n    _defineProperty(this, \"disposeGrid\", () => {\n      if (this._grid && this.scene) {\n        this.scene.remove(this._grid);\n        this._grid = null;\n      }\n    });\n\n    _defineProperty(this, \"easeOutCubic\", t => {\n      return 1 - Math.pow(1 - t, 3);\n    });\n\n    _defineProperty(this, \"activateGizmos\", isActive => {\n      for (const gizmo of this._gizmos.children) {\n        gizmo.material.setValues({\n          opacity: isActive ? 1 : 0.6\n        });\n      }\n    });\n\n    _defineProperty(this, \"getCursorNDC\", (cursorX, cursorY, canvas) => {\n      const canvasRect = canvas.getBoundingClientRect();\n\n      this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n\n      this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n\n      return this._v2_1.clone();\n    });\n\n    _defineProperty(this, \"getCursorPosition\", (cursorX, cursorY, canvas) => {\n      var _this$camera11;\n\n      this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n      if (((_this$camera11 = this.camera) === null || _this$camera11 === void 0 ? void 0 : _this$camera11.type) === 'OrthographicCamera') {\n        this._v2_1.x *= (this.camera.right - this.camera.left) * 0.5;\n        this._v2_1.y *= (this.camera.top - this.camera.bottom) * 0.5;\n      }\n\n      return this._v2_1.clone();\n    });\n\n    _defineProperty(this, \"setCamera\", camera => {\n      if (camera) {\n        camera.lookAt(this.target);\n        camera.updateMatrix(); //setting state\n\n        if ((camera === null || camera === void 0 ? void 0 : camera.type) == 'PerspectiveCamera') {\n          this._fov0 = camera.fov;\n          this._fovState = camera.fov;\n        }\n\n        this._cameraMatrixState0.copy(camera.matrix);\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraProjectionState.copy(camera.projectionMatrix);\n\n        this._zoom0 = camera.zoom;\n        this._zoomState = this._zoom0;\n        this._initialNear = camera.near;\n        this._nearPos0 = camera.position.distanceTo(this.target) - camera.near;\n        this._nearPos = this._initialNear;\n        this._initialFar = camera.far;\n        this._farPos0 = camera.position.distanceTo(this.target) - camera.far;\n        this._farPos = this._initialFar;\n\n        this._up0.copy(camera.up);\n\n        this._upState.copy(camera.up);\n\n        this.camera = camera;\n        this.camera.updateProjectionMatrix(); //making gizmos\n\n        const tbRadius = this.calculateTbRadius(camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n      }\n    });\n\n    _defineProperty(this, \"makeGizmos\", (tbCenter, tbRadius) => {\n      // @ts-expect-error\n      const curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      const points = curve.getPoints(this._curvePts); //geometry\n\n      const curveGeometry = new BufferGeometry().setFromPoints(points); //material\n\n      const curveMaterialX = new LineBasicMaterial({\n        color: 0xff8080,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialY = new LineBasicMaterial({\n        color: 0x80ff80,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialZ = new LineBasicMaterial({\n        color: 0x8080ff,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      }); //line\n\n      const gizmoX = new Line(curveGeometry, curveMaterialX);\n      const gizmoY = new Line(curveGeometry, curveMaterialY);\n      const gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      const rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation; //setting state\n\n      this._gizmoMatrixState0.identity().setPosition(tbCenter);\n\n      this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n      if (this.camera && this.camera.zoom != 1) {\n        //adapt gizmos size to camera zoom\n        const size = 1 / this.camera.zoom;\n\n        this._scaleMatrix.makeScale(size, size, size);\n\n        this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix);\n\n        this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n      }\n\n      this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.clear();\n\n      this._gizmos.add(gizmoX);\n\n      this._gizmos.add(gizmoY);\n\n      this._gizmos.add(gizmoZ);\n    });\n\n    _defineProperty(this, \"onFocusAnim\", (time, point, cameraMatrix, gizmoMatrix) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_FOCUS) {\n        const deltaTime = time - this._timeStart;\n        const animTime = deltaTime / this.focusAnimationTime;\n\n        this._gizmoMatrixState.copy(gizmoMatrix);\n\n        if (animTime >= 1) {\n          //animation end\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, this.scaleFactor);\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        } else {\n          const amount = this.easeOutCubic(animTime);\n          const size = 1 - amount + this.scaleFactor * amount;\n\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, size, amount);\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n      }\n    });\n\n    _defineProperty(this, \"onRotationAnim\", (time, rotationAxis, w0) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._anglePrev = 0;\n        this._angleCurrent = 0;\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_ROTATE) {\n        //w = w0 + alpha * t\n        const deltaTime = (time - this._timeStart) / 1000;\n        const w = w0 + -this.dampingFactor * deltaTime;\n\n        if (w > 0) {\n          //tetha = 0.5 * alpha * t^2 + w0 * t + tetha0\n          this._angleCurrent = 0.5 * -this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          this.applyTransformMatrix(this.rotate(rotationAxis, this._angleCurrent));\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          this._animationId = -1;\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n\n        if (this._state != STATE.ROTATE) {\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n\n    _defineProperty(this, \"pan\", (p0, p1, adjust = false) => {\n      if (this.camera) {\n        const movement = p0.clone().sub(p1);\n\n        if (this.camera.type === 'OrthographicCamera') {\n          //adjust movement amount\n          movement.multiplyScalar(1 / this.camera.zoom);\n        }\n\n        if (this.camera.type === 'PerspectiveCamera' && adjust) {\n          //adjust movement amount\n          this._v3_1.setFromMatrixPosition(this._cameraMatrixState0); //camera's initial position\n\n\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0); //gizmo's initial position\n\n\n          const distanceFactor = this._v3_1.distanceTo(this._v3_2) / this.camera.position.distanceTo(this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n\n        this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(this.camera.quaternion);\n\n        this._m4_1.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_1);\n      }\n\n      return _transformation;\n    });\n\n    _defineProperty(this, \"reset\", () => {\n      if (this.camera) {\n        this.camera.zoom = this._zoom0;\n\n        if (this.camera.type === 'PerspectiveCamera') {\n          this.camera.fov = this._fov0;\n        }\n\n        this.camera.near = this._nearPos;\n        this.camera.far = this._farPos;\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(this._up0);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n        this._gizmoMatrixState0.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"rotate\", (axis, angle) => {\n      const point = this._gizmos.position; //rotation center\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._rotationMatrix.makeRotationAxis(axis, -angle); //rotate camera\n\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this.setTransformationMatrices(this._m4_1);\n      return _transformation;\n    });\n\n    _defineProperty(this, \"copyState\", () => {\n      if (this.camera) {\n        var _this$camera12;\n\n        const state = JSON.stringify(((_this$camera12 = this.camera) === null || _this$camera12 === void 0 ? void 0 : _this$camera12.type) === 'OrthographicCamera' ? {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        } : {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraFov: this.camera.fov,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        });\n        navigator.clipboard.writeText(state);\n      }\n    });\n\n    _defineProperty(this, \"pasteState\", () => {\n      const self = this;\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n\n    _defineProperty(this, \"saveState\", () => {\n      if (!this.camera) return;\n\n      this._cameraMatrixState0.copy(this.camera.matrix);\n\n      this._gizmoMatrixState0.copy(this._gizmos.matrix);\n\n      this._nearPos = this.camera.near;\n      this._farPos = this.camera.far;\n      this._zoom0 = this.camera.zoom;\n\n      this._up0.copy(this.camera.up);\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._fov0 = this.camera.fov;\n      }\n    });\n\n    _defineProperty(this, \"applyScale\", (size, point, scaleGizmos = true) => {\n      if (!this.camera) return;\n      const scalePoint = point.clone();\n      let sizeInverse = 1 / size;\n\n      if (this.camera.type === 'OrthographicCamera') {\n        //camera zoom\n        this.camera.zoom = this._zoomState;\n        this.camera.zoom *= size; //check min and max zoom\n\n        if (this.camera.zoom > this.maxZoom) {\n          this.camera.zoom = this.maxZoom;\n          sizeInverse = this._zoomState / this.maxZoom;\n        } else if (this.camera.zoom < this.minZoom) {\n          this.camera.zoom = this.minZoom;\n          sizeInverse = this._zoomState / this.minZoom;\n        }\n\n        this.camera.updateProjectionMatrix();\n\n        this._v3_1.setFromMatrixPosition(this._gizmoMatrixState); //gizmos position\n        //scale gizmos so they appear in the same spot having the same dimension\n\n\n        this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n        this._translationMatrix.makeTranslation(-this._v3_1.x, -this._v3_1.y, -this._v3_1.z);\n\n        this._m4_2.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z).multiply(this._scaleMatrix);\n\n        this._m4_2.multiply(this._translationMatrix); //move camera and gizmos to obtain pinch effect\n\n\n        scalePoint.sub(this._v3_1);\n        const amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n\n        this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n\n        this._m4_2.premultiply(this._m4_1);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_2);\n        return _transformation;\n      }\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState); //move camera\n\n\n        let distance = this._v3_1.distanceTo(scalePoint);\n\n        let amount = distance - distance * sizeInverse; //check min and max distance\n\n        const newDistance = distance - amount;\n\n        if (newDistance < this.minDistance) {\n          sizeInverse = this.minDistance / distance;\n          amount = distance - distance * sizeInverse;\n        } else if (newDistance > this.maxDistance) {\n          sizeInverse = this.maxDistance / distance;\n          amount = distance - distance * sizeInverse;\n        }\n\n        let direction = scalePoint.clone().sub(this._v3_1).normalize().multiplyScalar(amount);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        if (scaleGizmos) {\n          //scale gizmos so they appear in the same spot having the same dimension\n          const pos = this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(this._v3_2).normalize().multiplyScalar(amount);\n\n          this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n\n          this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n          this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(this._translationMatrix);\n\n          this._m4_2.multiply(this._scaleMatrix);\n\n          this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n\n          this._m4_2.multiply(this._translationMatrix);\n\n          this.setTransformationMatrices(this._m4_1, this._m4_2);\n        } else {\n          this.setTransformationMatrices(this._m4_1);\n        }\n\n        return _transformation;\n      }\n    });\n\n    _defineProperty(this, \"setFov\", value => {\n      var _this$camera13;\n\n      if (((_this$camera13 = this.camera) === null || _this$camera13 === void 0 ? void 0 : _this$camera13.type) === 'PerspectiveCamera') {\n        this.camera.fov = MathUtils.clamp(value, this.minFov, this.maxFov);\n        this.camera.updateProjectionMatrix();\n      }\n    });\n\n    _defineProperty(this, \"setTarget\", (x, y, z) => {\n      if (this.camera) {\n        this.target.set(x, y, z);\n\n        this._gizmos.position.set(x, y, z); //for correct radius calculation\n\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n        this.camera.lookAt(this.target);\n      }\n    });\n\n    _defineProperty(this, \"zRotate\", (point, angle) => {\n      this._rotationMatrix.makeRotationAxis(this._rotationAxis, angle);\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(point); //vector from rotation center to gizmos position\n\n\n      this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis, angle); //apply rotation\n\n\n      this._v3_2.sub(this._v3_1);\n\n      this._m4_2.makeTranslation(this._v3_2.x, this._v3_2.y, this._v3_2.z);\n\n      this.setTransformationMatrices(this._m4_1, this._m4_2);\n      return _transformation;\n    });\n\n    _defineProperty(this, \"unprojectOnObj\", (cursor, camera) => {\n      if (!this.scene) return null;\n      const raycaster = new Raycaster();\n      raycaster.near = camera.near;\n      raycaster.far = camera.far;\n      raycaster.setFromCamera(cursor, camera);\n      const intersect = raycaster.intersectObjects(this.scene.children, true);\n\n      for (let i = 0; i < intersect.length; i++) {\n        if (intersect[i].object.uuid != this._gizmos.uuid && intersect[i].face) {\n          return intersect[i].point.clone();\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"unprojectOnTbSurface\", (camera, cursorX, cursorY, canvas, tbRadius) => {\n      if (camera.type == 'OrthographicCamera') {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        const x2 = Math.pow(this._v2_1.x, 2);\n        const y2 = Math.pow(this._v2_1.y, 2);\n        const r2 = Math.pow(this._tbRadius, 2);\n\n        if (x2 + y2 <= r2 * 0.5) {\n          //intersection with sphere\n          this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          //intersection with hyperboloid\n          this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n\n        return this._v3_1;\n      }\n\n      if (camera.type == 'PerspectiveCamera') {\n        //unproject cursor on the near plane\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n\n\n        const cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        const radius2 = Math.pow(tbRadius, 2); //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(this._v3_1.x, this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        /*\n         * calculate intersection point between unprojected ray and trackball surface\n         *|y = m * x + q\n         *|x^2 + y^2 = r^2\n         *\n         * (m^2 + 1) * x^2 + (2 * m * q) * x + q^2 - r^2 = 0\n         */\n\n        let a = Math.pow(m, 2) + 1;\n        let b = 2 * m * q;\n        let c = Math.pow(q, 2) - radius2;\n        let delta = Math.pow(b, 2) - 4 * a * c;\n\n        if (delta >= 0) {\n          //intersection with sphere\n          this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n          this._v2_1.setY(m * this._v2_1.x + q);\n\n          const angle = MathUtils.RAD2DEG * this._v2_1.angle();\n\n          if (angle >= 45) {\n            //if angle between intersection point and X' axis is >= 45°, return that point\n            //otherwise, calculate intersection point with hyperboloid\n            const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n            rayDir.multiplyScalar(rayLength);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        } //intersection with hyperboloid\n\n        /*\n         *|y = m * x + q\n         *|y = (1 / x) * (r^2 / 2)\n         *\n         * m * x^2 + q * x - r^2 / 2 = 0\n         */\n\n\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n\n        this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n        this._v2_1.setY(m * this._v2_1.x + q);\n\n        const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(this, \"unprojectOnTbPlane\", (camera, cursorX, cursorY, canvas, initialDistance = false) => {\n      if (camera.type == 'OrthographicCamera') {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        return this._v3_1.clone();\n      }\n\n      if (camera.type == 'PerspectiveCamera') {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas)); //unproject cursor on the near plane\n\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n        //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        let cameraGizmoDistance;\n\n        if (initialDistance) {\n          cameraGizmoDistance = this._v3_1.setFromMatrixPosition(this._cameraMatrixState0).distanceTo(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        }\n        /*\n         * calculate intersection point between unprojected ray and the plane\n         *|y = mx + q\n         *|y = 0\n         *\n         * x = -q/m\n         */\n\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        const x = -q / m;\n        const rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(this, \"updateMatrixState\", () => {\n      if (!this.camera) return; //update camera and gizmos state\n\n      this._cameraMatrixState.copy(this.camera.matrix);\n\n      this._gizmoMatrixState.copy(this._gizmos.matrix);\n\n      if (this.camera.type === 'OrthographicCamera') {\n        this._cameraProjectionState.copy(this.camera.projectionMatrix);\n\n        this.camera.updateProjectionMatrix();\n        this._zoomState = this.camera.zoom;\n      }\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._fovState = this.camera.fov;\n      }\n    });\n\n    _defineProperty(this, \"updateTbState\", (newState, updateMatrices) => {\n      this._state = newState;\n\n      if (updateMatrices) {\n        this.updateMatrixState();\n      }\n    });\n\n    _defineProperty(this, \"update\", () => {\n      const EPS = 0.000001; // Update target and gizmos state\n\n      if (!this.target.equals(this._currentTarget) && this.camera) {\n        this._gizmos.position.set(this.target.x, this.target.y, this.target.z); //for correct radius calculation\n\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n\n        this._currentTarget.copy(this.target);\n      }\n\n      if (!this.camera) return; //check min/max parameters\n\n      if (this.camera.type === 'OrthographicCamera') {\n        //check zoom\n        if (this.camera.zoom > this.maxZoom || this.camera.zoom < this.minZoom) {\n          const newZoom = MathUtils.clamp(this.camera.zoom, this.minZoom, this.maxZoom);\n          this.applyTransformMatrix(this.applyScale(newZoom / this.camera.zoom, this._gizmos.position, true));\n        }\n      }\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        //check distance\n        const distance = this.camera.position.distanceTo(this._gizmos.position);\n\n        if (distance > this.maxDistance + EPS || distance < this.minDistance - EPS) {\n          const newDistance = MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n          this.applyTransformMatrix(this.applyScale(newDistance / distance, this._gizmos.position));\n          this.updateMatrixState();\n        } //check fov\n\n\n        if (this.camera.fov < this.minFov || this.camera.fov > this.maxFov) {\n          this.camera.fov = MathUtils.clamp(this.camera.fov, this.minFov, this.maxFov);\n          this.camera.updateProjectionMatrix();\n        }\n\n        const oldRadius = this._tbRadius;\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        if (oldRadius < this._tbRadius - EPS || oldRadius > this._tbRadius + EPS) {\n          const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n          const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n          const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          const points = curve.getPoints(this._curvePts);\n          const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n          for (const gizmo in this._gizmos.children) {\n            const child = this._gizmos.children[gizmo];\n            child.geometry = curveGeometry;\n          }\n        }\n      }\n\n      this.camera.lookAt(this._gizmos.position);\n    });\n\n    _defineProperty(this, \"setStateFromJSON\", json => {\n      const state = JSON.parse(json);\n\n      if (state.arcballState && this.camera) {\n        this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(state.arcballState.cameraUp);\n        this.camera.near = state.arcballState.cameraNear;\n        this.camera.far = state.arcballState.cameraFar;\n        this.camera.zoom = state.arcballState.cameraZoom;\n\n        if (this.camera.type === 'PerspectiveCamera') {\n          this.camera.fov = state.arcballState.cameraFov;\n        }\n\n        this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        const gizmoTmp = new Matrix4().copy(this._gizmoMatrixState0);\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n\n        this._gizmoMatrixState0.copy(gizmoTmp);\n\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    this.camera = null;\n    this.domElement = _domElement;\n    this.scene = scene;\n    this.mouseActions = [];\n    this._mouseOp = null; //global vectors and matrices that are used in some operations to avoid creating new objects every time (e.g. every time cursor moves)\n\n    this._v2_1 = new Vector2();\n    this._v3_1 = new Vector3();\n    this._v3_2 = new Vector3();\n    this._m4_1 = new Matrix4();\n    this._m4_2 = new Matrix4();\n    this._quat = new Quaternion(); //transformation matrices\n\n    this._translationMatrix = new Matrix4(); //matrix for translation operation\n\n    this._rotationMatrix = new Matrix4(); //matrix for rotation operation\n\n    this._scaleMatrix = new Matrix4(); //matrix for scaling operation\n\n    this._rotationAxis = new Vector3(); //axis for rotate operation\n    //camera state\n\n    this._cameraMatrixState = new Matrix4();\n    this._cameraProjectionState = new Matrix4();\n    this._fovState = 1;\n    this._upState = new Vector3();\n    this._zoomState = 1;\n    this._nearPos = 0;\n    this._farPos = 0;\n    this._gizmoMatrixState = new Matrix4(); //initial values\n\n    this._up0 = new Vector3();\n    this._zoom0 = 1;\n    this._fov0 = 0;\n    this._initialNear = 0;\n    this._nearPos0 = 0;\n    this._initialFar = 0;\n    this._farPos0 = 0;\n    this._cameraMatrixState0 = new Matrix4();\n    this._gizmoMatrixState0 = new Matrix4(); //pointers array\n\n    this._button = -1;\n    this._touchStart = [];\n    this._touchCurrent = [];\n    this._input = INPUT.NONE; //two fingers touch interaction\n\n    this._switchSensibility = 32; //minimum movement to be performed to fire single pan start after the second finger has been released\n\n    this._startFingerDistance = 0; //distance between two fingers\n\n    this._currentFingerDistance = 0;\n    this._startFingerRotation = 0; //amount of rotation performed with two fingers\n\n    this._currentFingerRotation = 0; //double tap\n\n    this._devPxRatio = 0;\n    this._downValid = true;\n    this._nclicks = 0;\n    this._downEvents = [];\n    this._clickStart = 0; //first click time\n\n    this._maxDownTime = 250;\n    this._maxInterval = 300;\n    this._posThreshold = 24;\n    this._movementThreshold = 24; //cursor positions\n\n    this._currentCursorPosition = new Vector3();\n    this._startCursorPosition = new Vector3(); //grid\n\n    this._grid = null; //grid to be visualized during pan operation\n\n    this._gridPosition = new Vector3(); //gizmos\n\n    this._gizmos = new Group();\n    this._curvePts = 128; //animations\n\n    this._timeStart = -1; //initial time\n\n    this._animationId = -1; //focus animation\n\n    this.focusAnimationTime = 500; //duration of focus animation in ms\n    //rotate animation\n\n    this._timePrev = 0; //time at which previous rotate operation has been detected\n\n    this._timeCurrent = 0; //time at which current rotate operation has been detected\n\n    this._anglePrev = 0; //angle of previous rotation\n\n    this._angleCurrent = 0; //angle of current rotation\n\n    this._cursorPosPrev = new Vector3(); //cursor position when previous rotate operation has been detected\n\n    this._cursorPosCurr = new Vector3(); //cursor position when current rotate operation has been detected\n\n    this._wPrev = 0; //angular velocity of the previous rotate operation\n\n    this._wCurr = 0; //angular velocity of the current rotate operation\n    //parameters\n\n    this.adjustNearFar = false;\n    this.scaleFactor = 1.1; //zoom/distance multiplier\n\n    this.dampingFactor = 25;\n    this.wMax = 20; //maximum angular velocity allowed\n\n    this.enableAnimations = true; //if animations should be performed\n\n    this.enableGrid = false; //if grid should be showed during pan operation\n\n    this.cursorZoom = false; //if wheel zoom should be cursor centered\n\n    this.minFov = 5;\n    this.maxFov = 90;\n    this.enabled = true;\n    this.enablePan = true;\n    this.enableRotate = true;\n    this.enableZoom = true;\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n    this.minZoom = 0;\n    this.maxZoom = Infinity; //trackball parameters\n\n    this.target = new Vector3(0, 0, 0);\n    this._currentTarget = new Vector3(0, 0, 0);\n    this._tbRadius = 1; //FSA\n\n    this._state = STATE.IDLE;\n    this.setCamera(_camera);\n\n    if (this.scene) {\n      this.scene.add(this._gizmos);\n    }\n\n    this._devPxRatio = window.devicePixelRatio;\n    this.initializeMouseActions();\n    if (this.domElement) this.connect(this.domElement);\n    window.addEventListener('resize', this.onWindowResize);\n  } //listeners\n\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n\n\n  applyTransformMatrix(transformation) {\n    if (transformation !== null && transformation !== void 0 && transformation.camera && this.camera) {\n      this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n\n      this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n      this.camera.updateMatrix(); //update camera up vector\n\n      if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n        this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n      }\n    }\n\n    if (transformation !== null && transformation !== void 0 && transformation.gizmos) {\n      this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n\n      this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.updateMatrix();\n    }\n\n    if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\n      const tbRadius = this.calculateTbRadius(this.camera);\n\n      if (tbRadius !== undefined) {\n        this._tbRadius = tbRadius;\n      }\n\n      if (this.adjustNearFar) {\n        const cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n        const bb = new Box3();\n        bb.setFromObject(this._gizmos);\n        const sphere = new Sphere();\n        bb.getBoundingSphere(sphere);\n        const adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n        const regularNearPosition = cameraDistance - this._initialNear;\n        const minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n        this.camera.near = cameraDistance - minNearPos;\n        const adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n        const regularFarPosition = cameraDistance - this._initialFar;\n        const minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n        this.camera.far = cameraDistance - minFarPos;\n        this.camera.updateProjectionMatrix();\n      } else {\n        let update = false;\n\n        if (this.camera.near != this._initialNear) {\n          this.camera.near = this._initialNear;\n          update = true;\n        }\n\n        if (this.camera.far != this._initialFar) {\n          this.camera.far = this._initialFar;\n          update = true;\n        }\n\n        if (update) {\n          this.camera.updateProjectionMatrix();\n        }\n      }\n    }\n  }\n  /**\n   * Calculate the angular speed\n   * @param {Number} p0 Position at t0\n   * @param {Number} p1 Position at t1\n   * @param {Number} t0 Initial time in milliseconds\n   * @param {Number} t1 Ending time in milliseconds\n   */\n\n  /**\n   * Set gizmos visibility\n   * @param {Boolean} value Value of gizmos visibility\n   */\n\n\n  setGizmosVisible(value) {\n    this._gizmos.visible = value;\n    this.dispatchEvent(_changeEvent);\n  }\n  /**\n   * Creates the rotation gizmos matching trackball center and radius\n   * @param {Vector3} tbCenter The trackball center\n   * @param {number} tbRadius The trackball radius\n   */\n\n  /**\n   * Set values in transformation object\n   * @param {Matrix4} camera Transformation to be applied to the camera\n   * @param {Matrix4} gizmos Transformation to be applied to gizmos\n   */\n\n\n  setTransformationMatrices(camera = null, gizmos = null) {\n    if (camera) {\n      if (_transformation.camera) {\n        _transformation.camera.copy(camera);\n      } else {\n        _transformation.camera = camera.clone();\n      }\n    } else {\n      _transformation.camera = null;\n    }\n\n    if (gizmos) {\n      if (_transformation.gizmos) {\n        _transformation.gizmos.copy(gizmos);\n      } else {\n        _transformation.gizmos = gizmos.clone();\n      }\n    } else {\n      _transformation.gizmos = null;\n    }\n  }\n  /**\n   * Rotate camera around its direction axis passing by a given point by a given angle\n   * @param {Vector3} point The point where the rotation axis is passing trough\n   * @param {Number} angle Angle in radians\n   * @returns The computed transormation matix\n   */\n\n\n}\n\nexport { ArcballControls };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/controls/ArcballControls.js"],"names":["_defineProperty","Matrix4","EventDispatcher","EllipseCurve","BufferGeometry","MathUtils","Vector3","GridHelper","LineBasicMaterial","Line","Raycaster","Vector2","Quaternion","Group","Box3","Sphere","STATE","IDLE","Symbol","ROTATE","PAN","SCALE","FOV","FOCUS","ZROTATE","TOUCH_MULTI","ANIMATION_FOCUS","ANIMATION_ROTATE","INPUT","NONE","ONE_FINGER","ONE_FINGER_SWITCHED","TWO_FINGER","MULT_FINGER","CURSOR","_center","x","y","_transformation","camera","gizmos","_changeEvent","type","_startEvent","_endEvent","ArcballControls","constructor","_camera","_domElement","scene","scale","_gizmos","z","tbRadius","calculateTbRadius","undefined","_tbRadius","newRadius","curve","points","getPoints","_curvePts","curveGeometry","setFromPoints","gizmo","children","child","geometry","dispatchEvent","event","enabled","i","mouseActions","length","mouse","preventDefault","_touchStart","splice","_touchCurrent","_input","button","isPrimary","_downValid","_downEvents","push","pointerType","onSinglePanStart","window","addEventListener","onPointerMove","onPointerUp","onRotateStart","onPinchStart","onDoublePanStart","onTriplePanStart","modifier","ctrlKey","metaKey","shiftKey","_mouseOp","getOpFromAction","_button","updateTouchEvent","onSinglePanMove","movement","calculatePointersDistance","_devPxRatio","_switchSensibility","onRotateMove","onPinchMove","onDoublePanMove","onTriplePanMove","mouseOpState","getOpStateFromAction","_movementThreshold","nTouch","pointerId","removeEventListener","onSinglePanEnd","onDoublePanEnd","onPinchEnd","onRotateEnd","onTriplePanEnd","downTime","timeStamp","_maxDownTime","_nclicks","_clickStart","performance","now","clickInterval","_maxInterval","_posThreshold","onDoubleTap","shift","_this$camera3","enableZoom","domElement","mouseOp","notchDeltaY","sgn","deltaY","size","scaleFactor","updateTbState","Math","pow","cursorZoom","enablePan","_this$camera","_this$camera2","scalePoint","_this$unprojectOnTbPl","unprojectOnTbPlane","clientX","clientY","applyQuaternion","quaternion","multiplyScalar","zoom","add","position","_this$unprojectOnTbPl2","applyTransformMatrix","applyScale","_grid","disposeGrid","drawGrid","deltaX","_v3_1","setFromMatrixPosition","_cameraMatrixState","distanceTo","xNew","clamp","minDistance","maxDistance","tan","DEG2RAD","fov","newFov","RAD2DEG","atan","maxFov","minFov","newDistance","setFov","operation","_this$camera4","setCenter","_animationId","cancelAnimationFrame","_timeStart","activateGizmos","rayDir","_startCursorPosition","copy","enableGrid","enableRotate","unprojectOnTbSurface","enableAnimations","_timePrev","_timeCurrent","_angleCurrent","_anglePrev","_cursorPosPrev","_cursorPosCurr","_wCurr","_wPrev","setY","getCursorNDC","_currentCursorPosition","opState","_this$camera5","restart","_state","pan","distance","angle","angleTo","amount","max","rotate","calculateRotationAxis","calculateAngularSpeed","screenNotches","_fovState","_v3_2","_gizmoMatrixState","direction","clone","sub","normalize","_m4_1","makeTranslation","deltaTime","w","abs","self","requestAnimationFrame","t","rotationAxis","onRotationAnim","min","wMax","hitP","unprojectOnObj","onFocusAnim","focus","_this$camera6","_startFingerRotation","getAngle","_currentFingerRotation","getWorldDirection","_rotationAxis","rotationPoint","_this$unprojectOnTbPl3","zRotate","_startFingerDistance","_currentFingerDistance","_this$camera7","_this$camera8","_this$unprojectOnTbPl4","_this$unprojectOnTbPl5","nFingers","setMouseAction","key","operationInput","mouseInput","keyInput","state","includes","action","p1","p2","atan2","PI","p0","t0","t1","s","sqrt","vec1","vec2","_rotationMatrix","extractRotation","_quat","setFromRotationMatrix","crossVectors","factor","halfFovV","halfFovH","aspect","top","right","point","focusPoint","_translationMatrix","gizmoStateTemp","premultiply","decompose","cameraStateTemp","_this$camera9","_this$camera10","color","multiplier","divisions","maxLength","tick","width","left","height","bottom","_gridPosition","rotateX","document","console","error","style","touchAction","onContextMenu","onPointerDown","onPointerCancel","onWheel","_this$domElement","_this$domElement2","_this$domElement3","_this$domElement4","_this$scene","onWindowResize","remove","isActive","material","setValues","opacity","cursorX","cursorY","canvas","canvasRect","getBoundingClientRect","_v2_1","setX","_this$camera11","lookAt","target","updateMatrix","_fov0","_cameraMatrixState0","matrix","_cameraProjectionState","projectionMatrix","_zoom0","_zoomState","_initialNear","near","_nearPos0","_nearPos","_initialFar","far","_farPos0","_farPos","_up0","up","_upState","updateProjectionMatrix","makeGizmos","tbCenter","curveMaterialX","fog","transparent","curveMaterialY","curveMaterialZ","gizmoX","gizmoY","gizmoZ","rotation","_gizmoMatrixState0","identity","setPosition","_scaleMatrix","makeScale","clear","time","cameraMatrix","gizmoMatrix","animTime","focusAnimationTime","easeOutCubic","w0","dampingFactor","adjust","distanceFactor","set","setTransformationMatrices","axis","makeRotationAxis","multiply","_this$camera12","JSON","stringify","arcballState","cameraFar","cameraNear","cameraUp","cameraZoom","cameraFov","navigator","clipboard","writeText","readText","then","resolved","value","setStateFromJSON","scaleGizmos","sizeInverse","maxZoom","minZoom","_m4_2","pos","_this$camera13","applyAxisAngle","cursor","raycaster","setFromCamera","intersect","intersectObjects","object","uuid","face","getCursorPosition","x2","y2","r2","setZ","applyMatrix4","projectionMatrixInverse","cameraGizmoDistance","radius2","h","l","m","q","a","b","c","delta","rayLength","initialDistance","newState","updateMatrices","updateMatrixState","EPS","equals","_currentTarget","newZoom","oldRadius","json","parse","fromArray","elements","gizmoTmp","adjustNearFar","Infinity","setCamera","devicePixelRatio","initializeMouseActions","connect","transformation","cameraDistance","bb","setFromObject","sphere","getBoundingSphere","adjustedNearPosition","radius","center","regularNearPosition","minNearPos","adjustedFarPosition","regularFarPosition","minFarPos","update","setGizmosVisible","visible"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Matrix4, EventDispatcher, EllipseCurve, BufferGeometry, MathUtils, Vector3, GridHelper, LineBasicMaterial, Line, Raycaster, Vector2, Quaternion, Group, Box3, Sphere } from 'three';\n\n//trackball state\nconst STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nconst INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n}; //cursor center coordinates\n\nconst _center = {\n  x: 0,\n  y: 0\n}; //transformation matrices for gizmos and camera\n\nconst _transformation = {\n  camera: new Matrix4(),\n  gizmos: new Matrix4()\n}; //events\n\nconst _changeEvent = {\n  type: 'change'\n};\nconst _startEvent = {\n  type: 'start'\n};\nconst _endEvent = {\n  type: 'end'\n};\n/**\n *\n * @param {CamOrthographicCamera | PerspectiveCameraera} camera Virtual camera used in the scene\n * @param {HTMLElement=null} domElement Renderer's dom element\n * @param {Scene=null} scene The scene to be rendered\n */\n\nclass ArcballControls extends EventDispatcher {\n  constructor(_camera, _domElement = null, scene = null) {\n    super();\n\n    _defineProperty(this, \"camera\", void 0);\n\n    _defineProperty(this, \"domElement\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"mouseActions\", void 0);\n\n    _defineProperty(this, \"_mouseOp\", void 0);\n\n    _defineProperty(this, \"_v2_1\", void 0);\n\n    _defineProperty(this, \"_v3_1\", void 0);\n\n    _defineProperty(this, \"_v3_2\", void 0);\n\n    _defineProperty(this, \"_m4_1\", void 0);\n\n    _defineProperty(this, \"_m4_2\", void 0);\n\n    _defineProperty(this, \"_quat\", void 0);\n\n    _defineProperty(this, \"_translationMatrix\", void 0);\n\n    _defineProperty(this, \"_rotationMatrix\", void 0);\n\n    _defineProperty(this, \"_scaleMatrix\", void 0);\n\n    _defineProperty(this, \"_rotationAxis\", void 0);\n\n    _defineProperty(this, \"_cameraMatrixState\", void 0);\n\n    _defineProperty(this, \"_cameraProjectionState\", void 0);\n\n    _defineProperty(this, \"_fovState\", void 0);\n\n    _defineProperty(this, \"_upState\", void 0);\n\n    _defineProperty(this, \"_zoomState\", void 0);\n\n    _defineProperty(this, \"_nearPos\", void 0);\n\n    _defineProperty(this, \"_farPos\", void 0);\n\n    _defineProperty(this, \"_gizmoMatrixState\", void 0);\n\n    _defineProperty(this, \"_up0\", void 0);\n\n    _defineProperty(this, \"_zoom0\", void 0);\n\n    _defineProperty(this, \"_fov0\", void 0);\n\n    _defineProperty(this, \"_initialNear\", void 0);\n\n    _defineProperty(this, \"_nearPos0\", void 0);\n\n    _defineProperty(this, \"_initialFar\", void 0);\n\n    _defineProperty(this, \"_farPos0\", void 0);\n\n    _defineProperty(this, \"_cameraMatrixState0\", void 0);\n\n    _defineProperty(this, \"_gizmoMatrixState0\", void 0);\n\n    _defineProperty(this, \"_button\", void 0);\n\n    _defineProperty(this, \"_touchStart\", void 0);\n\n    _defineProperty(this, \"_touchCurrent\", void 0);\n\n    _defineProperty(this, \"_input\", void 0);\n\n    _defineProperty(this, \"_switchSensibility\", void 0);\n\n    _defineProperty(this, \"_startFingerDistance\", void 0);\n\n    _defineProperty(this, \"_currentFingerDistance\", void 0);\n\n    _defineProperty(this, \"_startFingerRotation\", void 0);\n\n    _defineProperty(this, \"_currentFingerRotation\", void 0);\n\n    _defineProperty(this, \"_devPxRatio\", void 0);\n\n    _defineProperty(this, \"_downValid\", void 0);\n\n    _defineProperty(this, \"_nclicks\", void 0);\n\n    _defineProperty(this, \"_downEvents\", void 0);\n\n    _defineProperty(this, \"_clickStart\", void 0);\n\n    _defineProperty(this, \"_maxDownTime\", void 0);\n\n    _defineProperty(this, \"_maxInterval\", void 0);\n\n    _defineProperty(this, \"_posThreshold\", void 0);\n\n    _defineProperty(this, \"_movementThreshold\", void 0);\n\n    _defineProperty(this, \"_currentCursorPosition\", void 0);\n\n    _defineProperty(this, \"_startCursorPosition\", void 0);\n\n    _defineProperty(this, \"_grid\", void 0);\n\n    _defineProperty(this, \"_gridPosition\", void 0);\n\n    _defineProperty(this, \"_gizmos\", void 0);\n\n    _defineProperty(this, \"_curvePts\", void 0);\n\n    _defineProperty(this, \"_timeStart\", void 0);\n\n    _defineProperty(this, \"_animationId\", void 0);\n\n    _defineProperty(this, \"focusAnimationTime\", void 0);\n\n    _defineProperty(this, \"_timePrev\", void 0);\n\n    _defineProperty(this, \"_timeCurrent\", void 0);\n\n    _defineProperty(this, \"_anglePrev\", void 0);\n\n    _defineProperty(this, \"_angleCurrent\", void 0);\n\n    _defineProperty(this, \"_cursorPosPrev\", void 0);\n\n    _defineProperty(this, \"_cursorPosCurr\", void 0);\n\n    _defineProperty(this, \"_wPrev\", void 0);\n\n    _defineProperty(this, \"_wCurr\", void 0);\n\n    _defineProperty(this, \"adjustNearFar\", void 0);\n\n    _defineProperty(this, \"scaleFactor\", void 0);\n\n    _defineProperty(this, \"dampingFactor\", void 0);\n\n    _defineProperty(this, \"wMax\", void 0);\n\n    _defineProperty(this, \"enableAnimations\", void 0);\n\n    _defineProperty(this, \"enableGrid\", void 0);\n\n    _defineProperty(this, \"cursorZoom\", void 0);\n\n    _defineProperty(this, \"minFov\", void 0);\n\n    _defineProperty(this, \"maxFov\", void 0);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"enablePan\", void 0);\n\n    _defineProperty(this, \"enableRotate\", void 0);\n\n    _defineProperty(this, \"enableZoom\", void 0);\n\n    _defineProperty(this, \"minDistance\", void 0);\n\n    _defineProperty(this, \"maxDistance\", void 0);\n\n    _defineProperty(this, \"minZoom\", void 0);\n\n    _defineProperty(this, \"maxZoom\", void 0);\n\n    _defineProperty(this, \"target\", void 0);\n\n    _defineProperty(this, \"_currentTarget\", void 0);\n\n    _defineProperty(this, \"_tbRadius\", void 0);\n\n    _defineProperty(this, \"_state\", void 0);\n\n    _defineProperty(this, \"onWindowResize\", () => {\n      const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n\n      if (this.camera) {\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n      }\n\n      const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n      const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      const points = curve.getPoints(this._curvePts);\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n      for (const gizmo in this._gizmos.children) {\n        const child = this._gizmos.children[gizmo];\n        child.geometry = curveGeometry;\n      }\n\n      this.dispatchEvent(_changeEvent);\n    });\n\n    _defineProperty(this, \"onContextMenu\", event => {\n      if (!this.enabled) {\n        return;\n      }\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == 2) {\n          //prevent only if button 2 is actually used\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerCancel\", () => {\n      this._touchStart.splice(0, this._touchStart.length);\n\n      this._touchCurrent.splice(0, this._touchCurrent.length);\n\n      this._input = INPUT.NONE;\n    });\n\n    _defineProperty(this, \"onPointerDown\", event => {\n      if (event.button == 0 && event.isPrimary) {\n        this._downValid = true;\n\n        this._downEvents.push(event);\n      } else {\n        this._downValid = false;\n      }\n\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        this._touchStart.push(event);\n\n        this._touchCurrent.push(event);\n\n        switch (this._input) {\n          case INPUT.NONE:\n            //singleStart\n            this._input = INPUT.ONE_FINGER;\n            this.onSinglePanStart(event, 'ROTATE');\n            window.addEventListener('pointermove', this.onPointerMove);\n            window.addEventListener('pointerup', this.onPointerUp);\n            break;\n\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //doubleStart\n            this._input = INPUT.TWO_FINGER;\n            this.onRotateStart();\n            this.onPinchStart();\n            this.onDoublePanStart();\n            break;\n\n          case INPUT.TWO_FINGER:\n            //multipleStart\n            this._input = INPUT.MULT_FINGER;\n            this.onTriplePanStart();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.NONE) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        this._mouseOp = this.getOpFromAction(event.button, modifier);\n\n        if (this._mouseOp) {\n          window.addEventListener('pointermove', this.onPointerMove);\n          window.addEventListener('pointerup', this.onPointerUp); //singleStart\n\n          this._input = INPUT.CURSOR;\n          this._button = event.button;\n          this.onSinglePanStart(event, this._mouseOp);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerMove\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n            //singleMove\n            this.updateTouchEvent(event);\n            this.onSinglePanMove(event, STATE.ROTATE);\n            break;\n\n          case INPUT.ONE_FINGER_SWITCHED:\n            const movement = this.calculatePointersDistance(this._touchCurrent[0], event) * this._devPxRatio;\n\n            if (movement >= this._switchSensibility) {\n              //singleMove\n              this._input = INPUT.ONE_FINGER;\n              this.updateTouchEvent(event);\n              this.onSinglePanStart(event, 'ROTATE');\n              break;\n            }\n\n            break;\n\n          case INPUT.TWO_FINGER:\n            //rotate/pan/pinchMove\n            this.updateTouchEvent(event);\n            this.onRotateMove();\n            this.onPinchMove();\n            this.onDoublePanMove();\n            break;\n\n          case INPUT.MULT_FINGER:\n            //multMove\n            this.updateTouchEvent(event);\n            this.onTriplePanMove();\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        const mouseOpState = this.getOpStateFromAction(this._button, modifier);\n\n        if (mouseOpState) {\n          this.onSinglePanMove(event, mouseOpState);\n        }\n      } //checkDistance\n\n\n      if (this._downValid) {\n        const movement = this.calculatePointersDistance(this._downEvents[this._downEvents.length - 1], event) * this._devPxRatio;\n\n        if (movement > this._movementThreshold) {\n          this._downValid = false;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onPointerUp\", event => {\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\n        const nTouch = this._touchCurrent.length;\n\n        for (let i = 0; i < nTouch; i++) {\n          if (this._touchCurrent[i].pointerId == event.pointerId) {\n            this._touchCurrent.splice(i, 1);\n\n            this._touchStart.splice(i, 1);\n\n            break;\n          }\n        }\n\n        switch (this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //singleEnd\n            window.removeEventListener('pointermove', this.onPointerMove);\n            window.removeEventListener('pointerup', this.onPointerUp);\n            this._input = INPUT.NONE;\n            this.onSinglePanEnd();\n            break;\n\n          case INPUT.TWO_FINGER:\n            //doubleEnd\n            this.onDoublePanEnd();\n            this.onPinchEnd();\n            this.onRotateEnd(); //switching to singleStart\n\n            this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n\n          case INPUT.MULT_FINGER:\n            if (this._touchCurrent.length == 0) {\n              window.removeEventListener('pointermove', this.onPointerMove);\n              window.removeEventListener('pointerup', this.onPointerUp); //multCancel\n\n              this._input = INPUT.NONE;\n              this.onTriplePanEnd();\n            }\n\n            break;\n        }\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\n        window.removeEventListener('pointermove', this.onPointerMove);\n        window.removeEventListener('pointerup', this.onPointerUp);\n        this._input = INPUT.NONE;\n        this.onSinglePanEnd();\n        this._button = -1;\n      }\n\n      if (event.isPrimary) {\n        if (this._downValid) {\n          const downTime = event.timeStamp - this._downEvents[this._downEvents.length - 1].timeStamp;\n\n          if (downTime <= this._maxDownTime) {\n            if (this._nclicks == 0) {\n              //first valid click detected\n              this._nclicks = 1;\n              this._clickStart = performance.now();\n            } else {\n              const clickInterval = event.timeStamp - this._clickStart;\n\n              const movement = this.calculatePointersDistance(this._downEvents[1], this._downEvents[0]) * this._devPxRatio;\n\n              if (clickInterval <= this._maxInterval && movement <= this._posThreshold) {\n                //second valid click detected\n                //fire double tap and reset values\n                this._nclicks = 0;\n\n                this._downEvents.splice(0, this._downEvents.length);\n\n                this.onDoubleTap(event);\n              } else {\n                //new 'first click'\n                this._nclicks = 1;\n\n                this._downEvents.shift();\n\n                this._clickStart = performance.now();\n              }\n            }\n          } else {\n            this._downValid = false;\n            this._nclicks = 0;\n\n            this._downEvents.splice(0, this._downEvents.length);\n          }\n        } else {\n          this._nclicks = 0;\n\n          this._downEvents.splice(0, this._downEvents.length);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onWheel\", event => {\n      var _this$camera3;\n\n      if (this.enabled && this.enableZoom && this.domElement) {\n        let modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        const mouseOp = this.getOpFromAction('WHEEL', modifier);\n\n        if (mouseOp) {\n          event.preventDefault();\n          this.dispatchEvent(_startEvent);\n          const notchDeltaY = 125; //distance of one notch of mouse wheel\n\n          let sgn = event.deltaY / notchDeltaY;\n          let size = 1;\n\n          if (sgn > 0) {\n            size = 1 / this.scaleFactor;\n          } else if (sgn < 0) {\n            size = this.scaleFactor;\n          }\n\n          switch (mouseOp) {\n            case 'ZOOM':\n              this.updateTbState(STATE.SCALE, true);\n\n              if (sgn > 0) {\n                size = 1 / Math.pow(this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(this.scaleFactor, -sgn);\n              }\n\n              if (this.cursorZoom && this.enablePan) {\n                var _this$camera, _this$camera2;\n\n                let scalePoint;\n\n                if (((_this$camera = this.camera) === null || _this$camera === void 0 ? void 0 : _this$camera.type) === 'OrthographicCamera') {\n                  var _this$unprojectOnTbPl;\n\n                  scalePoint = (_this$unprojectOnTbPl = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl === void 0 ? void 0 : _this$unprojectOnTbPl.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n                }\n\n                if (((_this$camera2 = this.camera) === null || _this$camera2 === void 0 ? void 0 : _this$camera2.type) === 'PerspectiveCamera') {\n                  var _this$unprojectOnTbPl2;\n\n                  scalePoint = (_this$unprojectOnTbPl2 = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl2 === void 0 ? void 0 : _this$unprojectOnTbPl2.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n                }\n\n                if (scalePoint !== undefined) this.applyTransformMatrix(this.applyScale(size, scalePoint));\n              } else {\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n\n            case 'FOV':\n              if (((_this$camera3 = this.camera) === null || _this$camera3 === void 0 ? void 0 : _this$camera3.type) === 'PerspectiveCamera') {\n                this.updateTbState(STATE.FOV, true); //Vertigo effect\n                //\t  fov / 2\n                //\t\t|\\\n                //\t\t| \\\n                //\t\t|  \\\n                //\tx\t|\t\\\n                //\t\t| \t \\\n                //\t\t| \t  \\\n                //\t\t| _ _ _\\\n                //\t\t\ty\n                //check for iOs shift shortcut\n\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(this.scaleFactor, -sgn);\n                  }\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this.camera.fov * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                if (newFov > this.maxFov) {\n                  newFov = this.maxFov;\n                } else if (newFov < this.minFov) {\n                  newFov = this.minFov;\n                }\n\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position, false));\n              }\n\n              if (this._grid) {\n                this.disposeGrid();\n                this.drawGrid();\n              }\n\n              this.updateTbState(STATE.IDLE, false);\n              this.dispatchEvent(_changeEvent);\n              this.dispatchEvent(_endEvent);\n              break;\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanStart\", (event, operation) => {\n      var _this$camera4;\n\n      if (this.enabled && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (operation) {\n          case 'PAN':\n            if (!this.enablePan) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            if (this.camera) {\n              this.updateTbState(STATE.PAN, true);\n              const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              if (this.enableGrid) {\n                this.drawGrid();\n                this.dispatchEvent(_changeEvent);\n              }\n            }\n\n            break;\n\n          case 'ROTATE':\n            if (!this.enableRotate) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n            }\n\n            if (this.camera) {\n              this.updateTbState(STATE.ROTATE, true);\n              const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n              if (rayDir !== undefined) {\n                this._startCursorPosition.copy(rayDir);\n              }\n\n              this.activateGizmos(true);\n\n              if (this.enableAnimations) {\n                this._timePrev = this._timeCurrent = performance.now();\n                this._angleCurrent = this._anglePrev = 0;\n\n                this._cursorPosPrev.copy(this._startCursorPosition);\n\n                this._cursorPosCurr.copy(this._cursorPosPrev);\n\n                this._wCurr = 0;\n                this._wPrev = this._wCurr;\n              }\n            }\n\n            this.dispatchEvent(_changeEvent);\n            break;\n\n          case 'FOV':\n            if (!this.enableZoom) return;\n\n            if (((_this$camera4 = this.camera) === null || _this$camera4 === void 0 ? void 0 : _this$camera4.type) === 'PerspectiveCamera') {\n              if (this._animationId != -1) {\n                cancelAnimationFrame(this._animationId);\n                this._animationId = -1;\n                this._timeStart = -1;\n                this.activateGizmos(false);\n                this.dispatchEvent(_changeEvent);\n              }\n\n              this.updateTbState(STATE.FOV, true);\n\n              this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n              this._currentCursorPosition.copy(this._startCursorPosition);\n            }\n\n            break;\n\n          case 'ZOOM':\n            if (!this.enableZoom) return;\n\n            if (this._animationId != -1) {\n              cancelAnimationFrame(this._animationId);\n              this._animationId = -1;\n              this._timeStart = -1;\n              this.activateGizmos(false);\n              this.dispatchEvent(_changeEvent);\n            }\n\n            this.updateTbState(STATE.SCALE, true);\n\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n            this._currentCursorPosition.copy(this._startCursorPosition);\n\n            break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanMove\", (event, opState) => {\n      var _this$camera5;\n\n      if (this.enabled && this.domElement) {\n        const restart = opState != this._state;\n        this.setCenter(event.clientX, event.clientY);\n\n        switch (opState) {\n          case STATE.PAN:\n            if (this.enablePan && this.camera) {\n              if (restart) {\n                //switch to pan operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.drawGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with pan operation\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\n\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition));\n              }\n            }\n\n            break;\n\n          case STATE.ROTATE:\n            if (this.enableRotate && this.camera) {\n              if (restart) {\n                //switch to rotate operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== undefined) {\n                  this._startCursorPosition.copy(rayDir);\n                }\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(true);\n              } else {\n                //continue with rotate operation\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\n\n                if (rayDir !== undefined) {\n                  this._currentCursorPosition.copy(rayDir);\n                }\n\n                const distance = this._startCursorPosition.distanceTo(this._currentCursorPosition);\n\n                const angle = this._startCursorPosition.angleTo(this._currentCursorPosition);\n\n                const amount = Math.max(distance / this._tbRadius, angle); //effective rotation angle\n\n                this.applyTransformMatrix(this.rotate(this.calculateRotationAxis(this._startCursorPosition, this._currentCursorPosition), amount));\n\n                if (this.enableAnimations) {\n                  this._timePrev = this._timeCurrent;\n                  this._timeCurrent = performance.now();\n                  this._anglePrev = this._angleCurrent;\n                  this._angleCurrent = amount;\n\n                  this._cursorPosPrev.copy(this._cursorPosCurr);\n\n                  this._cursorPosCurr.copy(this._currentCursorPosition);\n\n                  this._wPrev = this._wCurr;\n                  this._wCurr = this.calculateAngularSpeed(this._anglePrev, this._angleCurrent, this._timePrev, this._timeCurrent);\n                }\n              }\n            }\n\n            break;\n\n          case STATE.SCALE:\n            if (this.enableZoom) {\n              if (restart) {\n                //switch to zoom operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with zoom operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n              }\n            }\n\n            break;\n\n          case STATE.FOV:\n            if (this.enableZoom && ((_this$camera5 = this.camera) === null || _this$camera5 === void 0 ? void 0 : _this$camera5.type) === 'PerspectiveCamera') {\n              if (restart) {\n                //switch to fov operation\n                this.dispatchEvent(_endEvent);\n                this.dispatchEvent(_startEvent);\n                this.updateTbState(opState, true);\n\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                this._currentCursorPosition.copy(this._startCursorPosition);\n\n                if (this.enableGrid) {\n                  this.disposeGrid();\n                }\n\n                this.activateGizmos(false);\n              } else {\n                //continue with fov operation\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n                let size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\n                }\n\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n                const x = this._v3_1.distanceTo(this._gizmos.position);\n\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n                const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n\n                this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n                this.setFov(newFov);\n                this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n                const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n                this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n\n            break;\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onSinglePanEnd\", () => {\n      if (this._state == STATE.ROTATE) {\n        if (!this.enableRotate) {\n          return;\n        }\n\n        if (this.enableAnimations) {\n          //perform rotation animation\n          const deltaTime = performance.now() - this._timeCurrent;\n\n          if (deltaTime < 120) {\n            const w = Math.abs((this._wPrev + this._wCurr) / 2);\n            const self = this;\n            this._animationId = window.requestAnimationFrame(function (t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              const rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            //cursor has been standing still for over 120 ms since last movement\n            this.updateTbState(STATE.IDLE, false);\n            this.activateGizmos(false);\n            this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else if (this._state == STATE.PAN || this._state == STATE.IDLE) {\n        this.updateTbState(STATE.IDLE, false);\n\n        if (this.enableGrid) {\n          this.disposeGrid();\n        }\n\n        this.activateGizmos(false);\n        this.dispatchEvent(_changeEvent);\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onDoubleTap\", event => {\n      if (this.enabled && this.enablePan && this.scene && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.setCenter(event.clientX, event.clientY);\n        const hitP = this.unprojectOnObj(this.getCursorNDC(_center.x, _center.y, this.domElement), this.camera);\n\n        if (hitP && this.enableAnimations) {\n          const self = this;\n\n          if (this._animationId != -1) {\n            window.cancelAnimationFrame(this._animationId);\n          }\n\n          this._timeStart = -1;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP && !this.enableAnimations) {\n          this.updateTbState(STATE.FOCUS, true);\n          this.focus(hitP, this.scaleFactor);\n          this.updateTbState(STATE.IDLE, false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onDoublePanStart\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.PAN, true);\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n\n        if (rayDir !== undefined) {\n          this._startCursorPosition.copy(rayDir);\n        }\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n\n        this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(this, \"onDoublePanMove\", () => {\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n\n        if (this._state != STATE.PAN) {\n          this.updateTbState(STATE.PAN, true);\n\n          this._startCursorPosition.copy(this._currentCursorPosition);\n        }\n\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\n        if (rayDir !== undefined) this._currentCursorPosition.copy(rayDir);\n        this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition, true));\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onDoublePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onRotateStart\", () => {\n      if (this.enabled && this.enableRotate) {\n        var _this$camera6;\n\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.ZROTATE, true); //this._startFingerRotation = event.rotation;\n\n        this._startFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n        this._currentFingerRotation = this._startFingerRotation;\n        (_this$camera6 = this.camera) === null || _this$camera6 === void 0 ? void 0 : _this$camera6.getWorldDirection(this._rotationAxis); //rotation axis\n\n        if (!this.enablePan && !this.enableZoom) {\n          this.activateGizmos(true);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onRotateMove\", () => {\n      if (this.enabled && this.enableRotate && this.camera && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        let rotationPoint;\n\n        if (this._state != STATE.ZROTATE) {\n          this.updateTbState(STATE.ZROTATE, true);\n          this._startFingerRotation = this._currentFingerRotation;\n        } //this._currentFingerRotation = event.rotation;\n\n\n        this._currentFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\n\n        if (!this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(this._gizmoMatrixState);\n        } else if (this.camera) {\n          var _this$unprojectOnTbPl3;\n\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n          rotationPoint = (_this$unprojectOnTbPl3 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl3 === void 0 ? void 0 : _this$unprojectOnTbPl3.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._v3_2);\n        }\n\n        const amount = MathUtils.DEG2RAD * (this._startFingerRotation - this._currentFingerRotation);\n\n        if (rotationPoint !== undefined) {\n          this.applyTransformMatrix(this.zRotate(rotationPoint, amount));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onRotateEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.activateGizmos(false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onPinchStart\", () => {\n      if (this.enabled && this.enableZoom) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true);\n        this._startFingerDistance = this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]);\n        this._currentFingerDistance = this._startFingerDistance;\n        this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(this, \"onPinchMove\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\n        const minDistance = 12; //minimum distance between fingers (in css pixels)\n\n        if (this._state != STATE.SCALE) {\n          this._startFingerDistance = this._currentFingerDistance;\n          this.updateTbState(STATE.SCALE, true);\n        }\n\n        this._currentFingerDistance = Math.max(this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]), minDistance * this._devPxRatio);\n        const amount = this._currentFingerDistance / this._startFingerDistance;\n        let scalePoint;\n\n        if (!this.enablePan) {\n          scalePoint = this._gizmos.position;\n        } else {\n          var _this$camera7, _this$camera8;\n\n          if (((_this$camera7 = this.camera) === null || _this$camera7 === void 0 ? void 0 : _this$camera7.type) === 'OrthographicCamera') {\n            var _this$unprojectOnTbPl4;\n\n            scalePoint = (_this$unprojectOnTbPl4 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl4 === void 0 ? void 0 : _this$unprojectOnTbPl4.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\n          } else if (((_this$camera8 = this.camera) === null || _this$camera8 === void 0 ? void 0 : _this$camera8.type) === 'PerspectiveCamera') {\n            var _this$unprojectOnTbPl5;\n\n            scalePoint = (_this$unprojectOnTbPl5 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl5 === void 0 ? void 0 : _this$unprojectOnTbPl5.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\n          }\n        }\n\n        if (scalePoint !== undefined) {\n          this.applyTransformMatrix(this.applyScale(amount, scalePoint));\n        }\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onPinchEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(this, \"onTriplePanStart\", () => {\n      if (this.enabled && this.enableZoom && this.domElement) {\n        this.dispatchEvent(_startEvent);\n        this.updateTbState(STATE.SCALE, true); //const center = event.center;\n\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n\n        this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        this._currentCursorPosition.copy(this._startCursorPosition);\n      }\n    });\n\n    _defineProperty(this, \"onTriplePanMove\", () => {\n      if (this.enabled && this.enableZoom && this.camera && this.domElement) {\n        //\t  fov / 2\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\tx\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t\t| _ _ _\\\n        //\t\t\ty\n        //const center = event.center;\n        let clientX = 0;\n        let clientY = 0;\n        const nFingers = this._touchCurrent.length;\n\n        for (let i = 0; i < nFingers; i++) {\n          clientX += this._touchCurrent[i].clientX;\n          clientY += this._touchCurrent[i].clientY;\n        }\n\n        this.setCenter(clientX / nFingers, clientY / nFingers);\n        const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n        this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\n\n        const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\n        let size = 1;\n\n        if (movement < 0) {\n          size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(this.scaleFactor, movement * screenNotches);\n        }\n\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        const x = this._v3_1.distanceTo(this._gizmos.position);\n\n        let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n        //check min and max distance\n\n        xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\n        const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\n\n        let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n        newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\n        const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\n\n        this.setFov(newFov);\n        this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\n\n        const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"onTriplePanEnd\", () => {\n      this.updateTbState(STATE.IDLE, false);\n      this.dispatchEvent(_endEvent); //this.dispatchEvent( _changeEvent );\n    });\n\n    _defineProperty(this, \"setCenter\", (clientX, clientY) => {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n\n    _defineProperty(this, \"initializeMouseActions\", () => {\n      this.setMouseAction('PAN', 0, 'CTRL');\n      this.setMouseAction('PAN', 2);\n      this.setMouseAction('ROTATE', 0);\n      this.setMouseAction('ZOOM', 'WHEEL');\n      this.setMouseAction('ZOOM', 1);\n      this.setMouseAction('FOV', 'WHEEL', 'SHIFT');\n      this.setMouseAction('FOV', 1, 'SHIFT');\n    });\n\n    _defineProperty(this, \"setMouseAction\", (operation, mouse, key = null) => {\n      const operationInput = ['PAN', 'ROTATE', 'ZOOM', 'FOV'];\n      const mouseInput = [0, 1, 2, 'WHEEL'];\n      const keyInput = ['CTRL', 'SHIFT', null];\n      let state;\n\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        //invalid parameters\n        return false;\n      }\n\n      if (mouse == 'WHEEL') {\n        if (operation != 'ZOOM' && operation != 'FOV') {\n          //cannot associate 2D operation to 1D input\n          return false;\n        }\n      }\n\n      switch (operation) {\n        case 'PAN':\n          state = STATE.PAN;\n          break;\n\n        case 'ROTATE':\n          state = STATE.ROTATE;\n          break;\n\n        case 'ZOOM':\n          state = STATE.SCALE;\n          break;\n\n        case 'FOV':\n          state = STATE.FOV;\n          break;\n      }\n\n      const action = {\n        operation: operation,\n        mouse: mouse,\n        key: key,\n        state: state\n      };\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        if (this.mouseActions[i].mouse == action.mouse && this.mouseActions[i].key == action.key) {\n          this.mouseActions.splice(i, 1, action);\n          return true;\n        }\n      }\n\n      this.mouseActions.push(action);\n      return true;\n    });\n\n    _defineProperty(this, \"getOpFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getOpStateFromAction\", (mouse, key) => {\n      let action;\n\n      for (let i = 0; i < this.mouseActions.length; i++) {\n        action = this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n\n      if (key) {\n        for (let i = 0; i < this.mouseActions.length; i++) {\n          action = this.mouseActions[i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"getAngle\", (p1, p2) => {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n\n    _defineProperty(this, \"updateTouchEvent\", event => {\n      for (let i = 0; i < this._touchCurrent.length; i++) {\n        if (this._touchCurrent[i].pointerId == event.pointerId) {\n          this._touchCurrent.splice(i, 1, event);\n\n          break;\n        }\n      }\n    });\n\n    _defineProperty(this, \"calculateAngularSpeed\", (p0, p1, t0, t1) => {\n      const s = p1 - p0;\n      const t = (t1 - t0) / 1000;\n\n      if (t == 0) {\n        return 0;\n      }\n\n      return s / t;\n    });\n\n    _defineProperty(this, \"calculatePointersDistance\", (p0, p1) => {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n\n    _defineProperty(this, \"calculateRotationAxis\", (vec1, vec2) => {\n      this._rotationMatrix.extractRotation(this._cameraMatrixState);\n\n      this._quat.setFromRotationMatrix(this._rotationMatrix);\n\n      this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(this._quat);\n\n      return this._rotationAxis.normalize().clone();\n    });\n\n    _defineProperty(this, \"calculateTbRadius\", camera => {\n      const factor = 0.67;\n      const distance = camera.position.distanceTo(this._gizmos.position);\n\n      if (camera.type == 'PerspectiveCamera') {\n        const halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5; //vertical fov/2 in radians\n\n        const halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV)); //horizontal fov/2 in radians\n\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera.type == 'OrthographicCamera') {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n\n    _defineProperty(this, \"focus\", (point, size, amount = 1) => {\n      if (this.camera) {\n        const focusPoint = point.clone(); //move center of camera (along with gizmos) towards point of interest\n\n        focusPoint.sub(this._gizmos.position).multiplyScalar(amount);\n\n        this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n\n        const gizmoStateTemp = this._gizmoMatrixState.clone();\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        const cameraStateTemp = this._cameraMatrixState.clone();\n\n        this._cameraMatrixState.premultiply(this._translationMatrix);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale); //apply zoom\n\n\n        if (this.enableZoom) {\n          this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\n        }\n\n        this._gizmoMatrixState.copy(gizmoStateTemp);\n\n        this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n\n    _defineProperty(this, \"drawGrid\", () => {\n      if (this.scene) {\n        var _this$camera9, _this$camera10;\n\n        const color = 0x888888;\n        const multiplier = 3;\n        let size, divisions, maxLength, tick;\n\n        if (((_this$camera9 = this.camera) === null || _this$camera9 === void 0 ? void 0 : _this$camera9.type) === 'OrthographicCamera') {\n          const width = this.camera.right - this.camera.left;\n          const height = this.camera.bottom - this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / this.camera.zoom * multiplier;\n          divisions = size / tick * this.camera.zoom;\n        } else if (((_this$camera10 = this.camera) === null || _this$camera10 === void 0 ? void 0 : _this$camera10.type) === 'PerspectiveCamera') {\n          const distance = this.camera.position.distanceTo(this._gizmos.position);\n          const halfFovV = MathUtils.DEG2RAD * this.camera.fov * 0.5;\n          const halfFovH = Math.atan(this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n\n        if (this._grid == null && this.camera) {\n          this._grid = new GridHelper(size, divisions, color, color);\n\n          this._grid.position.copy(this._gizmos.position);\n\n          this._gridPosition.copy(this._grid.position);\n\n          this._grid.quaternion.copy(this.camera.quaternion);\n\n          this._grid.rotateX(Math.PI * 0.5);\n\n          this.scene.add(this._grid);\n        }\n      }\n    });\n\n    _defineProperty(this, \"connect\", domElement => {\n      // https://github.com/mrdoob/three.js/issues/20575\n      if (domElement === document) {\n        console.error('THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n\n      this.domElement = domElement; // disables touch scroll\n      // touch-action needs to be defined for pointer events to work on mobile\n      // https://stackoverflow.com/a/48254578\n\n      this.domElement.style.touchAction = 'none';\n      this.domElement.addEventListener('contextmenu', this.onContextMenu);\n      this.domElement.addEventListener('pointerdown', this.onPointerDown);\n      this.domElement.addEventListener('pointercancel', this.onPointerCancel);\n      this.domElement.addEventListener('wheel', this.onWheel);\n    });\n\n    _defineProperty(this, \"dispose\", () => {\n      var _this$domElement, _this$domElement2, _this$domElement3, _this$domElement4, _this$scene;\n\n      if (this._animationId != -1) {\n        window.cancelAnimationFrame(this._animationId);\n      }\n\n      (_this$domElement = this.domElement) === null || _this$domElement === void 0 ? void 0 : _this$domElement.removeEventListener('pointerdown', this.onPointerDown);\n      (_this$domElement2 = this.domElement) === null || _this$domElement2 === void 0 ? void 0 : _this$domElement2.removeEventListener('pointercancel', this.onPointerCancel);\n      (_this$domElement3 = this.domElement) === null || _this$domElement3 === void 0 ? void 0 : _this$domElement3.removeEventListener('wheel', this.onWheel);\n      (_this$domElement4 = this.domElement) === null || _this$domElement4 === void 0 ? void 0 : _this$domElement4.removeEventListener('contextmenu', this.onContextMenu);\n      window.removeEventListener('pointermove', this.onPointerMove);\n      window.removeEventListener('pointerup', this.onPointerUp);\n      window.removeEventListener('resize', this.onWindowResize);\n      (_this$scene = this.scene) === null || _this$scene === void 0 ? void 0 : _this$scene.remove(this._gizmos);\n      this.disposeGrid();\n    });\n\n    _defineProperty(this, \"disposeGrid\", () => {\n      if (this._grid && this.scene) {\n        this.scene.remove(this._grid);\n        this._grid = null;\n      }\n    });\n\n    _defineProperty(this, \"easeOutCubic\", t => {\n      return 1 - Math.pow(1 - t, 3);\n    });\n\n    _defineProperty(this, \"activateGizmos\", isActive => {\n      for (const gizmo of this._gizmos.children) {\n        gizmo.material.setValues({\n          opacity: isActive ? 1 : 0.6\n        });\n      }\n    });\n\n    _defineProperty(this, \"getCursorNDC\", (cursorX, cursorY, canvas) => {\n      const canvasRect = canvas.getBoundingClientRect();\n\n      this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n\n      this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n\n      return this._v2_1.clone();\n    });\n\n    _defineProperty(this, \"getCursorPosition\", (cursorX, cursorY, canvas) => {\n      var _this$camera11;\n\n      this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n      if (((_this$camera11 = this.camera) === null || _this$camera11 === void 0 ? void 0 : _this$camera11.type) === 'OrthographicCamera') {\n        this._v2_1.x *= (this.camera.right - this.camera.left) * 0.5;\n        this._v2_1.y *= (this.camera.top - this.camera.bottom) * 0.5;\n      }\n\n      return this._v2_1.clone();\n    });\n\n    _defineProperty(this, \"setCamera\", camera => {\n      if (camera) {\n        camera.lookAt(this.target);\n        camera.updateMatrix(); //setting state\n\n        if ((camera === null || camera === void 0 ? void 0 : camera.type) == 'PerspectiveCamera') {\n          this._fov0 = camera.fov;\n          this._fovState = camera.fov;\n        }\n\n        this._cameraMatrixState0.copy(camera.matrix);\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraProjectionState.copy(camera.projectionMatrix);\n\n        this._zoom0 = camera.zoom;\n        this._zoomState = this._zoom0;\n        this._initialNear = camera.near;\n        this._nearPos0 = camera.position.distanceTo(this.target) - camera.near;\n        this._nearPos = this._initialNear;\n        this._initialFar = camera.far;\n        this._farPos0 = camera.position.distanceTo(this.target) - camera.far;\n        this._farPos = this._initialFar;\n\n        this._up0.copy(camera.up);\n\n        this._upState.copy(camera.up);\n\n        this.camera = camera;\n        this.camera.updateProjectionMatrix(); //making gizmos\n\n        const tbRadius = this.calculateTbRadius(camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n      }\n    });\n\n    _defineProperty(this, \"makeGizmos\", (tbCenter, tbRadius) => {\n      // @ts-expect-error\n      const curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      const points = curve.getPoints(this._curvePts); //geometry\n\n      const curveGeometry = new BufferGeometry().setFromPoints(points); //material\n\n      const curveMaterialX = new LineBasicMaterial({\n        color: 0xff8080,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialY = new LineBasicMaterial({\n        color: 0x80ff80,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      const curveMaterialZ = new LineBasicMaterial({\n        color: 0x8080ff,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      }); //line\n\n      const gizmoX = new Line(curveGeometry, curveMaterialX);\n      const gizmoY = new Line(curveGeometry, curveMaterialY);\n      const gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      const rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation; //setting state\n\n      this._gizmoMatrixState0.identity().setPosition(tbCenter);\n\n      this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n      if (this.camera && this.camera.zoom != 1) {\n        //adapt gizmos size to camera zoom\n        const size = 1 / this.camera.zoom;\n\n        this._scaleMatrix.makeScale(size, size, size);\n\n        this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix);\n\n        this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\n      }\n\n      this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.clear();\n\n      this._gizmos.add(gizmoX);\n\n      this._gizmos.add(gizmoY);\n\n      this._gizmos.add(gizmoZ);\n    });\n\n    _defineProperty(this, \"onFocusAnim\", (time, point, cameraMatrix, gizmoMatrix) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_FOCUS) {\n        const deltaTime = time - this._timeStart;\n        const animTime = deltaTime / this.focusAnimationTime;\n\n        this._gizmoMatrixState.copy(gizmoMatrix);\n\n        if (animTime >= 1) {\n          //animation end\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, this.scaleFactor);\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        } else {\n          const amount = this.easeOutCubic(animTime);\n          const size = 1 - amount + this.scaleFactor * amount;\n\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n          this.focus(point, size, amount);\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n      }\n    });\n\n    _defineProperty(this, \"onRotationAnim\", (time, rotationAxis, w0) => {\n      if (this._timeStart == -1) {\n        //animation start\n        this._anglePrev = 0;\n        this._angleCurrent = 0;\n        this._timeStart = time;\n      }\n\n      if (this._state == STATE.ANIMATION_ROTATE) {\n        //w = w0 + alpha * t\n        const deltaTime = (time - this._timeStart) / 1000;\n        const w = w0 + -this.dampingFactor * deltaTime;\n\n        if (w > 0) {\n          //tetha = 0.5 * alpha * t^2 + w0 * t + tetha0\n          this._angleCurrent = 0.5 * -this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n          this.applyTransformMatrix(this.rotate(rotationAxis, this._angleCurrent));\n          this.dispatchEvent(_changeEvent);\n          const self = this;\n          this._animationId = window.requestAnimationFrame(function (t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          this._animationId = -1;\n          this._timeStart = -1;\n          this.updateTbState(STATE.IDLE, false);\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        //interrupt animation\n        this._animationId = -1;\n        this._timeStart = -1;\n\n        if (this._state != STATE.ROTATE) {\n          this.activateGizmos(false);\n          this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n\n    _defineProperty(this, \"pan\", (p0, p1, adjust = false) => {\n      if (this.camera) {\n        const movement = p0.clone().sub(p1);\n\n        if (this.camera.type === 'OrthographicCamera') {\n          //adjust movement amount\n          movement.multiplyScalar(1 / this.camera.zoom);\n        }\n\n        if (this.camera.type === 'PerspectiveCamera' && adjust) {\n          //adjust movement amount\n          this._v3_1.setFromMatrixPosition(this._cameraMatrixState0); //camera's initial position\n\n\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0); //gizmo's initial position\n\n\n          const distanceFactor = this._v3_1.distanceTo(this._v3_2) / this.camera.position.distanceTo(this._gizmos.position);\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n\n        this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(this.camera.quaternion);\n\n        this._m4_1.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_1);\n      }\n\n      return _transformation;\n    });\n\n    _defineProperty(this, \"reset\", () => {\n      if (this.camera) {\n        this.camera.zoom = this._zoom0;\n\n        if (this.camera.type === 'PerspectiveCamera') {\n          this.camera.fov = this._fov0;\n        }\n\n        this.camera.near = this._nearPos;\n        this.camera.far = this._farPos;\n\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(this._up0);\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmoMatrixState.copy(this._gizmoMatrixState0);\n\n        this._gizmoMatrixState0.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(this, \"rotate\", (axis, angle) => {\n      const point = this._gizmos.position; //rotation center\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._rotationMatrix.makeRotationAxis(axis, -angle); //rotate camera\n\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this.setTransformationMatrices(this._m4_1);\n      return _transformation;\n    });\n\n    _defineProperty(this, \"copyState\", () => {\n      if (this.camera) {\n        var _this$camera12;\n\n        const state = JSON.stringify(((_this$camera12 = this.camera) === null || _this$camera12 === void 0 ? void 0 : _this$camera12.type) === 'OrthographicCamera' ? {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        } : {\n          arcballState: {\n            cameraFar: this.camera.far,\n            cameraFov: this.camera.fov,\n            cameraMatrix: this.camera.matrix,\n            cameraNear: this.camera.near,\n            cameraUp: this.camera.up,\n            cameraZoom: this.camera.zoom,\n            gizmoMatrix: this._gizmos.matrix\n          }\n        });\n        navigator.clipboard.writeText(state);\n      }\n    });\n\n    _defineProperty(this, \"pasteState\", () => {\n      const self = this;\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n\n    _defineProperty(this, \"saveState\", () => {\n      if (!this.camera) return;\n\n      this._cameraMatrixState0.copy(this.camera.matrix);\n\n      this._gizmoMatrixState0.copy(this._gizmos.matrix);\n\n      this._nearPos = this.camera.near;\n      this._farPos = this.camera.far;\n      this._zoom0 = this.camera.zoom;\n\n      this._up0.copy(this.camera.up);\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._fov0 = this.camera.fov;\n      }\n    });\n\n    _defineProperty(this, \"applyScale\", (size, point, scaleGizmos = true) => {\n      if (!this.camera) return;\n      const scalePoint = point.clone();\n      let sizeInverse = 1 / size;\n\n      if (this.camera.type === 'OrthographicCamera') {\n        //camera zoom\n        this.camera.zoom = this._zoomState;\n        this.camera.zoom *= size; //check min and max zoom\n\n        if (this.camera.zoom > this.maxZoom) {\n          this.camera.zoom = this.maxZoom;\n          sizeInverse = this._zoomState / this.maxZoom;\n        } else if (this.camera.zoom < this.minZoom) {\n          this.camera.zoom = this.minZoom;\n          sizeInverse = this._zoomState / this.minZoom;\n        }\n\n        this.camera.updateProjectionMatrix();\n\n        this._v3_1.setFromMatrixPosition(this._gizmoMatrixState); //gizmos position\n        //scale gizmos so they appear in the same spot having the same dimension\n\n\n        this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n        this._translationMatrix.makeTranslation(-this._v3_1.x, -this._v3_1.y, -this._v3_1.z);\n\n        this._m4_2.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z).multiply(this._scaleMatrix);\n\n        this._m4_2.multiply(this._translationMatrix); //move camera and gizmos to obtain pinch effect\n\n\n        scalePoint.sub(this._v3_1);\n        const amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n\n        this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n\n        this._m4_2.premultiply(this._m4_1);\n\n        this.setTransformationMatrices(this._m4_1, this._m4_2);\n        return _transformation;\n      }\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\n\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState); //move camera\n\n\n        let distance = this._v3_1.distanceTo(scalePoint);\n\n        let amount = distance - distance * sizeInverse; //check min and max distance\n\n        const newDistance = distance - amount;\n\n        if (newDistance < this.minDistance) {\n          sizeInverse = this.minDistance / distance;\n          amount = distance - distance * sizeInverse;\n        } else if (newDistance > this.maxDistance) {\n          sizeInverse = this.maxDistance / distance;\n          amount = distance - distance * sizeInverse;\n        }\n\n        let direction = scalePoint.clone().sub(this._v3_1).normalize().multiplyScalar(amount);\n\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        if (scaleGizmos) {\n          //scale gizmos so they appear in the same spot having the same dimension\n          const pos = this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(this._v3_2).normalize().multiplyScalar(amount);\n\n          this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n\n          this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n          this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(this._translationMatrix);\n\n          this._m4_2.multiply(this._scaleMatrix);\n\n          this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n\n          this._m4_2.multiply(this._translationMatrix);\n\n          this.setTransformationMatrices(this._m4_1, this._m4_2);\n        } else {\n          this.setTransformationMatrices(this._m4_1);\n        }\n\n        return _transformation;\n      }\n    });\n\n    _defineProperty(this, \"setFov\", value => {\n      var _this$camera13;\n\n      if (((_this$camera13 = this.camera) === null || _this$camera13 === void 0 ? void 0 : _this$camera13.type) === 'PerspectiveCamera') {\n        this.camera.fov = MathUtils.clamp(value, this.minFov, this.maxFov);\n        this.camera.updateProjectionMatrix();\n      }\n    });\n\n    _defineProperty(this, \"setTarget\", (x, y, z) => {\n      if (this.camera) {\n        this.target.set(x, y, z);\n\n        this._gizmos.position.set(x, y, z); //for correct radius calculation\n\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n        this.camera.lookAt(this.target);\n      }\n    });\n\n    _defineProperty(this, \"zRotate\", (point, angle) => {\n      this._rotationMatrix.makeRotationAxis(this._rotationAxis, angle);\n\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      this._m4_1.multiply(this._rotationMatrix);\n\n      this._m4_1.multiply(this._translationMatrix);\n\n      this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(point); //vector from rotation center to gizmos position\n\n\n      this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis, angle); //apply rotation\n\n\n      this._v3_2.sub(this._v3_1);\n\n      this._m4_2.makeTranslation(this._v3_2.x, this._v3_2.y, this._v3_2.z);\n\n      this.setTransformationMatrices(this._m4_1, this._m4_2);\n      return _transformation;\n    });\n\n    _defineProperty(this, \"unprojectOnObj\", (cursor, camera) => {\n      if (!this.scene) return null;\n      const raycaster = new Raycaster();\n      raycaster.near = camera.near;\n      raycaster.far = camera.far;\n      raycaster.setFromCamera(cursor, camera);\n      const intersect = raycaster.intersectObjects(this.scene.children, true);\n\n      for (let i = 0; i < intersect.length; i++) {\n        if (intersect[i].object.uuid != this._gizmos.uuid && intersect[i].face) {\n          return intersect[i].point.clone();\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"unprojectOnTbSurface\", (camera, cursorX, cursorY, canvas, tbRadius) => {\n      if (camera.type == 'OrthographicCamera') {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        const x2 = Math.pow(this._v2_1.x, 2);\n        const y2 = Math.pow(this._v2_1.y, 2);\n        const r2 = Math.pow(this._tbRadius, 2);\n\n        if (x2 + y2 <= r2 * 0.5) {\n          //intersection with sphere\n          this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          //intersection with hyperboloid\n          this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n\n        return this._v3_1;\n      }\n\n      if (camera.type == 'PerspectiveCamera') {\n        //unproject cursor on the near plane\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n\n\n        const cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        const radius2 = Math.pow(tbRadius, 2); //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(this._v3_1.x, this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        /*\n         * calculate intersection point between unprojected ray and trackball surface\n         *|y = m * x + q\n         *|x^2 + y^2 = r^2\n         *\n         * (m^2 + 1) * x^2 + (2 * m * q) * x + q^2 - r^2 = 0\n         */\n\n        let a = Math.pow(m, 2) + 1;\n        let b = 2 * m * q;\n        let c = Math.pow(q, 2) - radius2;\n        let delta = Math.pow(b, 2) - 4 * a * c;\n\n        if (delta >= 0) {\n          //intersection with sphere\n          this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n          this._v2_1.setY(m * this._v2_1.x + q);\n\n          const angle = MathUtils.RAD2DEG * this._v2_1.angle();\n\n          if (angle >= 45) {\n            //if angle between intersection point and X' axis is >= 45°, return that point\n            //otherwise, calculate intersection point with hyperboloid\n            const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n            rayDir.multiplyScalar(rayLength);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        } //intersection with hyperboloid\n\n        /*\n         *|y = m * x + q\n         *|y = (1 / x) * (r^2 / 2)\n         *\n         * m * x^2 + q * x - r^2 / 2 = 0\n         */\n\n\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n\n        this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n        this._v2_1.setY(m * this._v2_1.x + q);\n\n        const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(this, \"unprojectOnTbPlane\", (camera, cursorX, cursorY, canvas, initialDistance = false) => {\n      if (camera.type == 'OrthographicCamera') {\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\n\n        return this._v3_1.clone();\n      }\n\n      if (camera.type == 'PerspectiveCamera') {\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas)); //unproject cursor on the near plane\n\n\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\n\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\n        //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n\n        const h = this._v3_1.z;\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\n        let cameraGizmoDistance;\n\n        if (initialDistance) {\n          cameraGizmoDistance = this._v3_1.setFromMatrixPosition(this._cameraMatrixState0).distanceTo(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\n        }\n        /*\n         * calculate intersection point between unprojected ray and the plane\n         *|y = mx + q\n         *|y = 0\n         *\n         * x = -q/m\n         */\n\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n\n        const m = h / l;\n        const q = cameraGizmoDistance;\n        const x = -q / m;\n        const rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(this, \"updateMatrixState\", () => {\n      if (!this.camera) return; //update camera and gizmos state\n\n      this._cameraMatrixState.copy(this.camera.matrix);\n\n      this._gizmoMatrixState.copy(this._gizmos.matrix);\n\n      if (this.camera.type === 'OrthographicCamera') {\n        this._cameraProjectionState.copy(this.camera.projectionMatrix);\n\n        this.camera.updateProjectionMatrix();\n        this._zoomState = this.camera.zoom;\n      }\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        this._fovState = this.camera.fov;\n      }\n    });\n\n    _defineProperty(this, \"updateTbState\", (newState, updateMatrices) => {\n      this._state = newState;\n\n      if (updateMatrices) {\n        this.updateMatrixState();\n      }\n    });\n\n    _defineProperty(this, \"update\", () => {\n      const EPS = 0.000001; // Update target and gizmos state\n\n      if (!this.target.equals(this._currentTarget) && this.camera) {\n        this._gizmos.position.set(this.target.x, this.target.y, this.target.z); //for correct radius calculation\n\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        this.makeGizmos(this.target, this._tbRadius);\n\n        this._currentTarget.copy(this.target);\n      }\n\n      if (!this.camera) return; //check min/max parameters\n\n      if (this.camera.type === 'OrthographicCamera') {\n        //check zoom\n        if (this.camera.zoom > this.maxZoom || this.camera.zoom < this.minZoom) {\n          const newZoom = MathUtils.clamp(this.camera.zoom, this.minZoom, this.maxZoom);\n          this.applyTransformMatrix(this.applyScale(newZoom / this.camera.zoom, this._gizmos.position, true));\n        }\n      }\n\n      if (this.camera.type === 'PerspectiveCamera') {\n        //check distance\n        const distance = this.camera.position.distanceTo(this._gizmos.position);\n\n        if (distance > this.maxDistance + EPS || distance < this.minDistance - EPS) {\n          const newDistance = MathUtils.clamp(distance, this.minDistance, this.maxDistance);\n          this.applyTransformMatrix(this.applyScale(newDistance / distance, this._gizmos.position));\n          this.updateMatrixState();\n        } //check fov\n\n\n        if (this.camera.fov < this.minFov || this.camera.fov > this.maxFov) {\n          this.camera.fov = MathUtils.clamp(this.camera.fov, this.minFov, this.maxFov);\n          this.camera.updateProjectionMatrix();\n        }\n\n        const oldRadius = this._tbRadius;\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        if (oldRadius < this._tbRadius - EPS || oldRadius > this._tbRadius + EPS) {\n          const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\n          const newRadius = this._tbRadius / scale; // @ts-expect-error\n\n          const curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          const points = curve.getPoints(this._curvePts);\n          const curveGeometry = new BufferGeometry().setFromPoints(points);\n\n          for (const gizmo in this._gizmos.children) {\n            const child = this._gizmos.children[gizmo];\n            child.geometry = curveGeometry;\n          }\n        }\n      }\n\n      this.camera.lookAt(this._gizmos.position);\n    });\n\n    _defineProperty(this, \"setStateFromJSON\", json => {\n      const state = JSON.parse(json);\n\n      if (state.arcballState && this.camera) {\n        this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.up.copy(state.arcballState.cameraUp);\n        this.camera.near = state.arcballState.cameraNear;\n        this.camera.far = state.arcballState.cameraFar;\n        this.camera.zoom = state.arcballState.cameraZoom;\n\n        if (this.camera.type === 'PerspectiveCamera') {\n          this.camera.fov = state.arcballState.cameraFov;\n        }\n\n        this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this.camera.updateMatrix();\n        this.camera.updateProjectionMatrix();\n\n        this._gizmos.updateMatrix();\n\n        const tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        const gizmoTmp = new Matrix4().copy(this._gizmoMatrixState0);\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\n\n        this._gizmoMatrixState0.copy(gizmoTmp);\n\n        this.camera.lookAt(this._gizmos.position);\n        this.updateTbState(STATE.IDLE, false);\n        this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    this.camera = null;\n    this.domElement = _domElement;\n    this.scene = scene;\n    this.mouseActions = [];\n    this._mouseOp = null; //global vectors and matrices that are used in some operations to avoid creating new objects every time (e.g. every time cursor moves)\n\n    this._v2_1 = new Vector2();\n    this._v3_1 = new Vector3();\n    this._v3_2 = new Vector3();\n    this._m4_1 = new Matrix4();\n    this._m4_2 = new Matrix4();\n    this._quat = new Quaternion(); //transformation matrices\n\n    this._translationMatrix = new Matrix4(); //matrix for translation operation\n\n    this._rotationMatrix = new Matrix4(); //matrix for rotation operation\n\n    this._scaleMatrix = new Matrix4(); //matrix for scaling operation\n\n    this._rotationAxis = new Vector3(); //axis for rotate operation\n    //camera state\n\n    this._cameraMatrixState = new Matrix4();\n    this._cameraProjectionState = new Matrix4();\n    this._fovState = 1;\n    this._upState = new Vector3();\n    this._zoomState = 1;\n    this._nearPos = 0;\n    this._farPos = 0;\n    this._gizmoMatrixState = new Matrix4(); //initial values\n\n    this._up0 = new Vector3();\n    this._zoom0 = 1;\n    this._fov0 = 0;\n    this._initialNear = 0;\n    this._nearPos0 = 0;\n    this._initialFar = 0;\n    this._farPos0 = 0;\n    this._cameraMatrixState0 = new Matrix4();\n    this._gizmoMatrixState0 = new Matrix4(); //pointers array\n\n    this._button = -1;\n    this._touchStart = [];\n    this._touchCurrent = [];\n    this._input = INPUT.NONE; //two fingers touch interaction\n\n    this._switchSensibility = 32; //minimum movement to be performed to fire single pan start after the second finger has been released\n\n    this._startFingerDistance = 0; //distance between two fingers\n\n    this._currentFingerDistance = 0;\n    this._startFingerRotation = 0; //amount of rotation performed with two fingers\n\n    this._currentFingerRotation = 0; //double tap\n\n    this._devPxRatio = 0;\n    this._downValid = true;\n    this._nclicks = 0;\n    this._downEvents = [];\n    this._clickStart = 0; //first click time\n\n    this._maxDownTime = 250;\n    this._maxInterval = 300;\n    this._posThreshold = 24;\n    this._movementThreshold = 24; //cursor positions\n\n    this._currentCursorPosition = new Vector3();\n    this._startCursorPosition = new Vector3(); //grid\n\n    this._grid = null; //grid to be visualized during pan operation\n\n    this._gridPosition = new Vector3(); //gizmos\n\n    this._gizmos = new Group();\n    this._curvePts = 128; //animations\n\n    this._timeStart = -1; //initial time\n\n    this._animationId = -1; //focus animation\n\n    this.focusAnimationTime = 500; //duration of focus animation in ms\n    //rotate animation\n\n    this._timePrev = 0; //time at which previous rotate operation has been detected\n\n    this._timeCurrent = 0; //time at which current rotate operation has been detected\n\n    this._anglePrev = 0; //angle of previous rotation\n\n    this._angleCurrent = 0; //angle of current rotation\n\n    this._cursorPosPrev = new Vector3(); //cursor position when previous rotate operation has been detected\n\n    this._cursorPosCurr = new Vector3(); //cursor position when current rotate operation has been detected\n\n    this._wPrev = 0; //angular velocity of the previous rotate operation\n\n    this._wCurr = 0; //angular velocity of the current rotate operation\n    //parameters\n\n    this.adjustNearFar = false;\n    this.scaleFactor = 1.1; //zoom/distance multiplier\n\n    this.dampingFactor = 25;\n    this.wMax = 20; //maximum angular velocity allowed\n\n    this.enableAnimations = true; //if animations should be performed\n\n    this.enableGrid = false; //if grid should be showed during pan operation\n\n    this.cursorZoom = false; //if wheel zoom should be cursor centered\n\n    this.minFov = 5;\n    this.maxFov = 90;\n    this.enabled = true;\n    this.enablePan = true;\n    this.enableRotate = true;\n    this.enableZoom = true;\n    this.minDistance = 0;\n    this.maxDistance = Infinity;\n    this.minZoom = 0;\n    this.maxZoom = Infinity; //trackball parameters\n\n    this.target = new Vector3(0, 0, 0);\n    this._currentTarget = new Vector3(0, 0, 0);\n    this._tbRadius = 1; //FSA\n\n    this._state = STATE.IDLE;\n    this.setCamera(_camera);\n\n    if (this.scene) {\n      this.scene.add(this._gizmos);\n    }\n\n    this._devPxRatio = window.devicePixelRatio;\n    this.initializeMouseActions();\n    if (this.domElement) this.connect(this.domElement);\n    window.addEventListener('resize', this.onWindowResize);\n  } //listeners\n\n\n  /**\n   * Apply a transformation matrix, to the camera and gizmos\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\n   */\n  applyTransformMatrix(transformation) {\n    if (transformation !== null && transformation !== void 0 && transformation.camera && this.camera) {\n      this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n\n      this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n      this.camera.updateMatrix(); //update camera up vector\n\n      if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n        this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n      }\n    }\n\n    if (transformation !== null && transformation !== void 0 && transformation.gizmos) {\n      this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n\n      this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n      this._gizmos.updateMatrix();\n    }\n\n    if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\n      const tbRadius = this.calculateTbRadius(this.camera);\n\n      if (tbRadius !== undefined) {\n        this._tbRadius = tbRadius;\n      }\n\n      if (this.adjustNearFar) {\n        const cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n        const bb = new Box3();\n        bb.setFromObject(this._gizmos);\n        const sphere = new Sphere();\n        bb.getBoundingSphere(sphere);\n        const adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n        const regularNearPosition = cameraDistance - this._initialNear;\n        const minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n        this.camera.near = cameraDistance - minNearPos;\n        const adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n        const regularFarPosition = cameraDistance - this._initialFar;\n        const minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n        this.camera.far = cameraDistance - minFarPos;\n        this.camera.updateProjectionMatrix();\n      } else {\n        let update = false;\n\n        if (this.camera.near != this._initialNear) {\n          this.camera.near = this._initialNear;\n          update = true;\n        }\n\n        if (this.camera.far != this._initialFar) {\n          this.camera.far = this._initialFar;\n          update = true;\n        }\n\n        if (update) {\n          this.camera.updateProjectionMatrix();\n        }\n      }\n    }\n  }\n  /**\n   * Calculate the angular speed\n   * @param {Number} p0 Position at t0\n   * @param {Number} p1 Position at t1\n   * @param {Number} t0 Initial time in milliseconds\n   * @param {Number} t1 Ending time in milliseconds\n   */\n\n\n  /**\n   * Set gizmos visibility\n   * @param {Boolean} value Value of gizmos visibility\n   */\n  setGizmosVisible(value) {\n    this._gizmos.visible = value;\n    this.dispatchEvent(_changeEvent);\n  }\n  /**\n   * Creates the rotation gizmos matching trackball center and radius\n   * @param {Vector3} tbCenter The trackball center\n   * @param {number} tbRadius The trackball radius\n   */\n\n\n  /**\n   * Set values in transformation object\n   * @param {Matrix4} camera Transformation to be applied to the camera\n   * @param {Matrix4} gizmos Transformation to be applied to gizmos\n   */\n  setTransformationMatrices(camera = null, gizmos = null) {\n    if (camera) {\n      if (_transformation.camera) {\n        _transformation.camera.copy(camera);\n      } else {\n        _transformation.camera = camera.clone();\n      }\n    } else {\n      _transformation.camera = null;\n    }\n\n    if (gizmos) {\n      if (_transformation.gizmos) {\n        _transformation.gizmos.copy(gizmos);\n      } else {\n        _transformation.gizmos = gizmos.clone();\n      }\n    } else {\n      _transformation.gizmos = null;\n    }\n  }\n  /**\n   * Rotate camera around its direction axis passing by a given point by a given angle\n   * @param {Vector3} point The point where the rotation axis is passing trough\n   * @param {Number} angle Angle in radians\n   * @returns The computed transormation matix\n   */\n\n\n}\n\nexport { ArcballControls };\n"]},"metadata":{},"sourceType":"module"}