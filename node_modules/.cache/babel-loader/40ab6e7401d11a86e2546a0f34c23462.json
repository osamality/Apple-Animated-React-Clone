{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nextPossibleTokensAfter = exports.possiblePathsFrom = exports.NextTerminalAfterAtLeastOneSepWalker = exports.NextTerminalAfterAtLeastOneWalker = exports.NextTerminalAfterManySepWalker = exports.NextTerminalAfterManyWalker = exports.AbstractNextTerminalAfterProductionWalker = exports.NextAfterTokenWalker = exports.AbstractNextPossibleTokensWalker = void 0;\n\nvar rest_1 = require(\"./rest\");\n\nvar first_1 = __importDefault(require(\"lodash/first\"));\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar dropRight_1 = __importDefault(require(\"lodash/dropRight\"));\n\nvar drop_1 = __importDefault(require(\"lodash/drop\"));\n\nvar last_1 = __importDefault(require(\"lodash/last\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\n\nvar first_2 = require(\"./first\");\n\nvar gast_1 = require(\"@chevrotain/gast\");\n\nvar AbstractNextPossibleTokensWalker =\n/** @class */\nfunction (_super) {\n  __extends(AbstractNextPossibleTokensWalker, _super);\n\n  function AbstractNextPossibleTokensWalker(topProd, path) {\n    var _this = _super.call(this) || this;\n\n    _this.topProd = topProd;\n    _this.path = path;\n    _this.possibleTokTypes = [];\n    _this.nextProductionName = \"\";\n    _this.nextProductionOccurrence = 0;\n    _this.found = false;\n    _this.isAtEndOfPath = false;\n    return _this;\n  }\n\n  AbstractNextPossibleTokensWalker.prototype.startWalking = function () {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    } // immutable for the win\n\n\n    this.ruleStack = (0, clone_1.default)(this.path.ruleStack).reverse(); // intelij bug requires assertion\n\n    this.occurrenceStack = (0, clone_1.default)(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n    // already verified that the first production is valid, we now seek the 2nd production\n\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n    return this.possibleTokTypes;\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.walk = function (prod, prevRest) {\n    if (prevRest === void 0) {\n      prevRest = [];\n    } // stop scanning once we found the path\n\n\n    if (!this.found) {\n      _super.prototype.walk.call(this, prod, prevRest);\n    }\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {\n    // found the next production, need to keep walking in it\n    if (refProd.referencedRule.name === this.nextProductionName && refProd.idx === this.nextProductionOccurrence) {\n      var fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, fullRest);\n    }\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.updateExpectedNext = function () {\n    // need to consume the Terminal\n    if ((0, isEmpty_1.default)(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop();\n      this.nextProductionOccurrence = this.occurrenceStack.pop();\n    }\n  };\n\n  return AbstractNextPossibleTokensWalker;\n}(rest_1.RestWalker);\n\nexports.AbstractNextPossibleTokensWalker = AbstractNextPossibleTokensWalker;\n\nvar NextAfterTokenWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextAfterTokenWalker, _super);\n\n  function NextAfterTokenWalker(topProd, path) {\n    var _this = _super.call(this, topProd, path) || this;\n\n    _this.path = path;\n    _this.nextTerminalName = \"\";\n    _this.nextTerminalOccurrence = 0;\n    _this.nextTerminalName = _this.path.lastTok.name;\n    _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;\n    return _this;\n  }\n\n  NextAfterTokenWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {\n    if (this.isAtEndOfPath && terminal.terminalType.name === this.nextTerminalName && terminal.idx === this.nextTerminalOccurrence && !this.found) {\n      var fullRest = currRest.concat(prevRest);\n      var restProd = new gast_1.Alternative({\n        definition: fullRest\n      });\n      this.possibleTokTypes = (0, first_2.first)(restProd);\n      this.found = true;\n    }\n  };\n\n  return NextAfterTokenWalker;\n}(AbstractNextPossibleTokensWalker);\n\nexports.NextAfterTokenWalker = NextAfterTokenWalker;\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\n\nvar AbstractNextTerminalAfterProductionWalker =\n/** @class */\nfunction (_super) {\n  __extends(AbstractNextTerminalAfterProductionWalker, _super);\n\n  function AbstractNextTerminalAfterProductionWalker(topRule, occurrence) {\n    var _this = _super.call(this) || this;\n\n    _this.topRule = topRule;\n    _this.occurrence = occurrence;\n    _this.result = {\n      token: undefined,\n      occurrence: undefined,\n      isEndOfRule: undefined\n    };\n    return _this;\n  }\n\n  AbstractNextTerminalAfterProductionWalker.prototype.startWalking = function () {\n    this.walk(this.topRule);\n    return this.result;\n  };\n\n  return AbstractNextTerminalAfterProductionWalker;\n}(rest_1.RestWalker);\n\nexports.AbstractNextTerminalAfterProductionWalker = AbstractNextTerminalAfterProductionWalker;\n\nvar NextTerminalAfterManyWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterManyWalker, _super);\n\n  function NextTerminalAfterManyWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NextTerminalAfterManyWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    if (manyProd.idx === this.occurrence) {\n      var firstAfterMany = (0, first_1.default)(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n\n      if (firstAfterMany instanceof gast_1.Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterManyWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexports.NextTerminalAfterManyWalker = NextTerminalAfterManyWalker;\n\nvar NextTerminalAfterManySepWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterManySepWalker, _super);\n\n  function NextTerminalAfterManySepWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NextTerminalAfterManySepWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    if (manySepProd.idx === this.occurrence) {\n      var firstAfterManySep = (0, first_1.default)(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n\n      if (firstAfterManySep instanceof gast_1.Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterManySepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexports.NextTerminalAfterManySepWalker = NextTerminalAfterManySepWalker;\n\nvar NextTerminalAfterAtLeastOneWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterAtLeastOneWalker, _super);\n\n  function NextTerminalAfterAtLeastOneWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    if (atLeastOneProd.idx === this.occurrence) {\n      var firstAfterAtLeastOne = (0, first_1.default)(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n\n      if (firstAfterAtLeastOne instanceof gast_1.Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterAtLeastOneWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexports.NextTerminalAfterAtLeastOneWalker = NextTerminalAfterAtLeastOneWalker; // TODO: reduce code duplication in the AfterWalkers\n\nvar NextTerminalAfterAtLeastOneSepWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterAtLeastOneSepWalker, _super);\n\n  function NextTerminalAfterAtLeastOneSepWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep = function (atleastOneSepProd, currRest, prevRest) {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      var firstAfterfirstAfterAtLeastOneSep = (0, first_1.default)(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n\n      if (firstAfterfirstAfterAtLeastOneSep instanceof gast_1.Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterAtLeastOneSepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexports.NextTerminalAfterAtLeastOneSepWalker = NextTerminalAfterAtLeastOneSepWalker;\n\nfunction possiblePathsFrom(targetDef, maxLength, currPath) {\n  if (currPath === void 0) {\n    currPath = [];\n  } // avoid side effects\n\n\n  currPath = (0, clone_1.default)(currPath);\n  var result = [];\n  var i = 0; // TODO: avoid inner funcs\n\n  function remainingPathWith(nextDef) {\n    return nextDef.concat((0, drop_1.default)(targetDef, i + 1));\n  } // TODO: avoid inner funcs\n\n\n  function getAlternativesForProd(definition) {\n    var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n    return result.concat(alternatives);\n  }\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n\n\n  while (currPath.length < maxLength && i < targetDef.length) {\n    var prod = targetDef[i];\n    /* istanbul ignore else */\n\n    if (prod instanceof gast_1.Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_1.NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_1.Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_1.RepetitionMandatory) {\n      var newDef = prod.definition.concat([new gast_1.Repetition({\n        definition: prod.definition\n      })]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {\n      var newDef = [new gast_1.Alternative({\n        definition: prod.definition\n      }), new gast_1.Repetition({\n        definition: [new gast_1.Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_1.RepetitionWithSeparator) {\n      var newDef = prod.definition.concat([new gast_1.Repetition({\n        definition: [new gast_1.Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_1.Repetition) {\n      var newDef = prod.definition.concat([new gast_1.Repetition({\n        definition: prod.definition\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_1.Alternation) {\n      (0, forEach_1.default)(prod.definition, function (currAlt) {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if ((0, isEmpty_1.default)(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof gast_1.Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n\n  result.push({\n    partialPath: currPath,\n    suffixDef: (0, drop_1.default)(targetDef, i)\n  });\n  return result;\n}\n\nexports.possiblePathsFrom = possiblePathsFrom;\n\nfunction nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n  var EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\"; // to avoid creating a new Array each time.\n\n  var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  var EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n  var foundCompletePath = false;\n  var tokenVectorLength = tokenVector.length;\n  var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n  var result = [];\n  var possiblePaths = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: []\n  });\n\n  while (!(0, isEmpty_1.default)(possiblePaths)) {\n    var currPath = possiblePaths.pop(); // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (foundCompletePath && (0, last_1.default)(possiblePaths).idx <= minimalAlternativesIndex) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n\n      continue;\n    }\n\n    var currDef = currPath.def;\n    var currIdx = currPath.idx;\n    var currRuleStack = currPath.ruleStack;\n    var currOccurrenceStack = currPath.occurrenceStack; // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n\n    if ((0, isEmpty_1.default)(currDef)) {\n      continue;\n    }\n\n    var prod = currDef[0];\n    /* istanbul ignore else */\n\n    if (prod === EXIT_NON_TERMINAL) {\n      var nextPath = {\n        idx: currIdx,\n        def: (0, drop_1.default)(currDef),\n        ruleStack: (0, dropRight_1.default)(currRuleStack),\n        occurrenceStack: (0, dropRight_1.default)(currOccurrenceStack)\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_1.Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        var nextIdx = currIdx + 1;\n        var actualToken = tokenVector[nextIdx];\n\n        if (tokMatcher(actualToken, prod.terminalType)) {\n          var nextPath = {\n            idx: nextIdx,\n            def: (0, drop_1.default)(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack\n          };\n          possiblePaths.push(nextPath);\n        } // end of the line\n\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof gast_1.NonTerminal) {\n      var newRuleStack = (0, clone_1.default)(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n      var newOccurrenceStack = (0, clone_1.default)(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n      var nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, (0, drop_1.default)(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_1.Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: (0, drop_1.default)(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat((0, drop_1.default)(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_1.RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var secondIteration = new gast_1.Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], (0, drop_1.default)(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var separatorGast = new gast_1.Terminal({\n        terminalType: prod.separator\n      });\n      var secondIteration = new gast_1.Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], (0, drop_1.default)(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_1.RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: (0, drop_1.default)(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var separatorGast = new gast_1.Terminal({\n        terminalType: prod.separator\n      });\n      var nthRepetition = new gast_1.Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], (0, drop_1.default)(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_1.Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: (0, drop_1.default)(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE); // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n\n      var nthRepetition = new gast_1.Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], (0, drop_1.default)(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_1.Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (var i = prod.definition.length - 1; i >= 0; i--) {\n        var currAlt = prod.definition[i];\n        var currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat((0, drop_1.default)(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof gast_1.Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat((0, drop_1.default)(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      });\n    } else if (prod instanceof gast_1.Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n\n  return result;\n}\n\nexports.nextPossibleTokensAfter = nextPossibleTokensAfter;\n\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n  var newRuleStack = (0, clone_1.default)(currRuleStack);\n  newRuleStack.push(topRule.name);\n  var newCurrOccurrenceStack = (0, clone_1.default)(currOccurrenceStack); // top rule is always assumed to have been called with occurrence index 1\n\n  newCurrOccurrenceStack.push(1);\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack\n  };\n}","map":{"version":3,"sources":["../../../../src/parse/grammar/interpreter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.nextPossibleTokensAfter = exports.possiblePathsFrom = exports.NextTerminalAfterAtLeastOneSepWalker = exports.NextTerminalAfterAtLeastOneWalker = exports.NextTerminalAfterManySepWalker = exports.NextTerminalAfterManyWalker = exports.AbstractNextTerminalAfterProductionWalker = exports.NextAfterTokenWalker = exports.AbstractNextPossibleTokensWalker = void 0;\nvar rest_1 = require(\"./rest\");\nvar first_1 = __importDefault(require(\"lodash/first\"));\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\nvar dropRight_1 = __importDefault(require(\"lodash/dropRight\"));\nvar drop_1 = __importDefault(require(\"lodash/drop\"));\nvar last_1 = __importDefault(require(\"lodash/last\"));\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\nvar first_2 = require(\"./first\");\nvar gast_1 = require(\"@chevrotain/gast\");\nvar AbstractNextPossibleTokensWalker = /** @class */ (function (_super) {\n    __extends(AbstractNextPossibleTokensWalker, _super);\n    function AbstractNextPossibleTokensWalker(topProd, path) {\n        var _this = _super.call(this) || this;\n        _this.topProd = topProd;\n        _this.path = path;\n        _this.possibleTokTypes = [];\n        _this.nextProductionName = \"\";\n        _this.nextProductionOccurrence = 0;\n        _this.found = false;\n        _this.isAtEndOfPath = false;\n        return _this;\n    }\n    AbstractNextPossibleTokensWalker.prototype.startWalking = function () {\n        this.found = false;\n        if (this.path.ruleStack[0] !== this.topProd.name) {\n            throw Error(\"The path does not start with the walker's top Rule!\");\n        }\n        // immutable for the win\n        this.ruleStack = (0, clone_1.default)(this.path.ruleStack).reverse(); // intelij bug requires assertion\n        this.occurrenceStack = (0, clone_1.default)(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n        // already verified that the first production is valid, we now seek the 2nd production\n        this.ruleStack.pop();\n        this.occurrenceStack.pop();\n        this.updateExpectedNext();\n        this.walk(this.topProd);\n        return this.possibleTokTypes;\n    };\n    AbstractNextPossibleTokensWalker.prototype.walk = function (prod, prevRest) {\n        if (prevRest === void 0) { prevRest = []; }\n        // stop scanning once we found the path\n        if (!this.found) {\n            _super.prototype.walk.call(this, prod, prevRest);\n        }\n    };\n    AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {\n        // found the next production, need to keep walking in it\n        if (refProd.referencedRule.name === this.nextProductionName &&\n            refProd.idx === this.nextProductionOccurrence) {\n            var fullRest = currRest.concat(prevRest);\n            this.updateExpectedNext();\n            this.walk(refProd.referencedRule, fullRest);\n        }\n    };\n    AbstractNextPossibleTokensWalker.prototype.updateExpectedNext = function () {\n        // need to consume the Terminal\n        if ((0, isEmpty_1.default)(this.ruleStack)) {\n            // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n            // really seeking is the last Terminal...\n            this.nextProductionName = \"\";\n            this.nextProductionOccurrence = 0;\n            this.isAtEndOfPath = true;\n        }\n        else {\n            this.nextProductionName = this.ruleStack.pop();\n            this.nextProductionOccurrence = this.occurrenceStack.pop();\n        }\n    };\n    return AbstractNextPossibleTokensWalker;\n}(rest_1.RestWalker));\nexports.AbstractNextPossibleTokensWalker = AbstractNextPossibleTokensWalker;\nvar NextAfterTokenWalker = /** @class */ (function (_super) {\n    __extends(NextAfterTokenWalker, _super);\n    function NextAfterTokenWalker(topProd, path) {\n        var _this = _super.call(this, topProd, path) || this;\n        _this.path = path;\n        _this.nextTerminalName = \"\";\n        _this.nextTerminalOccurrence = 0;\n        _this.nextTerminalName = _this.path.lastTok.name;\n        _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;\n        return _this;\n    }\n    NextAfterTokenWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {\n        if (this.isAtEndOfPath &&\n            terminal.terminalType.name === this.nextTerminalName &&\n            terminal.idx === this.nextTerminalOccurrence &&\n            !this.found) {\n            var fullRest = currRest.concat(prevRest);\n            var restProd = new gast_1.Alternative({ definition: fullRest });\n            this.possibleTokTypes = (0, first_2.first)(restProd);\n            this.found = true;\n        }\n    };\n    return NextAfterTokenWalker;\n}(AbstractNextPossibleTokensWalker));\nexports.NextAfterTokenWalker = NextAfterTokenWalker;\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nvar AbstractNextTerminalAfterProductionWalker = /** @class */ (function (_super) {\n    __extends(AbstractNextTerminalAfterProductionWalker, _super);\n    function AbstractNextTerminalAfterProductionWalker(topRule, occurrence) {\n        var _this = _super.call(this) || this;\n        _this.topRule = topRule;\n        _this.occurrence = occurrence;\n        _this.result = {\n            token: undefined,\n            occurrence: undefined,\n            isEndOfRule: undefined\n        };\n        return _this;\n    }\n    AbstractNextTerminalAfterProductionWalker.prototype.startWalking = function () {\n        this.walk(this.topRule);\n        return this.result;\n    };\n    return AbstractNextTerminalAfterProductionWalker;\n}(rest_1.RestWalker));\nexports.AbstractNextTerminalAfterProductionWalker = AbstractNextTerminalAfterProductionWalker;\nvar NextTerminalAfterManyWalker = /** @class */ (function (_super) {\n    __extends(NextTerminalAfterManyWalker, _super);\n    function NextTerminalAfterManyWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NextTerminalAfterManyWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n        if (manyProd.idx === this.occurrence) {\n            var firstAfterMany = (0, first_1.default)(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterMany === undefined;\n            if (firstAfterMany instanceof gast_1.Terminal) {\n                this.result.token = firstAfterMany.terminalType;\n                this.result.occurrence = firstAfterMany.idx;\n            }\n        }\n        else {\n            _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);\n        }\n    };\n    return NextTerminalAfterManyWalker;\n}(AbstractNextTerminalAfterProductionWalker));\nexports.NextTerminalAfterManyWalker = NextTerminalAfterManyWalker;\nvar NextTerminalAfterManySepWalker = /** @class */ (function (_super) {\n    __extends(NextTerminalAfterManySepWalker, _super);\n    function NextTerminalAfterManySepWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NextTerminalAfterManySepWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n        if (manySepProd.idx === this.occurrence) {\n            var firstAfterManySep = (0, first_1.default)(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterManySep === undefined;\n            if (firstAfterManySep instanceof gast_1.Terminal) {\n                this.result.token = firstAfterManySep.terminalType;\n                this.result.occurrence = firstAfterManySep.idx;\n            }\n        }\n        else {\n            _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);\n        }\n    };\n    return NextTerminalAfterManySepWalker;\n}(AbstractNextTerminalAfterProductionWalker));\nexports.NextTerminalAfterManySepWalker = NextTerminalAfterManySepWalker;\nvar NextTerminalAfterAtLeastOneWalker = /** @class */ (function (_super) {\n    __extends(NextTerminalAfterAtLeastOneWalker, _super);\n    function NextTerminalAfterAtLeastOneWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n        if (atLeastOneProd.idx === this.occurrence) {\n            var firstAfterAtLeastOne = (0, first_1.default)(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n            if (firstAfterAtLeastOne instanceof gast_1.Terminal) {\n                this.result.token = firstAfterAtLeastOne.terminalType;\n                this.result.occurrence = firstAfterAtLeastOne.idx;\n            }\n        }\n        else {\n            _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);\n        }\n    };\n    return NextTerminalAfterAtLeastOneWalker;\n}(AbstractNextTerminalAfterProductionWalker));\nexports.NextTerminalAfterAtLeastOneWalker = NextTerminalAfterAtLeastOneWalker;\n// TODO: reduce code duplication in the AfterWalkers\nvar NextTerminalAfterAtLeastOneSepWalker = /** @class */ (function (_super) {\n    __extends(NextTerminalAfterAtLeastOneSepWalker, _super);\n    function NextTerminalAfterAtLeastOneSepWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep = function (atleastOneSepProd, currRest, prevRest) {\n        if (atleastOneSepProd.idx === this.occurrence) {\n            var firstAfterfirstAfterAtLeastOneSep = (0, first_1.default)(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n            if (firstAfterfirstAfterAtLeastOneSep instanceof gast_1.Terminal) {\n                this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n                this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n            }\n        }\n        else {\n            _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);\n        }\n    };\n    return NextTerminalAfterAtLeastOneSepWalker;\n}(AbstractNextTerminalAfterProductionWalker));\nexports.NextTerminalAfterAtLeastOneSepWalker = NextTerminalAfterAtLeastOneSepWalker;\nfunction possiblePathsFrom(targetDef, maxLength, currPath) {\n    if (currPath === void 0) { currPath = []; }\n    // avoid side effects\n    currPath = (0, clone_1.default)(currPath);\n    var result = [];\n    var i = 0;\n    // TODO: avoid inner funcs\n    function remainingPathWith(nextDef) {\n        return nextDef.concat((0, drop_1.default)(targetDef, i + 1));\n    }\n    // TODO: avoid inner funcs\n    function getAlternativesForProd(definition) {\n        var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n        return result.concat(alternatives);\n    }\n    /**\n     * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n     * following (rest) of the targetDef.\n     *\n     * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n     * the optional production.\n     */\n    while (currPath.length < maxLength && i < targetDef.length) {\n        var prod = targetDef[i];\n        /* istanbul ignore else */\n        if (prod instanceof gast_1.Alternative) {\n            return getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof gast_1.NonTerminal) {\n            return getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof gast_1.Option) {\n            result = getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof gast_1.RepetitionMandatory) {\n            var newDef = prod.definition.concat([\n                new gast_1.Repetition({\n                    definition: prod.definition\n                })\n            ]);\n            return getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {\n            var newDef = [\n                new gast_1.Alternative({ definition: prod.definition }),\n                new gast_1.Repetition({\n                    definition: [new gast_1.Terminal({ terminalType: prod.separator })].concat(prod.definition)\n                })\n            ];\n            return getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof gast_1.RepetitionWithSeparator) {\n            var newDef = prod.definition.concat([\n                new gast_1.Repetition({\n                    definition: [new gast_1.Terminal({ terminalType: prod.separator })].concat(prod.definition)\n                })\n            ]);\n            result = getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof gast_1.Repetition) {\n            var newDef = prod.definition.concat([\n                new gast_1.Repetition({\n                    definition: prod.definition\n                })\n            ]);\n            result = getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof gast_1.Alternation) {\n            (0, forEach_1.default)(prod.definition, function (currAlt) {\n                // TODO: this is a limited check for empty alternatives\n                //   It would prevent a common case of infinite loops during parser initialization.\n                //   However **in-directly** empty alternatives may still cause issues.\n                if ((0, isEmpty_1.default)(currAlt.definition) === false) {\n                    result = getAlternativesForProd(currAlt.definition);\n                }\n            });\n            return result;\n        }\n        else if (prod instanceof gast_1.Terminal) {\n            currPath.push(prod.terminalType);\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n        i++;\n    }\n    result.push({\n        partialPath: currPath,\n        suffixDef: (0, drop_1.default)(targetDef, i)\n    });\n    return result;\n}\nexports.possiblePathsFrom = possiblePathsFrom;\nfunction nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n    var EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\";\n    // to avoid creating a new Array each time.\n    var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n    var EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n    var foundCompletePath = false;\n    var tokenVectorLength = tokenVector.length;\n    var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n    var result = [];\n    var possiblePaths = [];\n    possiblePaths.push({\n        idx: -1,\n        def: initialDef,\n        ruleStack: [],\n        occurrenceStack: []\n    });\n    while (!(0, isEmpty_1.default)(possiblePaths)) {\n        var currPath = possiblePaths.pop();\n        // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n        if (currPath === EXIT_ALTERNATIVE) {\n            if (foundCompletePath &&\n                (0, last_1.default)(possiblePaths).idx <= minimalAlternativesIndex) {\n                // remove irrelevant alternative\n                possiblePaths.pop();\n            }\n            continue;\n        }\n        var currDef = currPath.def;\n        var currIdx = currPath.idx;\n        var currRuleStack = currPath.ruleStack;\n        var currOccurrenceStack = currPath.occurrenceStack;\n        // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n        if ((0, isEmpty_1.default)(currDef)) {\n            continue;\n        }\n        var prod = currDef[0];\n        /* istanbul ignore else */\n        if (prod === EXIT_NON_TERMINAL) {\n            var nextPath = {\n                idx: currIdx,\n                def: (0, drop_1.default)(currDef),\n                ruleStack: (0, dropRight_1.default)(currRuleStack),\n                occurrenceStack: (0, dropRight_1.default)(currOccurrenceStack)\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof gast_1.Terminal) {\n            /* istanbul ignore else */\n            if (currIdx < tokenVectorLength - 1) {\n                var nextIdx = currIdx + 1;\n                var actualToken = tokenVector[nextIdx];\n                if (tokMatcher(actualToken, prod.terminalType)) {\n                    var nextPath = {\n                        idx: nextIdx,\n                        def: (0, drop_1.default)(currDef),\n                        ruleStack: currRuleStack,\n                        occurrenceStack: currOccurrenceStack\n                    };\n                    possiblePaths.push(nextPath);\n                }\n                // end of the line\n            }\n            else if (currIdx === tokenVectorLength - 1) {\n                // IGNORE ABOVE ELSE\n                result.push({\n                    nextTokenType: prod.terminalType,\n                    nextTokenOccurrence: prod.idx,\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack\n                });\n                foundCompletePath = true;\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        }\n        else if (prod instanceof gast_1.NonTerminal) {\n            var newRuleStack = (0, clone_1.default)(currRuleStack);\n            newRuleStack.push(prod.nonTerminalName);\n            var newOccurrenceStack = (0, clone_1.default)(currOccurrenceStack);\n            newOccurrenceStack.push(prod.idx);\n            var nextPath = {\n                idx: currIdx,\n                def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, (0, drop_1.default)(currDef)),\n                ruleStack: newRuleStack,\n                occurrenceStack: newOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof gast_1.Option) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            var nextPathWithout = {\n                idx: currIdx,\n                def: (0, drop_1.default)(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            var nextPathWith = {\n                idx: currIdx,\n                def: prod.definition.concat((0, drop_1.default)(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof gast_1.RepetitionMandatory) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            var secondIteration = new gast_1.Repetition({\n                definition: prod.definition,\n                idx: prod.idx\n            });\n            var nextDef = prod.definition.concat([secondIteration], (0, drop_1.default)(currDef));\n            var nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            var separatorGast = new gast_1.Terminal({\n                terminalType: prod.separator\n            });\n            var secondIteration = new gast_1.Repetition({\n                definition: [separatorGast].concat(prod.definition),\n                idx: prod.idx\n            });\n            var nextDef = prod.definition.concat([secondIteration], (0, drop_1.default)(currDef));\n            var nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof gast_1.RepetitionWithSeparator) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            var nextPathWithout = {\n                idx: currIdx,\n                def: (0, drop_1.default)(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            var separatorGast = new gast_1.Terminal({\n                terminalType: prod.separator\n            });\n            var nthRepetition = new gast_1.Repetition({\n                definition: [separatorGast].concat(prod.definition),\n                idx: prod.idx\n            });\n            var nextDef = prod.definition.concat([nthRepetition], (0, drop_1.default)(currDef));\n            var nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof gast_1.Repetition) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            var nextPathWithout = {\n                idx: currIdx,\n                def: (0, drop_1.default)(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n            var nthRepetition = new gast_1.Repetition({\n                definition: prod.definition,\n                idx: prod.idx\n            });\n            var nextDef = prod.definition.concat([nthRepetition], (0, drop_1.default)(currDef));\n            var nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof gast_1.Alternation) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            for (var i = prod.definition.length - 1; i >= 0; i--) {\n                var currAlt = prod.definition[i];\n                var currAltPath = {\n                    idx: currIdx,\n                    def: currAlt.definition.concat((0, drop_1.default)(currDef)),\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack\n                };\n                possiblePaths.push(currAltPath);\n                possiblePaths.push(EXIT_ALTERNATIVE);\n            }\n        }\n        else if (prod instanceof gast_1.Alternative) {\n            possiblePaths.push({\n                idx: currIdx,\n                def: prod.definition.concat((0, drop_1.default)(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            });\n        }\n        else if (prod instanceof gast_1.Rule) {\n            // last because we should only encounter at most a single one of these per invocation.\n            possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    }\n    return result;\n}\nexports.nextPossibleTokensAfter = nextPossibleTokensAfter;\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n    var newRuleStack = (0, clone_1.default)(currRuleStack);\n    newRuleStack.push(topRule.name);\n    var newCurrOccurrenceStack = (0, clone_1.default)(currOccurrenceStack);\n    // top rule is always assumed to have been called with occurrence index 1\n    newCurrOccurrenceStack.push(1);\n    return {\n        idx: currIdx,\n        def: topRule.definition,\n        ruleStack: newRuleStack,\n        occurrenceStack: newCurrOccurrenceStack\n    };\n}\n//# sourceMappingURL=interpreter.js.map"]},"metadata":{},"sourceType":"script"}