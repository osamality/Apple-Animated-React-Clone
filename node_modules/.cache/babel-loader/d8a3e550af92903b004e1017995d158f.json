{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MaterialReferenceNode from './MaterialReferenceNode.js';\n\nclass MaterialNode extends Node {\n  constructor(scope = MaterialNode.COLOR) {\n    super();\n    this.scope = scope;\n  }\n\n  getNodeType(builder) {\n    const scope = this.scope;\n    const material = builder.context.material;\n\n    if (scope === MaterialNode.COLOR) {\n      return material.map !== null ? 'vec4' : 'vec3';\n    } else if (scope === MaterialNode.OPACITY) {\n      return 'float';\n    } else if (scope === MaterialNode.SPECULAR) {\n      return 'vec3';\n    } else if (scope === MaterialNode.ROUGHNESS || scope === MaterialNode.METALNESS) {\n      return 'float';\n    }\n  }\n\n  generate(builder, output) {\n    const material = builder.context.material;\n    const scope = this.scope;\n    let node = null;\n\n    if (scope === MaterialNode.ALPHA_TEST) {\n      node = new MaterialReferenceNode('alphaTest', 'float');\n    } else if (scope === MaterialNode.COLOR) {\n      const colorNode = new MaterialReferenceNode('color', 'color');\n\n      if (material.map !== null && material.map !== undefined && material.map.isTexture === true) {\n        node = new OperatorNode('*', colorNode, new MaterialReferenceNode('map', 'texture'));\n      } else {\n        node = colorNode;\n      }\n    } else if (scope === MaterialNode.OPACITY) {\n      const opacityNode = new MaterialReferenceNode('opacity', 'float');\n\n      if (material.alphaMap !== null && material.alphaMap !== undefined && material.alphaMap.isTexture === true) {\n        node = new OperatorNode('*', opacityNode, new MaterialReferenceNode('alphaMap', 'texture'));\n      } else {\n        node = opacityNode;\n      }\n    } else if (scope === MaterialNode.SPECULAR) {\n      const specularColorNode = new MaterialReferenceNode('specularColor', 'color');\n\n      if (material.specularColorMap !== null && material.specularColorMap !== undefined && material.specularColorMap.isTexture === true) {\n        node = new OperatorNode('*', specularColorNode, new MaterialReferenceNode('specularColorMap', 'texture'));\n      } else {\n        node = specularColorNode;\n      }\n    } else {\n      const outputType = this.getNodeType(builder);\n      node = new MaterialReferenceNode(scope, outputType);\n    }\n\n    return node.build(builder, output);\n  }\n\n}\n\n_defineProperty(MaterialNode, \"ALPHA_TEST\", 'alphaTest');\n\n_defineProperty(MaterialNode, \"COLOR\", 'color');\n\n_defineProperty(MaterialNode, \"OPACITY\", 'opacity');\n\n_defineProperty(MaterialNode, \"SPECULAR\", 'specular');\n\n_defineProperty(MaterialNode, \"ROUGHNESS\", 'roughness');\n\n_defineProperty(MaterialNode, \"METALNESS\", 'metalness');\n\nexport default MaterialNode;","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/nodes/accessors/MaterialNode.js"],"names":["_defineProperty","Node","OperatorNode","MaterialReferenceNode","MaterialNode","constructor","scope","COLOR","getNodeType","builder","material","context","map","OPACITY","SPECULAR","ROUGHNESS","METALNESS","generate","output","node","ALPHA_TEST","colorNode","undefined","isTexture","opacityNode","alphaMap","specularColorNode","specularColorMap","outputType","build"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MaterialReferenceNode from './MaterialReferenceNode.js';\n\nclass MaterialNode extends Node {\n  constructor(scope = MaterialNode.COLOR) {\n    super();\n    this.scope = scope;\n  }\n\n  getNodeType(builder) {\n    const scope = this.scope;\n    const material = builder.context.material;\n\n    if (scope === MaterialNode.COLOR) {\n      return material.map !== null ? 'vec4' : 'vec3';\n    } else if (scope === MaterialNode.OPACITY) {\n      return 'float';\n    } else if (scope === MaterialNode.SPECULAR) {\n      return 'vec3';\n    } else if (scope === MaterialNode.ROUGHNESS || scope === MaterialNode.METALNESS) {\n      return 'float';\n    }\n  }\n\n  generate(builder, output) {\n    const material = builder.context.material;\n    const scope = this.scope;\n    let node = null;\n\n    if (scope === MaterialNode.ALPHA_TEST) {\n      node = new MaterialReferenceNode('alphaTest', 'float');\n    } else if (scope === MaterialNode.COLOR) {\n      const colorNode = new MaterialReferenceNode('color', 'color');\n\n      if (material.map !== null && material.map !== undefined && material.map.isTexture === true) {\n        node = new OperatorNode('*', colorNode, new MaterialReferenceNode('map', 'texture'));\n      } else {\n        node = colorNode;\n      }\n    } else if (scope === MaterialNode.OPACITY) {\n      const opacityNode = new MaterialReferenceNode('opacity', 'float');\n\n      if (material.alphaMap !== null && material.alphaMap !== undefined && material.alphaMap.isTexture === true) {\n        node = new OperatorNode('*', opacityNode, new MaterialReferenceNode('alphaMap', 'texture'));\n      } else {\n        node = opacityNode;\n      }\n    } else if (scope === MaterialNode.SPECULAR) {\n      const specularColorNode = new MaterialReferenceNode('specularColor', 'color');\n\n      if (material.specularColorMap !== null && material.specularColorMap !== undefined && material.specularColorMap.isTexture === true) {\n        node = new OperatorNode('*', specularColorNode, new MaterialReferenceNode('specularColorMap', 'texture'));\n      } else {\n        node = specularColorNode;\n      }\n    } else {\n      const outputType = this.getNodeType(builder);\n      node = new MaterialReferenceNode(scope, outputType);\n    }\n\n    return node.build(builder, output);\n  }\n\n}\n\n_defineProperty(MaterialNode, \"ALPHA_TEST\", 'alphaTest');\n\n_defineProperty(MaterialNode, \"COLOR\", 'color');\n\n_defineProperty(MaterialNode, \"OPACITY\", 'opacity');\n\n_defineProperty(MaterialNode, \"SPECULAR\", 'specular');\n\n_defineProperty(MaterialNode, \"ROUGHNESS\", 'roughness');\n\n_defineProperty(MaterialNode, \"METALNESS\", 'metalness');\n\nexport default MaterialNode;\n"]},"metadata":{},"sourceType":"module"}