{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkPrefixAlternativesAmbiguities = exports.validateSomeNonEmptyLookaheadPath = exports.validateTooManyAlts = exports.RepetitionCollector = exports.validateAmbiguousAlternationAlternatives = exports.validateEmptyOrAlternative = exports.getFirstNoneTerminal = exports.validateNoLeftRecursion = exports.validateRuleIsOverridden = exports.validateRuleDoesNotAlreadyExist = exports.OccurrenceValidationCollector = exports.identifyProductionForDuplicates = exports.validateGrammar = exports.validateLookahead = void 0;\n\nvar first_1 = __importDefault(require(\"lodash/first\"));\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar drop_1 = __importDefault(require(\"lodash/drop\"));\n\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\n\nvar filter_1 = __importDefault(require(\"lodash/filter\"));\n\nvar reject_1 = __importDefault(require(\"lodash/reject\"));\n\nvar difference_1 = __importDefault(require(\"lodash/difference\"));\n\nvar map_1 = __importDefault(require(\"lodash/map\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar groupBy_1 = __importDefault(require(\"lodash/groupBy\"));\n\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\n\nvar pickBy_1 = __importDefault(require(\"lodash/pickBy\"));\n\nvar values_1 = __importDefault(require(\"lodash/values\"));\n\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\n\nvar flatMap_1 = __importDefault(require(\"lodash/flatMap\"));\n\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\n\nvar parser_1 = require(\"../parser/parser\");\n\nvar gast_1 = require(\"@chevrotain/gast\");\n\nvar lookahead_1 = require(\"./lookahead\");\n\nvar interpreter_1 = require(\"./interpreter\");\n\nvar gast_2 = require(\"@chevrotain/gast\");\n\nvar gast_3 = require(\"@chevrotain/gast\");\n\nvar dropRight_1 = __importDefault(require(\"lodash/dropRight\"));\n\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\n\nvar tokens_1 = require(\"../../scan/tokens\");\n\nfunction validateLookahead(options) {\n  var lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n    rules: options.rules,\n    tokenTypes: options.tokenTypes,\n    grammarName: options.grammarName\n  });\n  return (0, map_1.default)(lookaheadValidationErrorMessages, function (errorMessage) {\n    return __assign({\n      type: parser_1.ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION\n    }, errorMessage);\n  });\n}\n\nexports.validateLookahead = validateLookahead;\n\nfunction validateGrammar(topLevels, tokenTypes, errMsgProvider, grammarName) {\n  var duplicateErrors = (0, flatMap_1.default)(topLevels, function (currTopLevel) {\n    return validateDuplicateProductions(currTopLevel, errMsgProvider);\n  });\n  var termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);\n  var tooManyAltsErrors = (0, flatMap_1.default)(topLevels, function (curRule) {\n    return validateTooManyAlts(curRule, errMsgProvider);\n  });\n  var duplicateRulesError = (0, flatMap_1.default)(topLevels, function (curRule) {\n    return validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider);\n  });\n  return duplicateErrors.concat(termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError);\n}\n\nexports.validateGrammar = validateGrammar;\n\nfunction validateDuplicateProductions(topLevelRule, errMsgProvider) {\n  var collectorVisitor = new OccurrenceValidationCollector();\n  topLevelRule.accept(collectorVisitor);\n  var allRuleProductions = collectorVisitor.allProductions;\n  var productionGroups = (0, groupBy_1.default)(allRuleProductions, identifyProductionForDuplicates);\n  var duplicates = (0, pickBy_1.default)(productionGroups, function (currGroup) {\n    return currGroup.length > 1;\n  });\n  var errors = (0, map_1.default)((0, values_1.default)(duplicates), function (currDuplicates) {\n    var firstProd = (0, first_1.default)(currDuplicates);\n    var msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);\n    var dslName = (0, gast_1.getProductionDslName)(firstProd);\n    var defError = {\n      message: msg,\n      type: parser_1.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n      ruleName: topLevelRule.name,\n      dslName: dslName,\n      occurrence: firstProd.idx\n    };\n    var param = getExtraProductionArgument(firstProd);\n\n    if (param) {\n      defError.parameter = param;\n    }\n\n    return defError;\n  });\n  return errors;\n}\n\nfunction identifyProductionForDuplicates(prod) {\n  return \"\".concat((0, gast_1.getProductionDslName)(prod), \"_#_\").concat(prod.idx, \"_#_\").concat(getExtraProductionArgument(prod));\n}\n\nexports.identifyProductionForDuplicates = identifyProductionForDuplicates;\n\nfunction getExtraProductionArgument(prod) {\n  if (prod instanceof gast_2.Terminal) {\n    return prod.terminalType.name;\n  } else if (prod instanceof gast_2.NonTerminal) {\n    return prod.nonTerminalName;\n  } else {\n    return \"\";\n  }\n}\n\nvar OccurrenceValidationCollector =\n/** @class */\nfunction (_super) {\n  __extends(OccurrenceValidationCollector, _super);\n\n  function OccurrenceValidationCollector() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.allProductions = [];\n    return _this;\n  }\n\n  OccurrenceValidationCollector.prototype.visitNonTerminal = function (subrule) {\n    this.allProductions.push(subrule);\n  };\n\n  OccurrenceValidationCollector.prototype.visitOption = function (option) {\n    this.allProductions.push(option);\n  };\n\n  OccurrenceValidationCollector.prototype.visitRepetitionWithSeparator = function (manySep) {\n    this.allProductions.push(manySep);\n  };\n\n  OccurrenceValidationCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {\n    this.allProductions.push(atLeastOne);\n  };\n\n  OccurrenceValidationCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n    this.allProductions.push(atLeastOneSep);\n  };\n\n  OccurrenceValidationCollector.prototype.visitRepetition = function (many) {\n    this.allProductions.push(many);\n  };\n\n  OccurrenceValidationCollector.prototype.visitAlternation = function (or) {\n    this.allProductions.push(or);\n  };\n\n  OccurrenceValidationCollector.prototype.visitTerminal = function (terminal) {\n    this.allProductions.push(terminal);\n  };\n\n  return OccurrenceValidationCollector;\n}(gast_3.GAstVisitor);\n\nexports.OccurrenceValidationCollector = OccurrenceValidationCollector;\n\nfunction validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n  var errors = [];\n  var occurrences = (0, reduce_1.default)(allRules, function (result, curRule) {\n    if (curRule.name === rule.name) {\n      return result + 1;\n    }\n\n    return result;\n  }, 0);\n\n  if (occurrences > 1) {\n    var errMsg = errMsgProvider.buildDuplicateRuleNameError({\n      topLevelRule: rule,\n      grammarName: className\n    });\n    errors.push({\n      message: errMsg,\n      type: parser_1.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n      ruleName: rule.name\n    });\n  }\n\n  return errors;\n}\n\nexports.validateRuleDoesNotAlreadyExist = validateRuleDoesNotAlreadyExist; // TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\n\nfunction validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n  var errors = [];\n  var errMsg;\n\n  if (!(0, includes_1.default)(definedRulesNames, ruleName)) {\n    errMsg = \"Invalid rule override, rule: ->\".concat(ruleName, \"<- cannot be overridden in the grammar: ->\").concat(className, \"<-\") + \"as it is not defined in any of the super grammars \";\n    errors.push({\n      message: errMsg,\n      type: parser_1.ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n      ruleName: ruleName\n    });\n  }\n\n  return errors;\n}\n\nexports.validateRuleIsOverridden = validateRuleIsOverridden;\n\nfunction validateNoLeftRecursion(topRule, currRule, errMsgProvider, path) {\n  if (path === void 0) {\n    path = [];\n  }\n\n  var errors = [];\n  var nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n\n  if ((0, isEmpty_1.default)(nextNonTerminals)) {\n    return [];\n  } else {\n    var ruleName = topRule.name;\n    var foundLeftRecursion = (0, includes_1.default)(nextNonTerminals, topRule);\n\n    if (foundLeftRecursion) {\n      errors.push({\n        message: errMsgProvider.buildLeftRecursionError({\n          topLevelRule: topRule,\n          leftRecursionPath: path\n        }),\n        type: parser_1.ParserDefinitionErrorType.LEFT_RECURSION,\n        ruleName: ruleName\n      });\n    } // we are only looking for cyclic paths leading back to the specific topRule\n    // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n\n\n    var validNextSteps = (0, difference_1.default)(nextNonTerminals, path.concat([topRule]));\n    var errorsFromNextSteps = (0, flatMap_1.default)(validNextSteps, function (currRefRule) {\n      var newPath = (0, clone_1.default)(path);\n      newPath.push(currRefRule);\n      return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);\n    });\n    return errors.concat(errorsFromNextSteps);\n  }\n}\n\nexports.validateNoLeftRecursion = validateNoLeftRecursion;\n\nfunction getFirstNoneTerminal(definition) {\n  var result = [];\n\n  if ((0, isEmpty_1.default)(definition)) {\n    return result;\n  }\n\n  var firstProd = (0, first_1.default)(definition);\n  /* istanbul ignore else */\n\n  if (firstProd instanceof gast_2.NonTerminal) {\n    result.push(firstProd.referencedRule);\n  } else if (firstProd instanceof gast_2.Alternative || firstProd instanceof gast_2.Option || firstProd instanceof gast_2.RepetitionMandatory || firstProd instanceof gast_2.RepetitionMandatoryWithSeparator || firstProd instanceof gast_2.RepetitionWithSeparator || firstProd instanceof gast_2.Repetition) {\n    result = result.concat(getFirstNoneTerminal(firstProd.definition));\n  } else if (firstProd instanceof gast_2.Alternation) {\n    // each sub definition in alternation is a FLAT\n    result = (0, flatten_1.default)((0, map_1.default)(firstProd.definition, function (currSubDef) {\n      return getFirstNoneTerminal(currSubDef.definition);\n    }));\n  } else if (firstProd instanceof gast_2.Terminal) {// nothing to see, move along\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n\n  var isFirstOptional = (0, gast_1.isOptionalProd)(firstProd);\n  var hasMore = definition.length > 1;\n\n  if (isFirstOptional && hasMore) {\n    var rest = (0, drop_1.default)(definition);\n    return result.concat(getFirstNoneTerminal(rest));\n  } else {\n    return result;\n  }\n}\n\nexports.getFirstNoneTerminal = getFirstNoneTerminal;\n\nvar OrCollector =\n/** @class */\nfunction (_super) {\n  __extends(OrCollector, _super);\n\n  function OrCollector() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.alternations = [];\n    return _this;\n  }\n\n  OrCollector.prototype.visitAlternation = function (node) {\n    this.alternations.push(node);\n  };\n\n  return OrCollector;\n}(gast_3.GAstVisitor);\n\nfunction validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n  var orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  var ors = orCollector.alternations;\n  var errors = (0, flatMap_1.default)(ors, function (currOr) {\n    var exceptLast = (0, dropRight_1.default)(currOr.definition);\n    return (0, flatMap_1.default)(exceptLast, function (currAlternative, currAltIdx) {\n      var possibleFirstInAlt = (0, interpreter_1.nextPossibleTokensAfter)([currAlternative], [], tokens_1.tokenStructuredMatcher, 1);\n\n      if ((0, isEmpty_1.default)(possibleFirstInAlt)) {\n        return [{\n          message: errMsgProvider.buildEmptyAlternationError({\n            topLevelRule: topLevelRule,\n            alternation: currOr,\n            emptyChoiceIdx: currAltIdx\n          }),\n          type: parser_1.ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx,\n          alternative: currAltIdx + 1\n        }];\n      } else {\n        return [];\n      }\n    });\n  });\n  return errors;\n}\n\nexports.validateEmptyOrAlternative = validateEmptyOrAlternative;\n\nfunction validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {\n  var orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  var ors = orCollector.alternations; // New Handling of ignoring ambiguities\n  // - https://github.com/chevrotain/chevrotain/issues/869\n\n  ors = (0, reject_1.default)(ors, function (currOr) {\n    return currOr.ignoreAmbiguities === true;\n  });\n  var errors = (0, flatMap_1.default)(ors, function (currOr) {\n    var currOccurrence = currOr.idx;\n    var actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n    var alternatives = (0, lookahead_1.getLookaheadPathsForOr)(currOccurrence, topLevelRule, actualMaxLookahead, currOr);\n    var altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n    var altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n    return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n  });\n  return errors;\n}\n\nexports.validateAmbiguousAlternationAlternatives = validateAmbiguousAlternationAlternatives;\n\nvar RepetitionCollector =\n/** @class */\nfunction (_super) {\n  __extends(RepetitionCollector, _super);\n\n  function RepetitionCollector() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.allProductions = [];\n    return _this;\n  }\n\n  RepetitionCollector.prototype.visitRepetitionWithSeparator = function (manySep) {\n    this.allProductions.push(manySep);\n  };\n\n  RepetitionCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {\n    this.allProductions.push(atLeastOne);\n  };\n\n  RepetitionCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n    this.allProductions.push(atLeastOneSep);\n  };\n\n  RepetitionCollector.prototype.visitRepetition = function (many) {\n    this.allProductions.push(many);\n  };\n\n  return RepetitionCollector;\n}(gast_3.GAstVisitor);\n\nexports.RepetitionCollector = RepetitionCollector;\n\nfunction validateTooManyAlts(topLevelRule, errMsgProvider) {\n  var orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  var ors = orCollector.alternations;\n  var errors = (0, flatMap_1.default)(ors, function (currOr) {\n    if (currOr.definition.length > 255) {\n      return [{\n        message: errMsgProvider.buildTooManyAlternativesError({\n          topLevelRule: topLevelRule,\n          alternation: currOr\n        }),\n        type: parser_1.ParserDefinitionErrorType.TOO_MANY_ALTS,\n        ruleName: topLevelRule.name,\n        occurrence: currOr.idx\n      }];\n    } else {\n      return [];\n    }\n  });\n  return errors;\n}\n\nexports.validateTooManyAlts = validateTooManyAlts;\n\nfunction validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n  var errors = [];\n  (0, forEach_1.default)(topLevelRules, function (currTopRule) {\n    var collectorVisitor = new RepetitionCollector();\n    currTopRule.accept(collectorVisitor);\n    var allRuleProductions = collectorVisitor.allProductions;\n    (0, forEach_1.default)(allRuleProductions, function (currProd) {\n      var prodType = (0, lookahead_1.getProdType)(currProd);\n      var actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n      var currOccurrence = currProd.idx;\n      var paths = (0, lookahead_1.getLookaheadPathsForOptionalProd)(currOccurrence, currTopRule, prodType, actualMaxLookahead);\n      var pathsInsideProduction = paths[0];\n\n      if ((0, isEmpty_1.default)((0, flatten_1.default)(pathsInsideProduction))) {\n        var errMsg = errMsgProvider.buildEmptyRepetitionError({\n          topLevelRule: currTopRule,\n          repetition: currProd\n        });\n        errors.push({\n          message: errMsg,\n          type: parser_1.ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n          ruleName: currTopRule.name\n        });\n      }\n    });\n  });\n  return errors;\n}\n\nexports.validateSomeNonEmptyLookaheadPath = validateSomeNonEmptyLookaheadPath;\n\nfunction checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n  var foundAmbiguousPaths = [];\n  var identicalAmbiguities = (0, reduce_1.default)(alternatives, function (result, currAlt, currAltIdx) {\n    // ignore (skip) ambiguities with this alternative\n    if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n      return result;\n    }\n\n    (0, forEach_1.default)(currAlt, function (currPath) {\n      var altsCurrPathAppearsIn = [currAltIdx];\n      (0, forEach_1.default)(alternatives, function (currOtherAlt, currOtherAltIdx) {\n        if (currAltIdx !== currOtherAltIdx && (0, lookahead_1.containsPath)(currOtherAlt, currPath) && // ignore (skip) ambiguities with this \"other\" alternative\n        alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true) {\n          altsCurrPathAppearsIn.push(currOtherAltIdx);\n        }\n      });\n\n      if (altsCurrPathAppearsIn.length > 1 && !(0, lookahead_1.containsPath)(foundAmbiguousPaths, currPath)) {\n        foundAmbiguousPaths.push(currPath);\n        result.push({\n          alts: altsCurrPathAppearsIn,\n          path: currPath\n        });\n      }\n    });\n    return result;\n  }, []);\n  var currErrors = (0, map_1.default)(identicalAmbiguities, function (currAmbDescriptor) {\n    var ambgIndices = (0, map_1.default)(currAmbDescriptor.alts, function (currAltIdx) {\n      return currAltIdx + 1;\n    });\n    var currMessage = errMsgProvider.buildAlternationAmbiguityError({\n      topLevelRule: rule,\n      alternation: alternation,\n      ambiguityIndices: ambgIndices,\n      prefixPath: currAmbDescriptor.path\n    });\n    return {\n      message: currMessage,\n      type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n      ruleName: rule.name,\n      occurrence: alternation.idx,\n      alternatives: currAmbDescriptor.alts\n    };\n  });\n  return currErrors;\n}\n\nfunction checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n  // flatten\n  var pathsAndIndices = (0, reduce_1.default)(alternatives, function (result, currAlt, idx) {\n    var currPathsAndIdx = (0, map_1.default)(currAlt, function (currPath) {\n      return {\n        idx: idx,\n        path: currPath\n      };\n    });\n    return result.concat(currPathsAndIdx);\n  }, []);\n  var errors = (0, compact_1.default)((0, flatMap_1.default)(pathsAndIndices, function (currPathAndIdx) {\n    var alternativeGast = alternation.definition[currPathAndIdx.idx]; // ignore (skip) ambiguities with this alternative\n\n    if (alternativeGast.ignoreAmbiguities === true) {\n      return [];\n    }\n\n    var targetIdx = currPathAndIdx.idx;\n    var targetPath = currPathAndIdx.path;\n    var prefixAmbiguitiesPathsAndIndices = (0, filter_1.default)(pathsAndIndices, function (searchPathAndIdx) {\n      // prefix ambiguity can only be created from lower idx (higher priority) path\n      return (// ignore (skip) ambiguities with this \"other\" alternative\n        alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !== true && searchPathAndIdx.idx < targetIdx && // checking for strict prefix because identical lookaheads\n        // will be be detected using a different validation.\n        (0, lookahead_1.isStrictPrefixOfPath)(searchPathAndIdx.path, targetPath)\n      );\n    });\n    var currPathPrefixErrors = (0, map_1.default)(prefixAmbiguitiesPathsAndIndices, function (currAmbPathAndIdx) {\n      var ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n      var occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n      var message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n        topLevelRule: rule,\n        alternation: alternation,\n        ambiguityIndices: ambgIndices,\n        prefixPath: currAmbPathAndIdx.path\n      });\n      return {\n        message: message,\n        type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n        ruleName: rule.name,\n        occurrence: occurrence,\n        alternatives: ambgIndices\n      };\n    });\n    return currPathPrefixErrors;\n  }));\n  return errors;\n}\n\nexports.checkPrefixAlternativesAmbiguities = checkPrefixAlternativesAmbiguities;\n\nfunction checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n  var errors = [];\n  var tokenNames = (0, map_1.default)(tokenTypes, function (currToken) {\n    return currToken.name;\n  });\n  (0, forEach_1.default)(topLevels, function (currRule) {\n    var currRuleName = currRule.name;\n\n    if ((0, includes_1.default)(tokenNames, currRuleName)) {\n      var errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n      errors.push({\n        message: errMsg,\n        type: parser_1.ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n        ruleName: currRuleName\n      });\n    }\n  });\n  return errors;\n}","map":{"version":3,"sources":["../../../../src/parse/grammar/checks.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkPrefixAlternativesAmbiguities = exports.validateSomeNonEmptyLookaheadPath = exports.validateTooManyAlts = exports.RepetitionCollector = exports.validateAmbiguousAlternationAlternatives = exports.validateEmptyOrAlternative = exports.getFirstNoneTerminal = exports.validateNoLeftRecursion = exports.validateRuleIsOverridden = exports.validateRuleDoesNotAlreadyExist = exports.OccurrenceValidationCollector = exports.identifyProductionForDuplicates = exports.validateGrammar = exports.validateLookahead = void 0;\nvar first_1 = __importDefault(require(\"lodash/first\"));\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\nvar drop_1 = __importDefault(require(\"lodash/drop\"));\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\nvar filter_1 = __importDefault(require(\"lodash/filter\"));\nvar reject_1 = __importDefault(require(\"lodash/reject\"));\nvar difference_1 = __importDefault(require(\"lodash/difference\"));\nvar map_1 = __importDefault(require(\"lodash/map\"));\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\nvar groupBy_1 = __importDefault(require(\"lodash/groupBy\"));\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\nvar pickBy_1 = __importDefault(require(\"lodash/pickBy\"));\nvar values_1 = __importDefault(require(\"lodash/values\"));\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\nvar flatMap_1 = __importDefault(require(\"lodash/flatMap\"));\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\nvar parser_1 = require(\"../parser/parser\");\nvar gast_1 = require(\"@chevrotain/gast\");\nvar lookahead_1 = require(\"./lookahead\");\nvar interpreter_1 = require(\"./interpreter\");\nvar gast_2 = require(\"@chevrotain/gast\");\nvar gast_3 = require(\"@chevrotain/gast\");\nvar dropRight_1 = __importDefault(require(\"lodash/dropRight\"));\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\nvar tokens_1 = require(\"../../scan/tokens\");\nfunction validateLookahead(options) {\n    var lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n        rules: options.rules,\n        tokenTypes: options.tokenTypes,\n        grammarName: options.grammarName\n    });\n    return (0, map_1.default)(lookaheadValidationErrorMessages, function (errorMessage) { return (__assign({ type: parser_1.ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION }, errorMessage)); });\n}\nexports.validateLookahead = validateLookahead;\nfunction validateGrammar(topLevels, tokenTypes, errMsgProvider, grammarName) {\n    var duplicateErrors = (0, flatMap_1.default)(topLevels, function (currTopLevel) { return validateDuplicateProductions(currTopLevel, errMsgProvider); });\n    var termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);\n    var tooManyAltsErrors = (0, flatMap_1.default)(topLevels, function (curRule) {\n        return validateTooManyAlts(curRule, errMsgProvider);\n    });\n    var duplicateRulesError = (0, flatMap_1.default)(topLevels, function (curRule) {\n        return validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider);\n    });\n    return duplicateErrors.concat(termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError);\n}\nexports.validateGrammar = validateGrammar;\nfunction validateDuplicateProductions(topLevelRule, errMsgProvider) {\n    var collectorVisitor = new OccurrenceValidationCollector();\n    topLevelRule.accept(collectorVisitor);\n    var allRuleProductions = collectorVisitor.allProductions;\n    var productionGroups = (0, groupBy_1.default)(allRuleProductions, identifyProductionForDuplicates);\n    var duplicates = (0, pickBy_1.default)(productionGroups, function (currGroup) {\n        return currGroup.length > 1;\n    });\n    var errors = (0, map_1.default)((0, values_1.default)(duplicates), function (currDuplicates) {\n        var firstProd = (0, first_1.default)(currDuplicates);\n        var msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);\n        var dslName = (0, gast_1.getProductionDslName)(firstProd);\n        var defError = {\n            message: msg,\n            type: parser_1.ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n            ruleName: topLevelRule.name,\n            dslName: dslName,\n            occurrence: firstProd.idx\n        };\n        var param = getExtraProductionArgument(firstProd);\n        if (param) {\n            defError.parameter = param;\n        }\n        return defError;\n    });\n    return errors;\n}\nfunction identifyProductionForDuplicates(prod) {\n    return \"\".concat((0, gast_1.getProductionDslName)(prod), \"_#_\").concat(prod.idx, \"_#_\").concat(getExtraProductionArgument(prod));\n}\nexports.identifyProductionForDuplicates = identifyProductionForDuplicates;\nfunction getExtraProductionArgument(prod) {\n    if (prod instanceof gast_2.Terminal) {\n        return prod.terminalType.name;\n    }\n    else if (prod instanceof gast_2.NonTerminal) {\n        return prod.nonTerminalName;\n    }\n    else {\n        return \"\";\n    }\n}\nvar OccurrenceValidationCollector = /** @class */ (function (_super) {\n    __extends(OccurrenceValidationCollector, _super);\n    function OccurrenceValidationCollector() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.allProductions = [];\n        return _this;\n    }\n    OccurrenceValidationCollector.prototype.visitNonTerminal = function (subrule) {\n        this.allProductions.push(subrule);\n    };\n    OccurrenceValidationCollector.prototype.visitOption = function (option) {\n        this.allProductions.push(option);\n    };\n    OccurrenceValidationCollector.prototype.visitRepetitionWithSeparator = function (manySep) {\n        this.allProductions.push(manySep);\n    };\n    OccurrenceValidationCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    };\n    OccurrenceValidationCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    };\n    OccurrenceValidationCollector.prototype.visitRepetition = function (many) {\n        this.allProductions.push(many);\n    };\n    OccurrenceValidationCollector.prototype.visitAlternation = function (or) {\n        this.allProductions.push(or);\n    };\n    OccurrenceValidationCollector.prototype.visitTerminal = function (terminal) {\n        this.allProductions.push(terminal);\n    };\n    return OccurrenceValidationCollector;\n}(gast_3.GAstVisitor));\nexports.OccurrenceValidationCollector = OccurrenceValidationCollector;\nfunction validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n    var errors = [];\n    var occurrences = (0, reduce_1.default)(allRules, function (result, curRule) {\n        if (curRule.name === rule.name) {\n            return result + 1;\n        }\n        return result;\n    }, 0);\n    if (occurrences > 1) {\n        var errMsg = errMsgProvider.buildDuplicateRuleNameError({\n            topLevelRule: rule,\n            grammarName: className\n        });\n        errors.push({\n            message: errMsg,\n            type: parser_1.ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n            ruleName: rule.name\n        });\n    }\n    return errors;\n}\nexports.validateRuleDoesNotAlreadyExist = validateRuleDoesNotAlreadyExist;\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nfunction validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n    var errors = [];\n    var errMsg;\n    if (!(0, includes_1.default)(definedRulesNames, ruleName)) {\n        errMsg =\n            \"Invalid rule override, rule: ->\".concat(ruleName, \"<- cannot be overridden in the grammar: ->\").concat(className, \"<-\") +\n                \"as it is not defined in any of the super grammars \";\n        errors.push({\n            message: errMsg,\n            type: parser_1.ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n            ruleName: ruleName\n        });\n    }\n    return errors;\n}\nexports.validateRuleIsOverridden = validateRuleIsOverridden;\nfunction validateNoLeftRecursion(topRule, currRule, errMsgProvider, path) {\n    if (path === void 0) { path = []; }\n    var errors = [];\n    var nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n    if ((0, isEmpty_1.default)(nextNonTerminals)) {\n        return [];\n    }\n    else {\n        var ruleName = topRule.name;\n        var foundLeftRecursion = (0, includes_1.default)(nextNonTerminals, topRule);\n        if (foundLeftRecursion) {\n            errors.push({\n                message: errMsgProvider.buildLeftRecursionError({\n                    topLevelRule: topRule,\n                    leftRecursionPath: path\n                }),\n                type: parser_1.ParserDefinitionErrorType.LEFT_RECURSION,\n                ruleName: ruleName\n            });\n        }\n        // we are only looking for cyclic paths leading back to the specific topRule\n        // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n        var validNextSteps = (0, difference_1.default)(nextNonTerminals, path.concat([topRule]));\n        var errorsFromNextSteps = (0, flatMap_1.default)(validNextSteps, function (currRefRule) {\n            var newPath = (0, clone_1.default)(path);\n            newPath.push(currRefRule);\n            return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);\n        });\n        return errors.concat(errorsFromNextSteps);\n    }\n}\nexports.validateNoLeftRecursion = validateNoLeftRecursion;\nfunction getFirstNoneTerminal(definition) {\n    var result = [];\n    if ((0, isEmpty_1.default)(definition)) {\n        return result;\n    }\n    var firstProd = (0, first_1.default)(definition);\n    /* istanbul ignore else */\n    if (firstProd instanceof gast_2.NonTerminal) {\n        result.push(firstProd.referencedRule);\n    }\n    else if (firstProd instanceof gast_2.Alternative ||\n        firstProd instanceof gast_2.Option ||\n        firstProd instanceof gast_2.RepetitionMandatory ||\n        firstProd instanceof gast_2.RepetitionMandatoryWithSeparator ||\n        firstProd instanceof gast_2.RepetitionWithSeparator ||\n        firstProd instanceof gast_2.Repetition) {\n        result = result.concat(getFirstNoneTerminal(firstProd.definition));\n    }\n    else if (firstProd instanceof gast_2.Alternation) {\n        // each sub definition in alternation is a FLAT\n        result = (0, flatten_1.default)((0, map_1.default)(firstProd.definition, function (currSubDef) {\n            return getFirstNoneTerminal(currSubDef.definition);\n        }));\n    }\n    else if (firstProd instanceof gast_2.Terminal) {\n        // nothing to see, move along\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n    var isFirstOptional = (0, gast_1.isOptionalProd)(firstProd);\n    var hasMore = definition.length > 1;\n    if (isFirstOptional && hasMore) {\n        var rest = (0, drop_1.default)(definition);\n        return result.concat(getFirstNoneTerminal(rest));\n    }\n    else {\n        return result;\n    }\n}\nexports.getFirstNoneTerminal = getFirstNoneTerminal;\nvar OrCollector = /** @class */ (function (_super) {\n    __extends(OrCollector, _super);\n    function OrCollector() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.alternations = [];\n        return _this;\n    }\n    OrCollector.prototype.visitAlternation = function (node) {\n        this.alternations.push(node);\n    };\n    return OrCollector;\n}(gast_3.GAstVisitor));\nfunction validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n    var orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    var ors = orCollector.alternations;\n    var errors = (0, flatMap_1.default)(ors, function (currOr) {\n        var exceptLast = (0, dropRight_1.default)(currOr.definition);\n        return (0, flatMap_1.default)(exceptLast, function (currAlternative, currAltIdx) {\n            var possibleFirstInAlt = (0, interpreter_1.nextPossibleTokensAfter)([currAlternative], [], tokens_1.tokenStructuredMatcher, 1);\n            if ((0, isEmpty_1.default)(possibleFirstInAlt)) {\n                return [\n                    {\n                        message: errMsgProvider.buildEmptyAlternationError({\n                            topLevelRule: topLevelRule,\n                            alternation: currOr,\n                            emptyChoiceIdx: currAltIdx\n                        }),\n                        type: parser_1.ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n                        ruleName: topLevelRule.name,\n                        occurrence: currOr.idx,\n                        alternative: currAltIdx + 1\n                    }\n                ];\n            }\n            else {\n                return [];\n            }\n        });\n    });\n    return errors;\n}\nexports.validateEmptyOrAlternative = validateEmptyOrAlternative;\nfunction validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {\n    var orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    var ors = orCollector.alternations;\n    // New Handling of ignoring ambiguities\n    // - https://github.com/chevrotain/chevrotain/issues/869\n    ors = (0, reject_1.default)(ors, function (currOr) { return currOr.ignoreAmbiguities === true; });\n    var errors = (0, flatMap_1.default)(ors, function (currOr) {\n        var currOccurrence = currOr.idx;\n        var actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n        var alternatives = (0, lookahead_1.getLookaheadPathsForOr)(currOccurrence, topLevelRule, actualMaxLookahead, currOr);\n        var altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        var altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n        return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n    });\n    return errors;\n}\nexports.validateAmbiguousAlternationAlternatives = validateAmbiguousAlternationAlternatives;\nvar RepetitionCollector = /** @class */ (function (_super) {\n    __extends(RepetitionCollector, _super);\n    function RepetitionCollector() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.allProductions = [];\n        return _this;\n    }\n    RepetitionCollector.prototype.visitRepetitionWithSeparator = function (manySep) {\n        this.allProductions.push(manySep);\n    };\n    RepetitionCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {\n        this.allProductions.push(atLeastOne);\n    };\n    RepetitionCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {\n        this.allProductions.push(atLeastOneSep);\n    };\n    RepetitionCollector.prototype.visitRepetition = function (many) {\n        this.allProductions.push(many);\n    };\n    return RepetitionCollector;\n}(gast_3.GAstVisitor));\nexports.RepetitionCollector = RepetitionCollector;\nfunction validateTooManyAlts(topLevelRule, errMsgProvider) {\n    var orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    var ors = orCollector.alternations;\n    var errors = (0, flatMap_1.default)(ors, function (currOr) {\n        if (currOr.definition.length > 255) {\n            return [\n                {\n                    message: errMsgProvider.buildTooManyAlternativesError({\n                        topLevelRule: topLevelRule,\n                        alternation: currOr\n                    }),\n                    type: parser_1.ParserDefinitionErrorType.TOO_MANY_ALTS,\n                    ruleName: topLevelRule.name,\n                    occurrence: currOr.idx\n                }\n            ];\n        }\n        else {\n            return [];\n        }\n    });\n    return errors;\n}\nexports.validateTooManyAlts = validateTooManyAlts;\nfunction validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n    var errors = [];\n    (0, forEach_1.default)(topLevelRules, function (currTopRule) {\n        var collectorVisitor = new RepetitionCollector();\n        currTopRule.accept(collectorVisitor);\n        var allRuleProductions = collectorVisitor.allProductions;\n        (0, forEach_1.default)(allRuleProductions, function (currProd) {\n            var prodType = (0, lookahead_1.getProdType)(currProd);\n            var actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n            var currOccurrence = currProd.idx;\n            var paths = (0, lookahead_1.getLookaheadPathsForOptionalProd)(currOccurrence, currTopRule, prodType, actualMaxLookahead);\n            var pathsInsideProduction = paths[0];\n            if ((0, isEmpty_1.default)((0, flatten_1.default)(pathsInsideProduction))) {\n                var errMsg = errMsgProvider.buildEmptyRepetitionError({\n                    topLevelRule: currTopRule,\n                    repetition: currProd\n                });\n                errors.push({\n                    message: errMsg,\n                    type: parser_1.ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n                    ruleName: currTopRule.name\n                });\n            }\n        });\n    });\n    return errors;\n}\nexports.validateSomeNonEmptyLookaheadPath = validateSomeNonEmptyLookaheadPath;\nfunction checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    var foundAmbiguousPaths = [];\n    var identicalAmbiguities = (0, reduce_1.default)(alternatives, function (result, currAlt, currAltIdx) {\n        // ignore (skip) ambiguities with this alternative\n        if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n            return result;\n        }\n        (0, forEach_1.default)(currAlt, function (currPath) {\n            var altsCurrPathAppearsIn = [currAltIdx];\n            (0, forEach_1.default)(alternatives, function (currOtherAlt, currOtherAltIdx) {\n                if (currAltIdx !== currOtherAltIdx &&\n                    (0, lookahead_1.containsPath)(currOtherAlt, currPath) &&\n                    // ignore (skip) ambiguities with this \"other\" alternative\n                    alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true) {\n                    altsCurrPathAppearsIn.push(currOtherAltIdx);\n                }\n            });\n            if (altsCurrPathAppearsIn.length > 1 &&\n                !(0, lookahead_1.containsPath)(foundAmbiguousPaths, currPath)) {\n                foundAmbiguousPaths.push(currPath);\n                result.push({\n                    alts: altsCurrPathAppearsIn,\n                    path: currPath\n                });\n            }\n        });\n        return result;\n    }, []);\n    var currErrors = (0, map_1.default)(identicalAmbiguities, function (currAmbDescriptor) {\n        var ambgIndices = (0, map_1.default)(currAmbDescriptor.alts, function (currAltIdx) { return currAltIdx + 1; });\n        var currMessage = errMsgProvider.buildAlternationAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbDescriptor.path\n        });\n        return {\n            message: currMessage,\n            type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n            ruleName: rule.name,\n            occurrence: alternation.idx,\n            alternatives: currAmbDescriptor.alts\n        };\n    });\n    return currErrors;\n}\nfunction checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    // flatten\n    var pathsAndIndices = (0, reduce_1.default)(alternatives, function (result, currAlt, idx) {\n        var currPathsAndIdx = (0, map_1.default)(currAlt, function (currPath) {\n            return { idx: idx, path: currPath };\n        });\n        return result.concat(currPathsAndIdx);\n    }, []);\n    var errors = (0, compact_1.default)((0, flatMap_1.default)(pathsAndIndices, function (currPathAndIdx) {\n        var alternativeGast = alternation.definition[currPathAndIdx.idx];\n        // ignore (skip) ambiguities with this alternative\n        if (alternativeGast.ignoreAmbiguities === true) {\n            return [];\n        }\n        var targetIdx = currPathAndIdx.idx;\n        var targetPath = currPathAndIdx.path;\n        var prefixAmbiguitiesPathsAndIndices = (0, filter_1.default)(pathsAndIndices, function (searchPathAndIdx) {\n            // prefix ambiguity can only be created from lower idx (higher priority) path\n            return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n                true &&\n                searchPathAndIdx.idx < targetIdx &&\n                // checking for strict prefix because identical lookaheads\n                // will be be detected using a different validation.\n                (0, lookahead_1.isStrictPrefixOfPath)(searchPathAndIdx.path, targetPath));\n        });\n        var currPathPrefixErrors = (0, map_1.default)(prefixAmbiguitiesPathsAndIndices, function (currAmbPathAndIdx) {\n            var ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n            var occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n            var message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n                topLevelRule: rule,\n                alternation: alternation,\n                ambiguityIndices: ambgIndices,\n                prefixPath: currAmbPathAndIdx.path\n            });\n            return {\n                message: message,\n                type: parser_1.ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n                ruleName: rule.name,\n                occurrence: occurrence,\n                alternatives: ambgIndices\n            };\n        });\n        return currPathPrefixErrors;\n    }));\n    return errors;\n}\nexports.checkPrefixAlternativesAmbiguities = checkPrefixAlternativesAmbiguities;\nfunction checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n    var errors = [];\n    var tokenNames = (0, map_1.default)(tokenTypes, function (currToken) { return currToken.name; });\n    (0, forEach_1.default)(topLevels, function (currRule) {\n        var currRuleName = currRule.name;\n        if ((0, includes_1.default)(tokenNames, currRuleName)) {\n            var errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n            errors.push({\n                message: errMsg,\n                type: parser_1.ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n                ruleName: currRuleName\n            });\n        }\n    });\n    return errors;\n}\n//# sourceMappingURL=checks.js.map"]},"metadata":{},"sourceType":"script"}