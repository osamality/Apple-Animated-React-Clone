{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nconst GridMaterial = shaderMaterial({\n  cellSize: 0.5,\n  sectionSize: 1,\n  fadeDistance: 100,\n  fadeStrength: 1,\n  cellThickness: 0.5,\n  sectionThickness: 1,\n  cellColor: new THREE.Color(),\n  sectionColor: new THREE.Color(),\n  infiniteGrid: 0,\n  followCamera: 0\n}, `varying vec3 worldPosition;\n   uniform float fadeDistance;\n   uniform float infiniteGrid;\n   uniform float followCamera;\n   void main() {\n     vec3 pos = position.xzy * (1. + fadeDistance * infiniteGrid);\n     pos.xz += (cameraPosition.xz * followCamera);\n     worldPosition = pos;\n     gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n   }`, `varying vec3 worldPosition;\n   uniform float cellSize;\n   uniform float sectionSize;\n   uniform vec3 cellColor;\n   uniform vec3 sectionColor;\n   uniform float fadeDistance;\n   uniform float fadeStrength;\n   uniform float cellThickness;\n   uniform float sectionThickness;\n   uniform float infiniteGrid;\n   float getGrid(float size, float thickness) {\n     vec2 r = worldPosition.xz / size;\n     vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n     float line = min(grid.x, grid.y) + 1. - thickness;\n     return 1.0 - min(line, 1.);\n   }\n   void main() {\n     float g1 = getGrid(cellSize, cellThickness);\n     float g2 = getGrid(sectionSize, sectionThickness);\n     float d = 1.0 - min(distance(cameraPosition.xz, worldPosition.xz) / fadeDistance, 1.);\n     vec3 color = mix(cellColor, sectionColor, min(1.,sectionThickness * g2));\n     gl_FragColor = vec4(color, (g1 + g2) * pow(d,fadeStrength));\n     gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);\n     if (gl_FragColor.a <= 0.0) discard;\n     #include <tonemapping_fragment>\n     #include <encodings_fragment>\n   }`);\nconst Grid = /*#__PURE__*/React.forwardRef(({\n  args,\n  cellColor = '#000000',\n  sectionColor = '#2080ff',\n  cellSize = 0.5,\n  sectionSize = 1,\n  followCamera = false,\n  infiniteGrid = false,\n  fadeDistance = 100,\n  fadeStrength = 1,\n  cellThickness = 0.5,\n  sectionThickness = 1,\n  ...props\n}, fRef) => {\n  extend({\n    GridMaterial\n  });\n  const uniforms1 = {\n    cellSize,\n    sectionSize,\n    cellColor,\n    sectionColor,\n    cellThickness,\n    sectionThickness\n  };\n  const uniforms2 = {\n    fadeDistance,\n    fadeStrength,\n    infiniteGrid,\n    followCamera\n  };\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: fRef,\n    frustumCulled: false\n  }, props), /*#__PURE__*/React.createElement(\"gridMaterial\", _extends({\n    transparent: true,\n    \"extensions-derivatives\": true,\n    side: THREE.DoubleSide\n  }, uniforms1, uniforms2)), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: args\n  }));\n});\nexport { Grid };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/core/Grid.js"],"names":["_extends","React","THREE","extend","shaderMaterial","GridMaterial","cellSize","sectionSize","fadeDistance","fadeStrength","cellThickness","sectionThickness","cellColor","Color","sectionColor","infiniteGrid","followCamera","Grid","forwardRef","args","props","fRef","uniforms1","uniforms2","createElement","ref","frustumCulled","transparent","side","DoubleSide"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AAEA,MAAMC,YAAY,GAAGD,cAAc,CAAC;AAClCE,EAAAA,QAAQ,EAAE,GADwB;AAElCC,EAAAA,WAAW,EAAE,CAFqB;AAGlCC,EAAAA,YAAY,EAAE,GAHoB;AAIlCC,EAAAA,YAAY,EAAE,CAJoB;AAKlCC,EAAAA,aAAa,EAAE,GALmB;AAMlCC,EAAAA,gBAAgB,EAAE,CANgB;AAOlCC,EAAAA,SAAS,EAAE,IAAIV,KAAK,CAACW,KAAV,EAPuB;AAQlCC,EAAAA,YAAY,EAAE,IAAIZ,KAAK,CAACW,KAAV,EARoB;AASlCE,EAAAA,YAAY,EAAE,CAToB;AAUlCC,EAAAA,YAAY,EAAE;AAVoB,CAAD,EAW/B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KApBmC,EAoB3B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KA9CmC,CAAnC;AA+CA,MAAMC,IAAI,GAAG,aAAahB,KAAK,CAACiB,UAAN,CAAiB,CAAC;AAC1CC,EAAAA,IAD0C;AAE1CP,EAAAA,SAAS,GAAG,SAF8B;AAG1CE,EAAAA,YAAY,GAAG,SAH2B;AAI1CR,EAAAA,QAAQ,GAAG,GAJ+B;AAK1CC,EAAAA,WAAW,GAAG,CAL4B;AAM1CS,EAAAA,YAAY,GAAG,KAN2B;AAO1CD,EAAAA,YAAY,GAAG,KAP2B;AAQ1CP,EAAAA,YAAY,GAAG,GAR2B;AAS1CC,EAAAA,YAAY,GAAG,CAT2B;AAU1CC,EAAAA,aAAa,GAAG,GAV0B;AAW1CC,EAAAA,gBAAgB,GAAG,CAXuB;AAY1C,KAAGS;AAZuC,CAAD,EAaxCC,IAbwC,KAa/B;AACVlB,EAAAA,MAAM,CAAC;AACLE,IAAAA;AADK,GAAD,CAAN;AAGA,QAAMiB,SAAS,GAAG;AAChBhB,IAAAA,QADgB;AAEhBC,IAAAA,WAFgB;AAGhBK,IAAAA,SAHgB;AAIhBE,IAAAA,YAJgB;AAKhBJ,IAAAA,aALgB;AAMhBC,IAAAA;AANgB,GAAlB;AAQA,QAAMY,SAAS,GAAG;AAChBf,IAAAA,YADgB;AAEhBC,IAAAA,YAFgB;AAGhBM,IAAAA,YAHgB;AAIhBC,IAAAA;AAJgB,GAAlB;AAMA,SAAO,aAAaf,KAAK,CAACuB,aAAN,CAAoB,MAApB,EAA4BxB,QAAQ,CAAC;AACvDyB,IAAAA,GAAG,EAAEJ,IADkD;AAEvDK,IAAAA,aAAa,EAAE;AAFwC,GAAD,EAGrDN,KAHqD,CAApC,EAGT,aAAanB,KAAK,CAACuB,aAAN,CAAoB,cAApB,EAAoCxB,QAAQ,CAAC;AACnE2B,IAAAA,WAAW,EAAE,IADsD;AAEnE,8BAA0B,IAFyC;AAGnEC,IAAAA,IAAI,EAAE1B,KAAK,CAAC2B;AAHuD,GAAD,EAIjEP,SAJiE,EAItDC,SAJsD,CAA5C,CAHJ,EAOO,aAAatB,KAAK,CAACuB,aAAN,CAAoB,eAApB,EAAqC;AAC3EL,IAAAA,IAAI,EAAEA;AADqE,GAArC,CAPpB,CAApB;AAUD,CAzCyB,CAA1B;AA2CA,SAASF,IAAT","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\n\nconst GridMaterial = shaderMaterial({\n  cellSize: 0.5,\n  sectionSize: 1,\n  fadeDistance: 100,\n  fadeStrength: 1,\n  cellThickness: 0.5,\n  sectionThickness: 1,\n  cellColor: new THREE.Color(),\n  sectionColor: new THREE.Color(),\n  infiniteGrid: 0,\n  followCamera: 0\n}, `varying vec3 worldPosition;\n   uniform float fadeDistance;\n   uniform float infiniteGrid;\n   uniform float followCamera;\n   void main() {\n     vec3 pos = position.xzy * (1. + fadeDistance * infiniteGrid);\n     pos.xz += (cameraPosition.xz * followCamera);\n     worldPosition = pos;\n     gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n   }`, `varying vec3 worldPosition;\n   uniform float cellSize;\n   uniform float sectionSize;\n   uniform vec3 cellColor;\n   uniform vec3 sectionColor;\n   uniform float fadeDistance;\n   uniform float fadeStrength;\n   uniform float cellThickness;\n   uniform float sectionThickness;\n   uniform float infiniteGrid;\n   float getGrid(float size, float thickness) {\n     vec2 r = worldPosition.xz / size;\n     vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n     float line = min(grid.x, grid.y) + 1. - thickness;\n     return 1.0 - min(line, 1.);\n   }\n   void main() {\n     float g1 = getGrid(cellSize, cellThickness);\n     float g2 = getGrid(sectionSize, sectionThickness);\n     float d = 1.0 - min(distance(cameraPosition.xz, worldPosition.xz) / fadeDistance, 1.);\n     vec3 color = mix(cellColor, sectionColor, min(1.,sectionThickness * g2));\n     gl_FragColor = vec4(color, (g1 + g2) * pow(d,fadeStrength));\n     gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);\n     if (gl_FragColor.a <= 0.0) discard;\n     #include <tonemapping_fragment>\n     #include <encodings_fragment>\n   }`);\nconst Grid = /*#__PURE__*/React.forwardRef(({\n  args,\n  cellColor = '#000000',\n  sectionColor = '#2080ff',\n  cellSize = 0.5,\n  sectionSize = 1,\n  followCamera = false,\n  infiniteGrid = false,\n  fadeDistance = 100,\n  fadeStrength = 1,\n  cellThickness = 0.5,\n  sectionThickness = 1,\n  ...props\n}, fRef) => {\n  extend({\n    GridMaterial\n  });\n  const uniforms1 = {\n    cellSize,\n    sectionSize,\n    cellColor,\n    sectionColor,\n    cellThickness,\n    sectionThickness\n  };\n  const uniforms2 = {\n    fadeDistance,\n    fadeStrength,\n    infiniteGrid,\n    followCamera\n  };\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: fRef,\n    frustumCulled: false\n  }, props), /*#__PURE__*/React.createElement(\"gridMaterial\", _extends({\n    transparent: true,\n    \"extensions-derivatives\": true,\n    side: THREE.DoubleSide\n  }, uniforms1, uniforms2)), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: args\n  }));\n});\n\nexport { Grid };\n"]},"metadata":{},"sourceType":"module"}