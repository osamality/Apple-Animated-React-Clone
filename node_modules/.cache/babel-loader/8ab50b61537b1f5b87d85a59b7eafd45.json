{"ast":null,"code":"import { Loader, HalfFloatType, CubeTexture, LinearEncoding, LinearFilter, FloatType, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\n\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = HalfFloatType;\n  }\n\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n\n    const texture = new CubeTexture();\n    texture.type = this.type;\n\n    switch (texture.type) {\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n\n    const scope = this;\n    let loaded = 0;\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n\n        if (texData.data !== undefined) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n\n    return texture;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n\n}\n\nexport { HDRCubeTextureLoader };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/loaders/HDRCubeTextureLoader.js"],"names":["Loader","HalfFloatType","CubeTexture","LinearEncoding","LinearFilter","FloatType","FileLoader","DataTexture","RGBELoader","HDRCubeTextureLoader","constructor","manager","hdrLoader","type","load","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","encoding","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","setPath","path","setResponseType","setWithCredentials","withCredentials","buffer","texData","parse","data","undefined","dataTexture","width","height","format","images","needsUpdate","length","value"],"mappings":"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","sourcesContent":["import { Loader, HalfFloatType, CubeTexture, LinearEncoding, LinearFilter, FloatType, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\n\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = HalfFloatType;\n  }\n\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n\n    const texture = new CubeTexture();\n    texture.type = this.type;\n\n    switch (texture.type) {\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n\n    const scope = this;\n    let loaded = 0;\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n\n        if (texData.data !== undefined) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n\n    return texture;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n\n}\n\nexport { HDRCubeTextureLoader };\n"]},"metadata":{},"sourceType":"module"}