{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, Color, WebGLRenderTarget, MeshDepthMaterial, DoubleSide, RGBADepthPacking, NoBlending, UniformsUtils, ShaderMaterial, Matrix4, Vector3, AdditiveBlending } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass OutlinePass extends Pass {\n  constructor(resolution, scene, camera, selectedObjects) {\n    super();\n\n    _defineProperty(this, \"renderScene\", void 0);\n\n    _defineProperty(this, \"renderCamera\", void 0);\n\n    _defineProperty(this, \"selectedObjects\", void 0);\n\n    _defineProperty(this, \"visibleEdgeColor\", void 0);\n\n    _defineProperty(this, \"hiddenEdgeColor\", void 0);\n\n    _defineProperty(this, \"edgeGlow\", void 0);\n\n    _defineProperty(this, \"usePatternTexture\", void 0);\n\n    _defineProperty(this, \"edgeThickness\", void 0);\n\n    _defineProperty(this, \"edgeStrength\", void 0);\n\n    _defineProperty(this, \"downSampleRatio\", void 0);\n\n    _defineProperty(this, \"pulsePeriod\", void 0);\n\n    _defineProperty(this, \"resolution\", void 0);\n\n    _defineProperty(this, \"renderTargetMaskBuffer\", void 0);\n\n    _defineProperty(this, \"depthMaterial\", void 0);\n\n    _defineProperty(this, \"prepareMaskMaterial\", void 0);\n\n    _defineProperty(this, \"renderTargetDepthBuffer\", void 0);\n\n    _defineProperty(this, \"renderTargetMaskDownSampleBuffer\", void 0);\n\n    _defineProperty(this, \"renderTargetBlurBuffer1\", void 0);\n\n    _defineProperty(this, \"renderTargetBlurBuffer2\", void 0);\n\n    _defineProperty(this, \"edgeDetectionMaterial\", void 0);\n\n    _defineProperty(this, \"renderTargetEdgeBuffer1\", void 0);\n\n    _defineProperty(this, \"renderTargetEdgeBuffer2\", void 0);\n\n    _defineProperty(this, \"separableBlurMaterial1\", void 0);\n\n    _defineProperty(this, \"separableBlurMaterial2\", void 0);\n\n    _defineProperty(this, \"overlayMaterial\", void 0);\n\n    _defineProperty(this, \"materialCopy\", void 0);\n\n    _defineProperty(this, \"oldClearAlpha\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"tempPulseColor1\", void 0);\n\n    _defineProperty(this, \"tempPulseColor2\", void 0);\n\n    _defineProperty(this, \"textureMatrix\", void 0);\n\n    _defineProperty(this, \"patternTexture\", void 0);\n\n    _defineProperty(this, \"_visibilityCache\", void 0);\n\n    _defineProperty(this, \"_oldClearColor\", void 0);\n\n    _defineProperty(this, \"copyUniforms\", void 0);\n\n    _defineProperty(this, \"BlurDirectionX\", new Vector2(1.0, 0.0));\n\n    _defineProperty(this, \"BlurDirectionY\", new Vector2(0.0, 1.0));\n\n    this.renderScene = scene;\n    this.renderCamera = camera;\n    this.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n    this.visibleEdgeColor = new Color(1, 1, 1);\n    this.hiddenEdgeColor = new Color(0.1, 0.04, 0.02);\n    this.edgeGlow = 0.0;\n    this.usePatternTexture = false;\n    this.edgeThickness = 1.0;\n    this.edgeStrength = 3.0;\n    this.downSampleRatio = 2;\n    this.pulsePeriod = 0;\n    this._visibilityCache = new Map();\n    this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n    const resx = Math.round(this.resolution.x / this.downSampleRatio);\n    const resy = Math.round(this.resolution.y / this.downSampleRatio);\n    this.renderTargetMaskBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y);\n    this.renderTargetMaskBuffer.texture.name = 'OutlinePass.mask';\n    this.renderTargetMaskBuffer.texture.generateMipmaps = false;\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.side = DoubleSide;\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.prepareMaskMaterial = this.getPrepareMaskMaterial();\n    this.prepareMaskMaterial.side = DoubleSide;\n    this.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ(this.prepareMaskMaterial.fragmentShader, this.renderCamera);\n    this.renderTargetDepthBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y);\n    this.renderTargetDepthBuffer.texture.name = 'OutlinePass.depth';\n    this.renderTargetDepthBuffer.texture.generateMipmaps = false;\n    this.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget(resx, resy);\n    this.renderTargetMaskDownSampleBuffer.texture.name = 'OutlinePass.depthDownSample';\n    this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n    this.renderTargetBlurBuffer1 = new WebGLRenderTarget(resx, resy);\n    this.renderTargetBlurBuffer1.texture.name = 'OutlinePass.blur1';\n    this.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n    this.renderTargetBlurBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2));\n    this.renderTargetBlurBuffer2.texture.name = 'OutlinePass.blur2';\n    this.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n    this.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n    this.renderTargetEdgeBuffer1 = new WebGLRenderTarget(resx, resy);\n    this.renderTargetEdgeBuffer1.texture.name = 'OutlinePass.edge1';\n    this.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n    this.renderTargetEdgeBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2));\n    this.renderTargetEdgeBuffer2.texture.name = 'OutlinePass.edge2';\n    this.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n    const MAX_EDGE_THICKNESS = 4;\n    const MAX_EDGE_GLOW = 4;\n    this.separableBlurMaterial1 = this.getSeperableBlurMaterial(MAX_EDGE_THICKNESS);\n    this.separableBlurMaterial1.uniforms['texSize'].value.set(resx, resy);\n    this.separableBlurMaterial1.uniforms['kernelRadius'].value = 1;\n    this.separableBlurMaterial2 = this.getSeperableBlurMaterial(MAX_EDGE_GLOW);\n    this.separableBlurMaterial2.uniforms['texSize'].value.set(Math.round(resx / 2), Math.round(resy / 2));\n    this.separableBlurMaterial2.uniforms['kernelRadius'].value = MAX_EDGE_GLOW; // Overlay material\n\n    this.overlayMaterial = this.getOverlayMaterial(); // copy material\n\n    if (CopyShader === undefined) console.error('THREE.OutlinePass relies on CopyShader');\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyUniforms['opacity'].value = 1.0;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.fsQuad = new FullScreenQuad(this.materialCopy);\n    this.tempPulseColor1 = new Color();\n    this.tempPulseColor2 = new Color();\n    this.textureMatrix = new Matrix4();\n\n    function replaceDepthToViewZ(string, camera) {\n      const type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n      return string.replace(/DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ');\n    }\n  }\n\n  dispose() {\n    this.renderTargetMaskBuffer.dispose();\n    this.renderTargetDepthBuffer.dispose();\n    this.renderTargetMaskDownSampleBuffer.dispose();\n    this.renderTargetBlurBuffer1.dispose();\n    this.renderTargetBlurBuffer2.dispose();\n    this.renderTargetEdgeBuffer1.dispose();\n    this.renderTargetEdgeBuffer2.dispose();\n  }\n\n  setSize(width, height) {\n    this.renderTargetMaskBuffer.setSize(width, height);\n    this.renderTargetDepthBuffer.setSize(width, height);\n    let resx = Math.round(width / this.downSampleRatio);\n    let resy = Math.round(height / this.downSampleRatio);\n    this.renderTargetMaskDownSampleBuffer.setSize(resx, resy);\n    this.renderTargetBlurBuffer1.setSize(resx, resy);\n    this.renderTargetEdgeBuffer1.setSize(resx, resy);\n    this.separableBlurMaterial1.uniforms['texSize'].value.set(resx, resy);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n    this.renderTargetBlurBuffer2.setSize(resx, resy);\n    this.renderTargetEdgeBuffer2.setSize(resx, resy);\n    this.separableBlurMaterial2.uniforms['texSize'].value.set(resx, resy);\n  }\n\n  changeVisibilityOfSelectedObjects(bVisible) {\n    const cache = this._visibilityCache;\n\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) {\n        if (bVisible === true) {\n          object.visible = cache.get(object);\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.selectedObjects.length; i++) {\n      const selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n  }\n\n  changeVisibilityOfNonSelectedObjects(bVisible) {\n    const cache = this._visibilityCache;\n    const selectedMeshes = [];\n\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) selectedMeshes.push(object);\n    }\n\n    for (let i = 0; i < this.selectedObjects.length; i++) {\n      const selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n\n    function VisibilityChangeCallBack(object) {\n      if (object.isMesh || object.isSprite) {\n        // only meshes and sprites are supported by OutlinePass\n        let bFound = false;\n\n        for (let i = 0; i < selectedMeshes.length; i++) {\n          const selectedObjectId = selectedMeshes[i].id;\n\n          if (selectedObjectId === object.id) {\n            bFound = true;\n            break;\n          }\n        }\n\n        if (bFound === false) {\n          const visibility = object.visible;\n\n          if (bVisible === false || cache.get(object) === true) {\n            object.visible = bVisible;\n          }\n\n          cache.set(object, visibility);\n        }\n      } else if (object.isPoints || object.isLine) {\n        // the visibilty of points and lines is always set to false in order to\n        // not affect the outline computation\n        if (bVisible === true) {\n          object.visible = cache.get(object); // restore\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n\n    this.renderScene.traverse(VisibilityChangeCallBack);\n  }\n\n  updateTextureMatrix() {\n    this.textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    this.textureMatrix.multiply(this.renderCamera.projectionMatrix);\n    this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (this.selectedObjects.length > 0) {\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      const oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      if (maskActive) renderer.state.buffers.stencil.setTest(false);\n      renderer.setClearColor(0xffffff, 1); // Make selected objects invisible\n\n      this.changeVisibilityOfSelectedObjects(false);\n      const currentBackground = this.renderScene.background;\n      this.renderScene.background = null; // 1. Draw Non Selected objects in the depth buffer\n\n      this.renderScene.overrideMaterial = this.depthMaterial;\n      renderer.setRenderTarget(this.renderTargetDepthBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera); // Make selected objects visible\n\n      this.changeVisibilityOfSelectedObjects(true);\n\n      this._visibilityCache.clear(); // Update Texture Matrix for Depth compare\n\n\n      this.updateTextureMatrix(); // Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n\n      this.changeVisibilityOfNonSelectedObjects(false);\n      this.renderScene.overrideMaterial = this.prepareMaskMaterial;\n      this.prepareMaskMaterial.uniforms['cameraNearFar'].value.set(this.renderCamera.near, this.renderCamera.far);\n      this.prepareMaskMaterial.uniforms['depthTexture'].value = this.renderTargetDepthBuffer.texture;\n      this.prepareMaskMaterial.uniforms['textureMatrix'].value = this.textureMatrix;\n      renderer.setRenderTarget(this.renderTargetMaskBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera);\n      this.renderScene.overrideMaterial = null;\n      this.changeVisibilityOfNonSelectedObjects(true);\n\n      this._visibilityCache.clear();\n\n      this.renderScene.background = currentBackground; // 2. Downsample to Half resolution\n\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms['tDiffuse'].value = this.renderTargetMaskBuffer.texture;\n      renderer.setRenderTarget(this.renderTargetMaskDownSampleBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.tempPulseColor1.copy(this.visibleEdgeColor);\n      this.tempPulseColor2.copy(this.hiddenEdgeColor);\n\n      if (this.pulsePeriod > 0) {\n        const scalar = (1 + 0.25) / 2 + Math.cos(performance.now() * 0.01 / this.pulsePeriod) * (1.0 - 0.25) / 2;\n        this.tempPulseColor1.multiplyScalar(scalar);\n        this.tempPulseColor2.multiplyScalar(scalar);\n      } // 3. Apply Edge Detection Pass\n\n\n      this.fsQuad.material = this.edgeDetectionMaterial;\n      this.edgeDetectionMaterial.uniforms['maskTexture'].value = this.renderTargetMaskDownSampleBuffer.texture;\n      this.edgeDetectionMaterial.uniforms['texSize'].value.set(this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height);\n      this.edgeDetectionMaterial.uniforms['visibleEdgeColor'].value = this.tempPulseColor1;\n      this.edgeDetectionMaterial.uniforms['hiddenEdgeColor'].value = this.tempPulseColor2;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer); // 4. Apply Blur on Half res\n\n      this.fsQuad.material = this.separableBlurMaterial1;\n      this.separableBlurMaterial1.uniforms['colorTexture'].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial1.uniforms['direction'].value = this.BlurDirectionX;\n      this.separableBlurMaterial1.uniforms['kernelRadius'].value = this.edgeThickness;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial1.uniforms['colorTexture'].value = this.renderTargetBlurBuffer1.texture;\n      this.separableBlurMaterial1.uniforms['direction'].value = this.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Apply Blur on quarter res\n\n      this.fsQuad.material = this.separableBlurMaterial2;\n      this.separableBlurMaterial2.uniforms['colorTexture'].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial2.uniforms['direction'].value = this.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial2.uniforms['colorTexture'].value = this.renderTargetBlurBuffer2.texture;\n      this.separableBlurMaterial2.uniforms['direction'].value = this.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Blend it additively over the input texture\n\n      this.fsQuad.material = this.overlayMaterial;\n      this.overlayMaterial.uniforms['maskTexture'].value = this.renderTargetMaskBuffer.texture;\n      this.overlayMaterial.uniforms['edgeTexture1'].value = this.renderTargetEdgeBuffer1.texture;\n      this.overlayMaterial.uniforms['edgeTexture2'].value = this.renderTargetEdgeBuffer2.texture;\n      this.overlayMaterial.uniforms['patternTexture'].value = this.patternTexture;\n      this.overlayMaterial.uniforms['edgeStrength'].value = this.edgeStrength;\n      this.overlayMaterial.uniforms['edgeGlow'].value = this.edgeGlow;\n      this.overlayMaterial.uniforms['usePatternTexture'].value = this.usePatternTexture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms['tDiffuse'].value = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    }\n  }\n\n  getPrepareMaskMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        depthTexture: {\n          value: null\n        },\n        cameraNearFar: {\n          value: new Vector2(0.5, 0.5)\n        },\n        textureMatrix: {\n          value: null\n        }\n      },\n      vertexShader: `#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tvoid main() {\n\t\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t\t#include <skinning_vertex>\n\t\t\t\t\t#include <project_vertex>\n\t\t\t\t\tvPosition = mvPosition;\n\t\t\t\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\n\t\t\t\t}`,\n      fragmentShader: `#include <packing>\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tuniform sampler2D depthTexture;\n\t\t\t\tuniform vec2 cameraNearFar;\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n\t\t\t\t}`\n    });\n  }\n\n  getEdgeDetectionMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        maskTexture: {\n          value: null\n        },\n        texSize: {\n          value: new Vector2(0.5, 0.5)\n        },\n        visibleEdgeColor: {\n          value: new Vector3(1.0, 1.0, 1.0)\n        },\n        hiddenEdgeColor: {\n          value: new Vector3(1.0, 1.0, 1.0)\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec3 visibleEdgeColor;\n\t\t\t\tuniform vec3 hiddenEdgeColor;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n\t\t\t\t}`\n    });\n  }\n\n  getSeperableBlurMaterial(maxRadius) {\n    return new ShaderMaterial({\n      defines: {\n        MAX_RADIUS: maxRadius\n      },\n      uniforms: {\n        colorTexture: {\n          value: null\n        },\n        texSize: {\n          value: new Vector2(0.5, 0.5)\n        },\n        direction: {\n          value: new Vector2(0.5, 0.5)\n        },\n        kernelRadius: {\n          value: 1.0\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float kernelRadius;\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n\t\t\t\t\tvec2 uvOffset = delta;\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\t\t\tuvOffset += delta;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\n\t\t\t\t}`\n    });\n  }\n\n  getOverlayMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        maskTexture: {\n          value: null\n        },\n        edgeTexture1: {\n          value: null\n        },\n        edgeTexture2: {\n          value: null\n        },\n        patternTexture: {\n          value: null\n        },\n        edgeStrength: {\n          value: 1.0\n        },\n        edgeGlow: {\n          value: 1.0\n        },\n        usePatternTexture: {\n          value: 0.0\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform sampler2D edgeTexture1;\n\t\t\t\tuniform sampler2D edgeTexture2;\n\t\t\t\tuniform sampler2D patternTexture;\n\t\t\t\tuniform float edgeStrength;\n\t\t\t\tuniform float edgeGlow;\n\t\t\t\tuniform bool usePatternTexture;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n\t\t\t\t\tif(usePatternTexture)\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n\t\t\t\t\tgl_FragColor = finalColor;\n\t\t\t\t}`,\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n  }\n\n}\n\nexport { OutlinePass };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/postprocessing/OutlinePass.js"],"names":["_defineProperty","Pass","FullScreenQuad","Vector2","Color","WebGLRenderTarget","MeshDepthMaterial","DoubleSide","RGBADepthPacking","NoBlending","UniformsUtils","ShaderMaterial","Matrix4","Vector3","AdditiveBlending","CopyShader","OutlinePass","constructor","resolution","scene","camera","selectedObjects","renderScene","renderCamera","undefined","visibleEdgeColor","hiddenEdgeColor","edgeGlow","usePatternTexture","edgeThickness","edgeStrength","downSampleRatio","pulsePeriod","_visibilityCache","Map","x","y","resx","Math","round","resy","renderTargetMaskBuffer","texture","name","generateMipmaps","depthMaterial","side","depthPacking","blending","prepareMaskMaterial","getPrepareMaskMaterial","fragmentShader","replaceDepthToViewZ","renderTargetDepthBuffer","renderTargetMaskDownSampleBuffer","renderTargetBlurBuffer1","renderTargetBlurBuffer2","edgeDetectionMaterial","getEdgeDetectionMaterial","renderTargetEdgeBuffer1","renderTargetEdgeBuffer2","MAX_EDGE_THICKNESS","MAX_EDGE_GLOW","separableBlurMaterial1","getSeperableBlurMaterial","uniforms","value","set","separableBlurMaterial2","overlayMaterial","getOverlayMaterial","console","error","copyShader","copyUniforms","clone","materialCopy","vertexShader","depthTest","depthWrite","transparent","enabled","needsSwap","_oldClearColor","oldClearAlpha","fsQuad","tempPulseColor1","tempPulseColor2","textureMatrix","string","type","isPerspectiveCamera","replace","dispose","setSize","width","height","changeVisibilityOfSelectedObjects","bVisible","cache","gatherSelectedMeshesCallBack","object","isMesh","visible","get","i","length","selectedObject","traverse","changeVisibilityOfNonSelectedObjects","selectedMeshes","push","VisibilityChangeCallBack","isSprite","bFound","selectedObjectId","id","visibility","isPoints","isLine","updateTextureMatrix","multiply","projectionMatrix","matrixWorldInverse","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","getClearColor","getClearAlpha","oldAutoClear","autoClear","state","buffers","stencil","setTest","setClearColor","currentBackground","background","overrideMaterial","setRenderTarget","clear","near","far","material","copy","scalar","cos","performance","now","multiplyScalar","BlurDirectionX","BlurDirectionY","patternTexture","renderToScreen","depthTexture","cameraNearFar","maskTexture","texSize","maxRadius","defines","MAX_RADIUS","colorTexture","direction","kernelRadius","edgeTexture1","edgeTexture2"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, Color, WebGLRenderTarget, MeshDepthMaterial, DoubleSide, RGBADepthPacking, NoBlending, UniformsUtils, ShaderMaterial, Matrix4, Vector3, AdditiveBlending } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass OutlinePass extends Pass {\n  constructor(resolution, scene, camera, selectedObjects) {\n    super();\n\n    _defineProperty(this, \"renderScene\", void 0);\n\n    _defineProperty(this, \"renderCamera\", void 0);\n\n    _defineProperty(this, \"selectedObjects\", void 0);\n\n    _defineProperty(this, \"visibleEdgeColor\", void 0);\n\n    _defineProperty(this, \"hiddenEdgeColor\", void 0);\n\n    _defineProperty(this, \"edgeGlow\", void 0);\n\n    _defineProperty(this, \"usePatternTexture\", void 0);\n\n    _defineProperty(this, \"edgeThickness\", void 0);\n\n    _defineProperty(this, \"edgeStrength\", void 0);\n\n    _defineProperty(this, \"downSampleRatio\", void 0);\n\n    _defineProperty(this, \"pulsePeriod\", void 0);\n\n    _defineProperty(this, \"resolution\", void 0);\n\n    _defineProperty(this, \"renderTargetMaskBuffer\", void 0);\n\n    _defineProperty(this, \"depthMaterial\", void 0);\n\n    _defineProperty(this, \"prepareMaskMaterial\", void 0);\n\n    _defineProperty(this, \"renderTargetDepthBuffer\", void 0);\n\n    _defineProperty(this, \"renderTargetMaskDownSampleBuffer\", void 0);\n\n    _defineProperty(this, \"renderTargetBlurBuffer1\", void 0);\n\n    _defineProperty(this, \"renderTargetBlurBuffer2\", void 0);\n\n    _defineProperty(this, \"edgeDetectionMaterial\", void 0);\n\n    _defineProperty(this, \"renderTargetEdgeBuffer1\", void 0);\n\n    _defineProperty(this, \"renderTargetEdgeBuffer2\", void 0);\n\n    _defineProperty(this, \"separableBlurMaterial1\", void 0);\n\n    _defineProperty(this, \"separableBlurMaterial2\", void 0);\n\n    _defineProperty(this, \"overlayMaterial\", void 0);\n\n    _defineProperty(this, \"materialCopy\", void 0);\n\n    _defineProperty(this, \"oldClearAlpha\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"tempPulseColor1\", void 0);\n\n    _defineProperty(this, \"tempPulseColor2\", void 0);\n\n    _defineProperty(this, \"textureMatrix\", void 0);\n\n    _defineProperty(this, \"patternTexture\", void 0);\n\n    _defineProperty(this, \"_visibilityCache\", void 0);\n\n    _defineProperty(this, \"_oldClearColor\", void 0);\n\n    _defineProperty(this, \"copyUniforms\", void 0);\n\n    _defineProperty(this, \"BlurDirectionX\", new Vector2(1.0, 0.0));\n\n    _defineProperty(this, \"BlurDirectionY\", new Vector2(0.0, 1.0));\n\n    this.renderScene = scene;\n    this.renderCamera = camera;\n    this.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n    this.visibleEdgeColor = new Color(1, 1, 1);\n    this.hiddenEdgeColor = new Color(0.1, 0.04, 0.02);\n    this.edgeGlow = 0.0;\n    this.usePatternTexture = false;\n    this.edgeThickness = 1.0;\n    this.edgeStrength = 3.0;\n    this.downSampleRatio = 2;\n    this.pulsePeriod = 0;\n    this._visibilityCache = new Map();\n    this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n    const resx = Math.round(this.resolution.x / this.downSampleRatio);\n    const resy = Math.round(this.resolution.y / this.downSampleRatio);\n    this.renderTargetMaskBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y);\n    this.renderTargetMaskBuffer.texture.name = 'OutlinePass.mask';\n    this.renderTargetMaskBuffer.texture.generateMipmaps = false;\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.side = DoubleSide;\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.prepareMaskMaterial = this.getPrepareMaskMaterial();\n    this.prepareMaskMaterial.side = DoubleSide;\n    this.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ(this.prepareMaskMaterial.fragmentShader, this.renderCamera);\n    this.renderTargetDepthBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y);\n    this.renderTargetDepthBuffer.texture.name = 'OutlinePass.depth';\n    this.renderTargetDepthBuffer.texture.generateMipmaps = false;\n    this.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget(resx, resy);\n    this.renderTargetMaskDownSampleBuffer.texture.name = 'OutlinePass.depthDownSample';\n    this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n    this.renderTargetBlurBuffer1 = new WebGLRenderTarget(resx, resy);\n    this.renderTargetBlurBuffer1.texture.name = 'OutlinePass.blur1';\n    this.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n    this.renderTargetBlurBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2));\n    this.renderTargetBlurBuffer2.texture.name = 'OutlinePass.blur2';\n    this.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n    this.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n    this.renderTargetEdgeBuffer1 = new WebGLRenderTarget(resx, resy);\n    this.renderTargetEdgeBuffer1.texture.name = 'OutlinePass.edge1';\n    this.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n    this.renderTargetEdgeBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2));\n    this.renderTargetEdgeBuffer2.texture.name = 'OutlinePass.edge2';\n    this.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n    const MAX_EDGE_THICKNESS = 4;\n    const MAX_EDGE_GLOW = 4;\n    this.separableBlurMaterial1 = this.getSeperableBlurMaterial(MAX_EDGE_THICKNESS);\n    this.separableBlurMaterial1.uniforms['texSize'].value.set(resx, resy);\n    this.separableBlurMaterial1.uniforms['kernelRadius'].value = 1;\n    this.separableBlurMaterial2 = this.getSeperableBlurMaterial(MAX_EDGE_GLOW);\n    this.separableBlurMaterial2.uniforms['texSize'].value.set(Math.round(resx / 2), Math.round(resy / 2));\n    this.separableBlurMaterial2.uniforms['kernelRadius'].value = MAX_EDGE_GLOW; // Overlay material\n\n    this.overlayMaterial = this.getOverlayMaterial(); // copy material\n\n    if (CopyShader === undefined) console.error('THREE.OutlinePass relies on CopyShader');\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyUniforms['opacity'].value = 1.0;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.fsQuad = new FullScreenQuad(this.materialCopy);\n    this.tempPulseColor1 = new Color();\n    this.tempPulseColor2 = new Color();\n    this.textureMatrix = new Matrix4();\n\n    function replaceDepthToViewZ(string, camera) {\n      const type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n      return string.replace(/DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ');\n    }\n  }\n\n  dispose() {\n    this.renderTargetMaskBuffer.dispose();\n    this.renderTargetDepthBuffer.dispose();\n    this.renderTargetMaskDownSampleBuffer.dispose();\n    this.renderTargetBlurBuffer1.dispose();\n    this.renderTargetBlurBuffer2.dispose();\n    this.renderTargetEdgeBuffer1.dispose();\n    this.renderTargetEdgeBuffer2.dispose();\n  }\n\n  setSize(width, height) {\n    this.renderTargetMaskBuffer.setSize(width, height);\n    this.renderTargetDepthBuffer.setSize(width, height);\n    let resx = Math.round(width / this.downSampleRatio);\n    let resy = Math.round(height / this.downSampleRatio);\n    this.renderTargetMaskDownSampleBuffer.setSize(resx, resy);\n    this.renderTargetBlurBuffer1.setSize(resx, resy);\n    this.renderTargetEdgeBuffer1.setSize(resx, resy);\n    this.separableBlurMaterial1.uniforms['texSize'].value.set(resx, resy);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n    this.renderTargetBlurBuffer2.setSize(resx, resy);\n    this.renderTargetEdgeBuffer2.setSize(resx, resy);\n    this.separableBlurMaterial2.uniforms['texSize'].value.set(resx, resy);\n  }\n\n  changeVisibilityOfSelectedObjects(bVisible) {\n    const cache = this._visibilityCache;\n\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) {\n        if (bVisible === true) {\n          object.visible = cache.get(object);\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.selectedObjects.length; i++) {\n      const selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n  }\n\n  changeVisibilityOfNonSelectedObjects(bVisible) {\n    const cache = this._visibilityCache;\n    const selectedMeshes = [];\n\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) selectedMeshes.push(object);\n    }\n\n    for (let i = 0; i < this.selectedObjects.length; i++) {\n      const selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n\n    function VisibilityChangeCallBack(object) {\n      if (object.isMesh || object.isSprite) {\n        // only meshes and sprites are supported by OutlinePass\n        let bFound = false;\n\n        for (let i = 0; i < selectedMeshes.length; i++) {\n          const selectedObjectId = selectedMeshes[i].id;\n\n          if (selectedObjectId === object.id) {\n            bFound = true;\n            break;\n          }\n        }\n\n        if (bFound === false) {\n          const visibility = object.visible;\n\n          if (bVisible === false || cache.get(object) === true) {\n            object.visible = bVisible;\n          }\n\n          cache.set(object, visibility);\n        }\n      } else if (object.isPoints || object.isLine) {\n        // the visibilty of points and lines is always set to false in order to\n        // not affect the outline computation\n        if (bVisible === true) {\n          object.visible = cache.get(object); // restore\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n\n    this.renderScene.traverse(VisibilityChangeCallBack);\n  }\n\n  updateTextureMatrix() {\n    this.textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    this.textureMatrix.multiply(this.renderCamera.projectionMatrix);\n    this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (this.selectedObjects.length > 0) {\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      const oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      if (maskActive) renderer.state.buffers.stencil.setTest(false);\n      renderer.setClearColor(0xffffff, 1); // Make selected objects invisible\n\n      this.changeVisibilityOfSelectedObjects(false);\n      const currentBackground = this.renderScene.background;\n      this.renderScene.background = null; // 1. Draw Non Selected objects in the depth buffer\n\n      this.renderScene.overrideMaterial = this.depthMaterial;\n      renderer.setRenderTarget(this.renderTargetDepthBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera); // Make selected objects visible\n\n      this.changeVisibilityOfSelectedObjects(true);\n\n      this._visibilityCache.clear(); // Update Texture Matrix for Depth compare\n\n\n      this.updateTextureMatrix(); // Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n\n      this.changeVisibilityOfNonSelectedObjects(false);\n      this.renderScene.overrideMaterial = this.prepareMaskMaterial;\n      this.prepareMaskMaterial.uniforms['cameraNearFar'].value.set(this.renderCamera.near, this.renderCamera.far);\n      this.prepareMaskMaterial.uniforms['depthTexture'].value = this.renderTargetDepthBuffer.texture;\n      this.prepareMaskMaterial.uniforms['textureMatrix'].value = this.textureMatrix;\n      renderer.setRenderTarget(this.renderTargetMaskBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera);\n      this.renderScene.overrideMaterial = null;\n      this.changeVisibilityOfNonSelectedObjects(true);\n\n      this._visibilityCache.clear();\n\n      this.renderScene.background = currentBackground; // 2. Downsample to Half resolution\n\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms['tDiffuse'].value = this.renderTargetMaskBuffer.texture;\n      renderer.setRenderTarget(this.renderTargetMaskDownSampleBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.tempPulseColor1.copy(this.visibleEdgeColor);\n      this.tempPulseColor2.copy(this.hiddenEdgeColor);\n\n      if (this.pulsePeriod > 0) {\n        const scalar = (1 + 0.25) / 2 + Math.cos(performance.now() * 0.01 / this.pulsePeriod) * (1.0 - 0.25) / 2;\n        this.tempPulseColor1.multiplyScalar(scalar);\n        this.tempPulseColor2.multiplyScalar(scalar);\n      } // 3. Apply Edge Detection Pass\n\n\n      this.fsQuad.material = this.edgeDetectionMaterial;\n      this.edgeDetectionMaterial.uniforms['maskTexture'].value = this.renderTargetMaskDownSampleBuffer.texture;\n      this.edgeDetectionMaterial.uniforms['texSize'].value.set(this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height);\n      this.edgeDetectionMaterial.uniforms['visibleEdgeColor'].value = this.tempPulseColor1;\n      this.edgeDetectionMaterial.uniforms['hiddenEdgeColor'].value = this.tempPulseColor2;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer); // 4. Apply Blur on Half res\n\n      this.fsQuad.material = this.separableBlurMaterial1;\n      this.separableBlurMaterial1.uniforms['colorTexture'].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial1.uniforms['direction'].value = this.BlurDirectionX;\n      this.separableBlurMaterial1.uniforms['kernelRadius'].value = this.edgeThickness;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial1.uniforms['colorTexture'].value = this.renderTargetBlurBuffer1.texture;\n      this.separableBlurMaterial1.uniforms['direction'].value = this.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Apply Blur on quarter res\n\n      this.fsQuad.material = this.separableBlurMaterial2;\n      this.separableBlurMaterial2.uniforms['colorTexture'].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial2.uniforms['direction'].value = this.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial2.uniforms['colorTexture'].value = this.renderTargetBlurBuffer2.texture;\n      this.separableBlurMaterial2.uniforms['direction'].value = this.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Blend it additively over the input texture\n\n      this.fsQuad.material = this.overlayMaterial;\n      this.overlayMaterial.uniforms['maskTexture'].value = this.renderTargetMaskBuffer.texture;\n      this.overlayMaterial.uniforms['edgeTexture1'].value = this.renderTargetEdgeBuffer1.texture;\n      this.overlayMaterial.uniforms['edgeTexture2'].value = this.renderTargetEdgeBuffer2.texture;\n      this.overlayMaterial.uniforms['patternTexture'].value = this.patternTexture;\n      this.overlayMaterial.uniforms['edgeStrength'].value = this.edgeStrength;\n      this.overlayMaterial.uniforms['edgeGlow'].value = this.edgeGlow;\n      this.overlayMaterial.uniforms['usePatternTexture'].value = this.usePatternTexture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms['tDiffuse'].value = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    }\n  }\n\n  getPrepareMaskMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        depthTexture: {\n          value: null\n        },\n        cameraNearFar: {\n          value: new Vector2(0.5, 0.5)\n        },\n        textureMatrix: {\n          value: null\n        }\n      },\n      vertexShader: `#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tvoid main() {\n\t\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t\t#include <skinning_vertex>\n\t\t\t\t\t#include <project_vertex>\n\t\t\t\t\tvPosition = mvPosition;\n\t\t\t\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\n\t\t\t\t}`,\n      fragmentShader: `#include <packing>\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tuniform sampler2D depthTexture;\n\t\t\t\tuniform vec2 cameraNearFar;\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n\t\t\t\t}`\n    });\n  }\n\n  getEdgeDetectionMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        maskTexture: {\n          value: null\n        },\n        texSize: {\n          value: new Vector2(0.5, 0.5)\n        },\n        visibleEdgeColor: {\n          value: new Vector3(1.0, 1.0, 1.0)\n        },\n        hiddenEdgeColor: {\n          value: new Vector3(1.0, 1.0, 1.0)\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec3 visibleEdgeColor;\n\t\t\t\tuniform vec3 hiddenEdgeColor;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n\t\t\t\t}`\n    });\n  }\n\n  getSeperableBlurMaterial(maxRadius) {\n    return new ShaderMaterial({\n      defines: {\n        MAX_RADIUS: maxRadius\n      },\n      uniforms: {\n        colorTexture: {\n          value: null\n        },\n        texSize: {\n          value: new Vector2(0.5, 0.5)\n        },\n        direction: {\n          value: new Vector2(0.5, 0.5)\n        },\n        kernelRadius: {\n          value: 1.0\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float kernelRadius;\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n\t\t\t\t\tvec2 uvOffset = delta;\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\t\t\tuvOffset += delta;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\n\t\t\t\t}`\n    });\n  }\n\n  getOverlayMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        maskTexture: {\n          value: null\n        },\n        edgeTexture1: {\n          value: null\n        },\n        edgeTexture2: {\n          value: null\n        },\n        patternTexture: {\n          value: null\n        },\n        edgeStrength: {\n          value: 1.0\n        },\n        edgeGlow: {\n          value: 1.0\n        },\n        usePatternTexture: {\n          value: 0.0\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform sampler2D edgeTexture1;\n\t\t\t\tuniform sampler2D edgeTexture2;\n\t\t\t\tuniform sampler2D patternTexture;\n\t\t\t\tuniform float edgeStrength;\n\t\t\t\tuniform float edgeGlow;\n\t\t\t\tuniform bool usePatternTexture;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n\t\t\t\t\tif(usePatternTexture)\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n\t\t\t\t\tgl_FragColor = finalColor;\n\t\t\t\t}`,\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n  }\n\n}\n\nexport { OutlinePass };\n"]},"metadata":{},"sourceType":"module"}