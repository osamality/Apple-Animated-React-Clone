{"ast":null,"code":"import Node from '../core/Node.js';\n\nclass ConvertNode extends Node {\n  constructor(node, convertTo) {\n    super();\n    this.node = node;\n    this.convertTo = convertTo;\n  }\n\n  getNodeType() {\n    return this.convertTo;\n  }\n\n  generate(builder) {\n    const convertTo = this.convertTo;\n    const node = this.node;\n\n    if (builder.isReference(convertTo) === false) {\n      const convertToSnippet = builder.getType(convertTo);\n      const nodeSnippet = node.build(builder, convertTo);\n      return `${builder.getVectorType(convertToSnippet)}( ${nodeSnippet} )`;\n    } else {\n      return node.build(builder, convertTo);\n    }\n  }\n\n}\n\nexport default ConvertNode;","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/nodes/utils/ConvertNode.js"],"names":["Node","ConvertNode","constructor","node","convertTo","getNodeType","generate","builder","isReference","convertToSnippet","getType","nodeSnippet","build","getVectorType"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,iBAAjB;;AAEA,MAAMC,WAAN,SAA0BD,IAA1B,CAA+B;AAC7BE,EAAAA,WAAW,CAACC,IAAD,EAAOC,SAAP,EAAkB;AAC3B;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKD,SAAZ;AACD;;AAEDE,EAAAA,QAAQ,CAACC,OAAD,EAAU;AAChB,UAAMH,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMD,IAAI,GAAG,KAAKA,IAAlB;;AAEA,QAAII,OAAO,CAACC,WAAR,CAAoBJ,SAApB,MAAmC,KAAvC,EAA8C;AAC5C,YAAMK,gBAAgB,GAAGF,OAAO,CAACG,OAAR,CAAgBN,SAAhB,CAAzB;AACA,YAAMO,WAAW,GAAGR,IAAI,CAACS,KAAL,CAAWL,OAAX,EAAoBH,SAApB,CAApB;AACA,aAAQ,GAAEG,OAAO,CAACM,aAAR,CAAsBJ,gBAAtB,CAAwC,KAAIE,WAAY,IAAlE;AACD,KAJD,MAIO;AACL,aAAOR,IAAI,CAACS,KAAL,CAAWL,OAAX,EAAoBH,SAApB,CAAP;AACD;AACF;;AAtB4B;;AA0B/B,eAAeH,WAAf","sourcesContent":["import Node from '../core/Node.js';\n\nclass ConvertNode extends Node {\n  constructor(node, convertTo) {\n    super();\n    this.node = node;\n    this.convertTo = convertTo;\n  }\n\n  getNodeType() {\n    return this.convertTo;\n  }\n\n  generate(builder) {\n    const convertTo = this.convertTo;\n    const node = this.node;\n\n    if (builder.isReference(convertTo) === false) {\n      const convertToSnippet = builder.getType(convertTo);\n      const nodeSnippet = node.build(builder, convertTo);\n      return `${builder.getVectorType(convertToSnippet)}( ${nodeSnippet} )`;\n    } else {\n      return node.build(builder, convertTo);\n    }\n  }\n\n}\n\nexport default ConvertNode;\n"]},"metadata":{},"sourceType":"module"}