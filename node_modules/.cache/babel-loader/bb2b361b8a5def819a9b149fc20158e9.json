{"ast":null,"code":"import { Vector3, Vector2, Triangle, DoubleSide, BackSide } from 'three'; // Ripped and modified From THREE.js Mesh raycast\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L115\n\nconst vA = /* @__PURE__ */new Vector3();\nconst vB = /* @__PURE__ */new Vector3();\nconst vC = /* @__PURE__ */new Vector3();\nconst uvA = /* @__PURE__ */new Vector2();\nconst uvB = /* @__PURE__ */new Vector2();\nconst uvC = /* @__PURE__ */new Vector2();\nconst intersectionPoint = /* @__PURE__ */new Vector3();\n\nfunction checkIntersection(ray, pA, pB, pC, point, side) {\n  let intersect;\n\n  if (side === BackSide) {\n    intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n  } else {\n    intersect = ray.intersectTriangle(pA, pB, pC, side !== DoubleSide, point);\n  }\n\n  if (intersect === null) return null;\n  const distance = ray.origin.distanceTo(point);\n  return {\n    distance: distance,\n    point: point.clone()\n  };\n}\n\nfunction checkBufferGeometryIntersection(ray, position, uv, a, b, c, side) {\n  vA.fromBufferAttribute(position, a);\n  vB.fromBufferAttribute(position, b);\n  vC.fromBufferAttribute(position, c);\n  const intersection = checkIntersection(ray, vA, vB, vC, intersectionPoint, side);\n\n  if (intersection) {\n    if (uv) {\n      uvA.fromBufferAttribute(uv, a);\n      uvB.fromBufferAttribute(uv, b);\n      uvC.fromBufferAttribute(uv, c);\n      intersection.uv = Triangle.getUV(intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2());\n    }\n\n    const face = {\n      a: a,\n      b: b,\n      c: c,\n      normal: new Vector3(),\n      materialIndex: 0\n    };\n    Triangle.getNormal(vA, vB, vC, face.normal);\n    intersection.face = face;\n    intersection.faceIndex = a;\n  }\n\n  return intersection;\n} // https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L258\n\n\nfunction intersectTri(geo, side, ray, tri, intersections) {\n  const triOffset = tri * 3;\n  const a = geo.index.getX(triOffset);\n  const b = geo.index.getX(triOffset + 1);\n  const c = geo.index.getX(triOffset + 2);\n  const intersection = checkBufferGeometryIntersection(ray, geo.attributes.position, geo.attributes.uv, a, b, c, side);\n\n  if (intersection) {\n    intersection.faceIndex = tri;\n    if (intersections) intersections.push(intersection);\n    return intersection;\n  }\n\n  return null;\n}\n\nexport { intersectTri };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js"],"names":["Vector3","Vector2","Triangle","DoubleSide","BackSide","vA","vB","vC","uvA","uvB","uvC","intersectionPoint","checkIntersection","ray","pA","pB","pC","point","side","intersect","intersectTriangle","distance","origin","distanceTo","clone","checkBufferGeometryIntersection","position","uv","a","b","c","fromBufferAttribute","intersection","getUV","face","normal","materialIndex","getNormal","faceIndex","intersectTri","geo","tri","intersections","triOffset","index","getX","attributes","push"],"mappings":"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","sourcesContent":["import { Vector3, Vector2, Triangle, DoubleSide, BackSide } from 'three';\n\n// Ripped and modified From THREE.js Mesh raycast\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L115\nconst vA = /* @__PURE__ */ new Vector3();\nconst vB = /* @__PURE__ */ new Vector3();\nconst vC = /* @__PURE__ */ new Vector3();\n\nconst uvA = /* @__PURE__ */ new Vector2();\nconst uvB = /* @__PURE__ */ new Vector2();\nconst uvC = /* @__PURE__ */ new Vector2();\n\nconst intersectionPoint = /* @__PURE__ */ new Vector3();\nfunction checkIntersection( ray, pA, pB, pC, point, side ) {\n\n\tlet intersect;\n\tif ( side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\tconst distance = ray.origin.distanceTo( point );\n\n\treturn {\n\n\t\tdistance: distance,\n\t\tpoint: point.clone(),\n\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( ray, position, uv, a, b, c, side ) {\n\n\tvA.fromBufferAttribute( position, a );\n\tvB.fromBufferAttribute( position, b );\n\tvC.fromBufferAttribute( position, c );\n\n\tconst intersection = checkIntersection( ray, vA, vB, vC, intersectionPoint, side );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\tuvA.fromBufferAttribute( uv, a );\n\t\t\tuvB.fromBufferAttribute( uv, b );\n\t\t\tuvC.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getUV( intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2( ) );\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( vA, vB, vC, face.normal );\n\n\t\tintersection.face = face;\n\t\tintersection.faceIndex = a;\n\n\t}\n\n\treturn intersection;\n\n}\n\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L258\nfunction intersectTri( geo, side, ray, tri, intersections ) {\n\n\tconst triOffset = tri * 3;\n\tconst a = geo.index.getX( triOffset );\n\tconst b = geo.index.getX( triOffset + 1 );\n\tconst c = geo.index.getX( triOffset + 2 );\n\n\tconst intersection = checkBufferGeometryIntersection( ray, geo.attributes.position, geo.attributes.uv, a, b, c, side );\n\n\tif ( intersection ) {\n\n\t\tintersection.faceIndex = tri;\n\t\tif ( intersections ) intersections.push( intersection );\n\t\treturn intersection;\n\n\t}\n\n\treturn null;\n\n}\n\nexport { intersectTri };\n"]},"metadata":{},"sourceType":"module"}