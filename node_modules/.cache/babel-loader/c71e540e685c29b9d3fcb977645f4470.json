{"ast":null,"code":"import { ShaderMaterial, Material } from 'three';\nimport { getNodesKeys } from '../core/NodeUtils.js';\n\nclass NodeMaterial extends ShaderMaterial {\n  constructor() {\n    super();\n    this.type = this.constructor.name;\n    this.lights = true;\n  }\n\n  setDefaultValues(values) {\n    // This approach is to reuse the native refreshUniforms*\n    // and turn available the use of features like transmission and environment in core\n    let value;\n\n    for (const property in values) {\n      value = values[property];\n\n      if (this[property] === undefined) {\n        if (value && typeof value.clone === 'function') {\n          this[property] = value.clone();\n        } else {\n          this[property] = value;\n        }\n      }\n    }\n\n    Object.assign(this.defines, values.defines);\n  }\n\n  toJSON(meta) {\n    const isRoot = meta === undefined || typeof meta === 'string';\n\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {},\n        nodes: {}\n      };\n    }\n\n    const data = Material.prototype.toJSON.call(this, meta);\n    const nodeKeys = getNodesKeys(this);\n    data.inputNodes = {};\n\n    for (const name of nodeKeys) {\n      data.inputNodes[name] = this[name].toJSON(meta).uuid;\n    } // TODO: Copied from Object3D.toJSON\n\n\n    function extractFromCache(cache) {\n      const values = [];\n\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n\n      return values;\n    }\n\n    if (isRoot) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const nodes = extractFromCache(meta.nodes);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n      if (nodes.length > 0) data.nodes = nodes;\n    }\n\n    return data;\n  }\n\n}\n\nNodeMaterial.prototype.isNodeMaterial = true;\nexport default NodeMaterial;","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/nodes/materials/NodeMaterial.js"],"names":["ShaderMaterial","Material","getNodesKeys","NodeMaterial","constructor","type","name","lights","setDefaultValues","values","value","property","undefined","clone","Object","assign","defines","toJSON","meta","isRoot","textures","images","nodes","data","prototype","call","nodeKeys","inputNodes","uuid","extractFromCache","cache","key","metadata","push","length","isNodeMaterial"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,QAAzB,QAAyC,OAAzC;AACA,SAASC,YAAT,QAA6B,sBAA7B;;AAEA,MAAMC,YAAN,SAA2BH,cAA3B,CAA0C;AACxCI,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,IAAL,GAAY,KAAKD,WAAL,CAAiBE,IAA7B;AACA,SAAKC,MAAL,GAAc,IAAd;AACD;;AAEDC,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AACvB;AACA;AACA,QAAIC,KAAJ;;AAEA,SAAK,MAAMC,QAAX,IAAuBF,MAAvB,EAA+B;AAC7BC,MAAAA,KAAK,GAAGD,MAAM,CAACE,QAAD,CAAd;;AAEA,UAAI,KAAKA,QAAL,MAAmBC,SAAvB,EAAkC;AAChC,YAAIF,KAAK,IAAI,OAAOA,KAAK,CAACG,KAAb,KAAuB,UAApC,EAAgD;AAC9C,eAAKF,QAAL,IAAiBD,KAAK,CAACG,KAAN,EAAjB;AACD,SAFD,MAEO;AACL,eAAKF,QAAL,IAAiBD,KAAjB;AACD;AACF;AACF;;AAEDI,IAAAA,MAAM,CAACC,MAAP,CAAc,KAAKC,OAAnB,EAA4BP,MAAM,CAACO,OAAnC;AACD;;AAEDC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACX,UAAMC,MAAM,GAAGD,IAAI,KAAKN,SAAT,IAAsB,OAAOM,IAAP,KAAgB,QAArD;;AAEA,QAAIC,MAAJ,EAAY;AACVD,MAAAA,IAAI,GAAG;AACLE,QAAAA,QAAQ,EAAE,EADL;AAELC,QAAAA,MAAM,EAAE,EAFH;AAGLC,QAAAA,KAAK,EAAE;AAHF,OAAP;AAKD;;AAED,UAAMC,IAAI,GAAGtB,QAAQ,CAACuB,SAAT,CAAmBP,MAAnB,CAA0BQ,IAA1B,CAA+B,IAA/B,EAAqCP,IAArC,CAAb;AACA,UAAMQ,QAAQ,GAAGxB,YAAY,CAAC,IAAD,CAA7B;AACAqB,IAAAA,IAAI,CAACI,UAAL,GAAkB,EAAlB;;AAEA,SAAK,MAAMrB,IAAX,IAAmBoB,QAAnB,EAA6B;AAC3BH,MAAAA,IAAI,CAACI,UAAL,CAAgBrB,IAAhB,IAAwB,KAAKA,IAAL,EAAWW,MAAX,CAAkBC,IAAlB,EAAwBU,IAAhD;AACD,KAjBU,CAiBT;;;AAGF,aAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,YAAMrB,MAAM,GAAG,EAAf;;AAEA,WAAK,MAAMsB,GAAX,IAAkBD,KAAlB,EAAyB;AACvB,cAAMP,IAAI,GAAGO,KAAK,CAACC,GAAD,CAAlB;AACA,eAAOR,IAAI,CAACS,QAAZ;AACAvB,QAAAA,MAAM,CAACwB,IAAP,CAAYV,IAAZ;AACD;;AAED,aAAOd,MAAP;AACD;;AAED,QAAIU,MAAJ,EAAY;AACV,YAAMC,QAAQ,GAAGS,gBAAgB,CAACX,IAAI,CAACE,QAAN,CAAjC;AACA,YAAMC,MAAM,GAAGQ,gBAAgB,CAACX,IAAI,CAACG,MAAN,CAA/B;AACA,YAAMC,KAAK,GAAGO,gBAAgB,CAACX,IAAI,CAACI,KAAN,CAA9B;AACA,UAAIF,QAAQ,CAACc,MAAT,GAAkB,CAAtB,EAAyBX,IAAI,CAACH,QAAL,GAAgBA,QAAhB;AACzB,UAAIC,MAAM,CAACa,MAAP,GAAgB,CAApB,EAAuBX,IAAI,CAACF,MAAL,GAAcA,MAAd;AACvB,UAAIC,KAAK,CAACY,MAAN,GAAe,CAAnB,EAAsBX,IAAI,CAACD,KAAL,GAAaA,KAAb;AACvB;;AAED,WAAOC,IAAP;AACD;;AArEuC;;AAyE1CpB,YAAY,CAACqB,SAAb,CAAuBW,cAAvB,GAAwC,IAAxC;AAEA,eAAehC,YAAf","sourcesContent":["import { ShaderMaterial, Material } from 'three';\nimport { getNodesKeys } from '../core/NodeUtils.js';\n\nclass NodeMaterial extends ShaderMaterial {\n  constructor() {\n    super();\n    this.type = this.constructor.name;\n    this.lights = true;\n  }\n\n  setDefaultValues(values) {\n    // This approach is to reuse the native refreshUniforms*\n    // and turn available the use of features like transmission and environment in core\n    let value;\n\n    for (const property in values) {\n      value = values[property];\n\n      if (this[property] === undefined) {\n        if (value && typeof value.clone === 'function') {\n          this[property] = value.clone();\n        } else {\n          this[property] = value;\n        }\n      }\n    }\n\n    Object.assign(this.defines, values.defines);\n  }\n\n  toJSON(meta) {\n    const isRoot = meta === undefined || typeof meta === 'string';\n\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {},\n        nodes: {}\n      };\n    }\n\n    const data = Material.prototype.toJSON.call(this, meta);\n    const nodeKeys = getNodesKeys(this);\n    data.inputNodes = {};\n\n    for (const name of nodeKeys) {\n      data.inputNodes[name] = this[name].toJSON(meta).uuid;\n    } // TODO: Copied from Object3D.toJSON\n\n\n    function extractFromCache(cache) {\n      const values = [];\n\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n\n      return values;\n    }\n\n    if (isRoot) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const nodes = extractFromCache(meta.nodes);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n      if (nodes.length > 0) data.nodes = nodes;\n    }\n\n    return data;\n  }\n\n}\n\nNodeMaterial.prototype.isNodeMaterial = true;\n\nexport default NodeMaterial;\n"]},"metadata":{},"sourceType":"module"}