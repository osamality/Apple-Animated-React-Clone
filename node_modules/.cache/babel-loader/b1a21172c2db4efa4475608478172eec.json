{"ast":null,"code":"import { fromType } from '../Nodes.js';\nimport { Loader } from 'three';\n\nclass NodeLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.textures = {};\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parseNodes(json) {\n    const nodes = {};\n\n    if (json !== undefined) {\n      for (const nodeJSON of json) {\n        const {\n          uuid,\n          type\n        } = nodeJSON;\n        nodes[uuid] = fromType(type);\n        nodes[uuid].uuid = uuid;\n      }\n\n      const meta = {\n        nodes,\n        textures: this.textures\n      };\n\n      for (const nodeJSON of json) {\n        nodeJSON.meta = meta;\n        const node = nodes[nodeJSON.uuid];\n        node.deserialize(nodeJSON);\n        delete nodeJSON.meta;\n      }\n    }\n\n    return nodes;\n  }\n\n  parse(json) {\n    const node = fromType(type);\n    node.uuid = json.uuid;\n    const nodes = this.parseNodes(json.inputNodes);\n    const meta = {\n      nodes,\n      textures: this.textures\n    };\n    json.meta = meta;\n    node.deserialize(json);\n    delete json.meta;\n    return node;\n  }\n\n  setTextures(value) {\n    this.textures = value;\n    return this;\n  }\n\n}\n\nexport default NodeLoader;","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/nodes/loaders/NodeLoader.js"],"names":["fromType","Loader","NodeLoader","constructor","manager","textures","load","url","onLoad","onProgress","onError","loader","FileLoader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","JSON","e","console","error","itemError","parseNodes","json","nodes","undefined","nodeJSON","uuid","type","meta","node","deserialize","inputNodes","setTextures","value"],"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,MAAT,QAAuB,OAAvB;;AAEA,MAAMC,UAAN,SAAyBD,MAAzB,CAAgC;AAC9BE,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;;AAEDC,EAAAA,IAAI,CAACC,GAAD,EAAMC,MAAN,EAAcC,UAAd,EAA0BC,OAA1B,EAAmC;AACrC,UAAMC,MAAM,GAAG,IAAIC,UAAJ,CAAe,KAAKR,OAApB,CAAf;AACAO,IAAAA,MAAM,CAACE,OAAP,CAAe,KAAKC,IAApB;AACAH,IAAAA,MAAM,CAACI,gBAAP,CAAwB,KAAKC,aAA7B;AACAL,IAAAA,MAAM,CAACM,kBAAP,CAA0B,KAAKC,eAA/B;AACAP,IAAAA,MAAM,CAACL,IAAP,CAAYC,GAAZ,EAAiBY,IAAI,IAAI;AACvB,UAAI;AACFX,QAAAA,MAAM,CAAC,KAAKY,KAAL,CAAWC,IAAI,CAACD,KAAL,CAAWD,IAAX,CAAX,CAAD,CAAN;AACD,OAFD,CAEE,OAAOG,CAAP,EAAU;AACV,YAAIZ,OAAJ,EAAa;AACXA,UAAAA,OAAO,CAACY,CAAD,CAAP;AACD,SAFD,MAEO;AACLC,UAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;;AAED,aAAKlB,OAAL,CAAaqB,SAAb,CAAuBlB,GAAvB;AACD;AACF,KAZD,EAYGE,UAZH,EAYeC,OAZf;AAaD;;AAEDgB,EAAAA,UAAU,CAACC,IAAD,EAAO;AACf,UAAMC,KAAK,GAAG,EAAd;;AAEA,QAAID,IAAI,KAAKE,SAAb,EAAwB;AACtB,WAAK,MAAMC,QAAX,IAAuBH,IAAvB,EAA6B;AAC3B,cAAM;AACJI,UAAAA,IADI;AAEJC,UAAAA;AAFI,YAGFF,QAHJ;AAIAF,QAAAA,KAAK,CAACG,IAAD,CAAL,GAAc/B,QAAQ,CAACgC,IAAD,CAAtB;AACAJ,QAAAA,KAAK,CAACG,IAAD,CAAL,CAAYA,IAAZ,GAAmBA,IAAnB;AACD;;AAED,YAAME,IAAI,GAAG;AACXL,QAAAA,KADW;AAEXvB,QAAAA,QAAQ,EAAE,KAAKA;AAFJ,OAAb;;AAKA,WAAK,MAAMyB,QAAX,IAAuBH,IAAvB,EAA6B;AAC3BG,QAAAA,QAAQ,CAACG,IAAT,GAAgBA,IAAhB;AACA,cAAMC,IAAI,GAAGN,KAAK,CAACE,QAAQ,CAACC,IAAV,CAAlB;AACAG,QAAAA,IAAI,CAACC,WAAL,CAAiBL,QAAjB;AACA,eAAOA,QAAQ,CAACG,IAAhB;AACD;AACF;;AAED,WAAOL,KAAP;AACD;;AAEDR,EAAAA,KAAK,CAACO,IAAD,EAAO;AACV,UAAMO,IAAI,GAAGlC,QAAQ,CAACgC,IAAD,CAArB;AACAE,IAAAA,IAAI,CAACH,IAAL,GAAYJ,IAAI,CAACI,IAAjB;AACA,UAAMH,KAAK,GAAG,KAAKF,UAAL,CAAgBC,IAAI,CAACS,UAArB,CAAd;AACA,UAAMH,IAAI,GAAG;AACXL,MAAAA,KADW;AAEXvB,MAAAA,QAAQ,EAAE,KAAKA;AAFJ,KAAb;AAIAsB,IAAAA,IAAI,CAACM,IAAL,GAAYA,IAAZ;AACAC,IAAAA,IAAI,CAACC,WAAL,CAAiBR,IAAjB;AACA,WAAOA,IAAI,CAACM,IAAZ;AACA,WAAOC,IAAP;AACD;;AAEDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,SAAKjC,QAAL,GAAgBiC,KAAhB;AACA,WAAO,IAAP;AACD;;AAxE6B;;AA4EhC,eAAepC,UAAf","sourcesContent":["import { fromType } from '../Nodes.js';\nimport { Loader } from 'three';\n\nclass NodeLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.textures = {};\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(JSON.parse(text)));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parseNodes(json) {\n    const nodes = {};\n\n    if (json !== undefined) {\n      for (const nodeJSON of json) {\n        const {\n          uuid,\n          type\n        } = nodeJSON;\n        nodes[uuid] = fromType(type);\n        nodes[uuid].uuid = uuid;\n      }\n\n      const meta = {\n        nodes,\n        textures: this.textures\n      };\n\n      for (const nodeJSON of json) {\n        nodeJSON.meta = meta;\n        const node = nodes[nodeJSON.uuid];\n        node.deserialize(nodeJSON);\n        delete nodeJSON.meta;\n      }\n    }\n\n    return nodes;\n  }\n\n  parse(json) {\n    const node = fromType(type);\n    node.uuid = json.uuid;\n    const nodes = this.parseNodes(json.inputNodes);\n    const meta = {\n      nodes,\n      textures: this.textures\n    };\n    json.meta = meta;\n    node.deserialize(json);\n    delete json.meta;\n    return node;\n  }\n\n  setTextures(value) {\n    this.textures = value;\n    return this;\n  }\n\n}\n\nexport default NodeLoader;\n"]},"metadata":{},"sourceType":"module"}