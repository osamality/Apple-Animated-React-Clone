{"ast":null,"code":"import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\nconst CameraShake = /*#__PURE__*/React.forwardRef(({\n  intensity = 1,\n  decay,\n  decayRate = 0.65,\n  maxYaw = 0.1,\n  maxPitch = 0.1,\n  maxRoll = 0.1,\n  yawFrequency = 0.1,\n  pitchFrequency = 0.1,\n  rollFrequency = 0.1\n}, ref) => {\n  const camera = useThree(state => state.camera);\n  const defaultControls = useThree(state => state.controls);\n  const intensityRef = React.useRef(intensity);\n  const initialRotation = React.useRef(camera.rotation.clone());\n  const [yawNoise] = React.useState(() => new SimplexNoise());\n  const [pitchNoise] = React.useState(() => new SimplexNoise());\n  const [rollNoise] = React.useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  React.useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  React.useEffect(() => {\n    if (defaultControls) {\n      const callback = () => void (initialRotation.current = camera.rotation.clone());\n\n      defaultControls.addEventListener('change', callback);\n      callback();\n      return () => void defaultControls.removeEventListener('change', callback);\n    }\n  }, [camera, defaultControls]);\n  useFrame((state, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(state.clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(state.clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(state.clock.elapsedTime * rollFrequency, 1);\n    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\nexport { CameraShake };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/core/CameraShake.js"],"names":["React","useThree","useFrame","SimplexNoise","CameraShake","forwardRef","intensity","decay","decayRate","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","ref","camera","state","defaultControls","controls","intensityRef","useRef","initialRotation","rotation","clone","yawNoise","useState","pitchNoise","rollNoise","constrainIntensity","current","useImperativeHandle","getIntensity","setIntensity","val","useEffect","callback","addEventListener","removeEventListener","delta","shake","Math","pow","yaw","noise","clock","elapsedTime","pitch","roll","set","x","y","z"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\n\nconst CameraShake = /*#__PURE__*/React.forwardRef(({\n  intensity = 1,\n  decay,\n  decayRate = 0.65,\n  maxYaw = 0.1,\n  maxPitch = 0.1,\n  maxRoll = 0.1,\n  yawFrequency = 0.1,\n  pitchFrequency = 0.1,\n  rollFrequency = 0.1\n}, ref) => {\n  const camera = useThree(state => state.camera);\n  const defaultControls = useThree(state => state.controls);\n  const intensityRef = React.useRef(intensity);\n  const initialRotation = React.useRef(camera.rotation.clone());\n  const [yawNoise] = React.useState(() => new SimplexNoise());\n  const [pitchNoise] = React.useState(() => new SimplexNoise());\n  const [rollNoise] = React.useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  React.useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  React.useEffect(() => {\n    if (defaultControls) {\n      const callback = () => void (initialRotation.current = camera.rotation.clone());\n\n      defaultControls.addEventListener('change', callback);\n      callback();\n      return () => void defaultControls.removeEventListener('change', callback);\n    }\n  }, [camera, defaultControls]);\n  useFrame((state, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(state.clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(state.clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(state.clock.elapsedTime * rollFrequency, 1);\n    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\n\nexport { CameraShake };\n"]},"metadata":{},"sourceType":"module"}