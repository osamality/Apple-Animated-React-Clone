{"ast":null,"code":"class NodeKeywords {\n  constructor() {\n    this.keywords = [];\n    this.nodes = [];\n    this.keywordsCallback = {};\n  }\n\n  getNode(name) {\n    let node = this.nodes[name];\n\n    if (node === undefined && this.keywordsCallback[name] !== undefined) {\n      node = this.keywordsCallback[name](name);\n      this.nodes[name] = node;\n    }\n\n    return node;\n  }\n\n  addKeyword(name, callback) {\n    this.keywords.push(name);\n    this.keywordsCallback[name] = callback;\n    return this;\n  }\n\n  parse(code) {\n    const keywordNames = this.keywords;\n    const regExp = new RegExp(`\\\\b${keywordNames.join('\\\\b|\\\\b')}\\\\b`, 'g');\n    const codeKeywords = code.match(regExp);\n    const keywordNodes = [];\n\n    if (codeKeywords !== null) {\n      for (const keyword of codeKeywords) {\n        const node = this.getNode(keyword);\n\n        if (node !== undefined && keywordNodes.indexOf(node) === -1) {\n          keywordNodes.push(node);\n        }\n      }\n    }\n\n    return keywordNodes;\n  }\n\n  include(builder, code) {\n    const keywordNodes = this.parse(code);\n\n    for (const keywordNode of keywordNodes) {\n      keywordNode.build(builder);\n    }\n  }\n\n}\n\nexport default NodeKeywords;","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/nodes/core/NodeKeywords.js"],"names":["NodeKeywords","constructor","keywords","nodes","keywordsCallback","getNode","name","node","undefined","addKeyword","callback","push","parse","code","keywordNames","regExp","RegExp","join","codeKeywords","match","keywordNodes","keyword","indexOf","include","builder","keywordNode","build"],"mappings":"AAAA,MAAMA,YAAN,CAAmB;AACjBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACD;;AAEDC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,QAAIC,IAAI,GAAG,KAAKJ,KAAL,CAAWG,IAAX,CAAX;;AAEA,QAAIC,IAAI,KAAKC,SAAT,IAAsB,KAAKJ,gBAAL,CAAsBE,IAAtB,MAAgCE,SAA1D,EAAqE;AACnED,MAAAA,IAAI,GAAG,KAAKH,gBAAL,CAAsBE,IAAtB,EAA4BA,IAA5B,CAAP;AACA,WAAKH,KAAL,CAAWG,IAAX,IAAmBC,IAAnB;AACD;;AAED,WAAOA,IAAP;AACD;;AAEDE,EAAAA,UAAU,CAACH,IAAD,EAAOI,QAAP,EAAiB;AACzB,SAAKR,QAAL,CAAcS,IAAd,CAAmBL,IAAnB;AACA,SAAKF,gBAAL,CAAsBE,IAAtB,IAA8BI,QAA9B;AACA,WAAO,IAAP;AACD;;AAEDE,EAAAA,KAAK,CAACC,IAAD,EAAO;AACV,UAAMC,YAAY,GAAG,KAAKZ,QAA1B;AACA,UAAMa,MAAM,GAAG,IAAIC,MAAJ,CAAY,MAAKF,YAAY,CAACG,IAAb,CAAkB,SAAlB,CAA6B,KAA9C,EAAoD,GAApD,CAAf;AACA,UAAMC,YAAY,GAAGL,IAAI,CAACM,KAAL,CAAWJ,MAAX,CAArB;AACA,UAAMK,YAAY,GAAG,EAArB;;AAEA,QAAIF,YAAY,KAAK,IAArB,EAA2B;AACzB,WAAK,MAAMG,OAAX,IAAsBH,YAAtB,EAAoC;AAClC,cAAMX,IAAI,GAAG,KAAKF,OAAL,CAAagB,OAAb,CAAb;;AAEA,YAAId,IAAI,KAAKC,SAAT,IAAsBY,YAAY,CAACE,OAAb,CAAqBf,IAArB,MAA+B,CAAC,CAA1D,EAA6D;AAC3Da,UAAAA,YAAY,CAACT,IAAb,CAAkBJ,IAAlB;AACD;AACF;AACF;;AAED,WAAOa,YAAP;AACD;;AAEDG,EAAAA,OAAO,CAACC,OAAD,EAAUX,IAAV,EAAgB;AACrB,UAAMO,YAAY,GAAG,KAAKR,KAAL,CAAWC,IAAX,CAArB;;AAEA,SAAK,MAAMY,WAAX,IAA0BL,YAA1B,EAAwC;AACtCK,MAAAA,WAAW,CAACC,KAAZ,CAAkBF,OAAlB;AACD;AACF;;AAjDgB;;AAqDnB,eAAexB,YAAf","sourcesContent":["class NodeKeywords {\n  constructor() {\n    this.keywords = [];\n    this.nodes = [];\n    this.keywordsCallback = {};\n  }\n\n  getNode(name) {\n    let node = this.nodes[name];\n\n    if (node === undefined && this.keywordsCallback[name] !== undefined) {\n      node = this.keywordsCallback[name](name);\n      this.nodes[name] = node;\n    }\n\n    return node;\n  }\n\n  addKeyword(name, callback) {\n    this.keywords.push(name);\n    this.keywordsCallback[name] = callback;\n    return this;\n  }\n\n  parse(code) {\n    const keywordNames = this.keywords;\n    const regExp = new RegExp(`\\\\b${keywordNames.join('\\\\b|\\\\b')}\\\\b`, 'g');\n    const codeKeywords = code.match(regExp);\n    const keywordNodes = [];\n\n    if (codeKeywords !== null) {\n      for (const keyword of codeKeywords) {\n        const node = this.getNode(keyword);\n\n        if (node !== undefined && keywordNodes.indexOf(node) === -1) {\n          keywordNodes.push(node);\n        }\n      }\n    }\n\n    return keywordNodes;\n  }\n\n  include(builder, code) {\n    const keywordNodes = this.parse(code);\n\n    for (const keywordNode of keywordNodes) {\n      keywordNode.build(builder);\n    }\n  }\n\n}\n\nexport default NodeKeywords;\n"]},"metadata":{},"sourceType":"module"}