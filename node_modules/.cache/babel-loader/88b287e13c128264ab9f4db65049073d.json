{"ast":null,"code":"import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, createPortal, useFrame } from '@react-three/fiber';\n\nconst isOrthographicCamera = def => def && def.isOrthographicCamera;\n\nconst col = new THREE.Color();\n/**\n * In `@react-three/fiber` after `v8.0.0` but prior to `v8.1.0`, `state.size` contained only dimension\n * information. After `v8.1.0`, position information (`top`, `left`) was added\n *\n * @todo remove this when drei supports v9 and up\n */\n\nfunction isNonLegacyCanvasSize(size) {\n  return 'top' in size;\n}\n\nfunction computeContainerPosition(canvasSize, trackRect) {\n  const {\n    right,\n    top,\n    left: trackLeft,\n    bottom: trackBottom,\n    width,\n    height\n  } = trackRect;\n  const isOffscreen = trackRect.bottom < 0 || top > canvasSize.height || right < 0 || trackRect.left > canvasSize.width;\n\n  if (isNonLegacyCanvasSize(canvasSize)) {\n    const canvasBottom = canvasSize.top + canvasSize.height;\n    const bottom = canvasBottom - trackBottom;\n    const left = trackLeft - canvasSize.left;\n    return {\n      position: {\n        width,\n        height,\n        left,\n        top,\n        bottom,\n        right\n      },\n      isOffscreen\n    };\n  } // Fall back on old behavior if r3f < 8.1.0\n\n\n  const bottom = canvasSize.height - trackBottom;\n  return {\n    position: {\n      width,\n      height,\n      top,\n      left: trackLeft,\n      bottom,\n      right\n    },\n    isOffscreen\n  };\n}\n\nfunction Container({\n  canvasSize,\n  scene,\n  index,\n  children,\n  frames,\n  rect,\n  track\n}) {\n  const get = useThree(state => state.get);\n  const camera = useThree(state => state.camera);\n  const virtualScene = useThree(state => state.scene);\n  const setEvents = useThree(state => state.setEvents);\n  let frameCount = 0;\n  useFrame(state => {\n    if (frames === Infinity || frameCount <= frames) {\n      var _track$current;\n\n      rect.current = (_track$current = track.current) == null ? void 0 : _track$current.getBoundingClientRect();\n      frameCount++;\n    }\n\n    if (rect.current) {\n      const {\n        position: {\n          left,\n          bottom,\n          width,\n          height\n        },\n        isOffscreen\n      } = computeContainerPosition(canvasSize, rect.current);\n      const aspect = width / height;\n\n      if (isOrthographicCamera(camera)) {\n        if (camera.left !== width / -2 || camera.right !== width / 2 || camera.top !== height / 2 || camera.bottom !== height / -2) {\n          Object.assign(camera, {\n            left: width / -2,\n            right: width / 2,\n            top: height / 2,\n            bottom: height / -2\n          });\n          camera.updateProjectionMatrix();\n        }\n      } else if (camera.aspect !== aspect) {\n        camera.aspect = aspect;\n        camera.updateProjectionMatrix();\n      }\n\n      state.gl.setViewport(left, bottom, width, height);\n      state.gl.setScissor(left, bottom, width, height);\n      state.gl.setScissorTest(true);\n\n      if (isOffscreen) {\n        state.gl.getClearColor(col);\n        state.gl.setClearColor(col, state.gl.getClearAlpha());\n        state.gl.clear(true, true);\n        return;\n      } // When children are present render the portalled scene, otherwise the default scene\n\n\n      state.gl.render(children ? virtualScene : scene, camera);\n    }\n  }, index);\n  React.useEffect(() => {\n    // Connect the event layer to the tracking element\n    const old = get().events.connected;\n    setEvents({\n      connected: track.current\n    });\n    return () => setEvents({\n      connected: old\n    });\n  }, []);\n  React.useEffect(() => {\n    if (isNonLegacyCanvasSize(canvasSize)) {\n      return;\n    }\n\n    console.warn('Detected @react-three/fiber canvas size does not include position information. <View /> may not work as expected. ' + 'Upgrade to @react-three/fiber ^8.1.0 for support.\\n See https://github.com/pmndrs/drei/issues/944');\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n}\n\nconst View = ({\n  track,\n  index = 1,\n  frames = Infinity,\n  children\n}) => {\n  const rect = React.useRef(null);\n  const {\n    size,\n    scene\n  } = useThree();\n  const [virtualScene] = React.useState(() => new THREE.Scene());\n  const compute = React.useCallback((event, state) => {\n    if (track.current && event.target === track.current) {\n      const {\n        width,\n        height,\n        left,\n        top\n      } = rect.current;\n      const x = event.clientX - left;\n      const y = event.clientY - top;\n      state.pointer.set(x / width * 2 - 1, -(y / height) * 2 + 1);\n      state.raycaster.setFromCamera(state.pointer, state.camera);\n    }\n  }, [rect]);\n  const [ready, toggle] = React.useReducer(() => true, false);\n  React.useEffect(() => {\n    var _track$current2; // We need the tracking elements bounds beforehand in order to inject it into the portal\n\n\n    rect.current = (_track$current2 = track.current) == null ? void 0 : _track$current2.getBoundingClientRect(); // And now we can proceed\n\n    toggle();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, ready && createPortal( /*#__PURE__*/React.createElement(Container, {\n    canvasSize: size,\n    frames: frames,\n    scene: scene,\n    track: track,\n    rect: rect,\n    index: index\n  }, children), virtualScene, {\n    events: {\n      compute,\n      priority: index\n    },\n    size: {\n      width: rect.current.width,\n      height: rect.current.height\n    }\n  }));\n};\n\nexport { View };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/web/View.js"],"names":["React","THREE","useThree","createPortal","useFrame","isOrthographicCamera","def","col","Color","isNonLegacyCanvasSize","size","computeContainerPosition","canvasSize","trackRect","right","top","left","trackLeft","bottom","trackBottom","width","height","isOffscreen","canvasBottom","position","Container","scene","index","children","frames","rect","track","get","state","camera","virtualScene","setEvents","frameCount","Infinity","_track$current","current","getBoundingClientRect","aspect","Object","assign","updateProjectionMatrix","gl","setViewport","setScissor","setScissorTest","getClearColor","setClearColor","getClearAlpha","clear","render","useEffect","old","events","connected","console","warn","createElement","Fragment","View","useRef","useState","Scene","compute","useCallback","event","target","x","clientX","y","clientY","pointer","set","raycaster","setFromCamera","ready","toggle","useReducer","_track$current2","priority"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, createPortal, useFrame } from '@react-three/fiber';\n\nconst isOrthographicCamera = def => def && def.isOrthographicCamera;\n\nconst col = new THREE.Color();\n/**\n * In `@react-three/fiber` after `v8.0.0` but prior to `v8.1.0`, `state.size` contained only dimension\n * information. After `v8.1.0`, position information (`top`, `left`) was added\n *\n * @todo remove this when drei supports v9 and up\n */\n\nfunction isNonLegacyCanvasSize(size) {\n  return 'top' in size;\n}\n\nfunction computeContainerPosition(canvasSize, trackRect) {\n  const {\n    right,\n    top,\n    left: trackLeft,\n    bottom: trackBottom,\n    width,\n    height\n  } = trackRect;\n  const isOffscreen = trackRect.bottom < 0 || top > canvasSize.height || right < 0 || trackRect.left > canvasSize.width;\n\n  if (isNonLegacyCanvasSize(canvasSize)) {\n    const canvasBottom = canvasSize.top + canvasSize.height;\n    const bottom = canvasBottom - trackBottom;\n    const left = trackLeft - canvasSize.left;\n    return {\n      position: {\n        width,\n        height,\n        left,\n        top,\n        bottom,\n        right\n      },\n      isOffscreen\n    };\n  } // Fall back on old behavior if r3f < 8.1.0\n\n\n  const bottom = canvasSize.height - trackBottom;\n  return {\n    position: {\n      width,\n      height,\n      top,\n      left: trackLeft,\n      bottom,\n      right\n    },\n    isOffscreen\n  };\n}\n\nfunction Container({\n  canvasSize,\n  scene,\n  index,\n  children,\n  frames,\n  rect,\n  track\n}) {\n  const get = useThree(state => state.get);\n  const camera = useThree(state => state.camera);\n  const virtualScene = useThree(state => state.scene);\n  const setEvents = useThree(state => state.setEvents);\n  let frameCount = 0;\n  useFrame(state => {\n    if (frames === Infinity || frameCount <= frames) {\n      var _track$current;\n\n      rect.current = (_track$current = track.current) == null ? void 0 : _track$current.getBoundingClientRect();\n      frameCount++;\n    }\n\n    if (rect.current) {\n      const {\n        position: {\n          left,\n          bottom,\n          width,\n          height\n        },\n        isOffscreen\n      } = computeContainerPosition(canvasSize, rect.current);\n      const aspect = width / height;\n\n      if (isOrthographicCamera(camera)) {\n        if (camera.left !== width / -2 || camera.right !== width / 2 || camera.top !== height / 2 || camera.bottom !== height / -2) {\n          Object.assign(camera, {\n            left: width / -2,\n            right: width / 2,\n            top: height / 2,\n            bottom: height / -2\n          });\n          camera.updateProjectionMatrix();\n        }\n      } else if (camera.aspect !== aspect) {\n        camera.aspect = aspect;\n        camera.updateProjectionMatrix();\n      }\n\n      state.gl.setViewport(left, bottom, width, height);\n      state.gl.setScissor(left, bottom, width, height);\n      state.gl.setScissorTest(true);\n\n      if (isOffscreen) {\n        state.gl.getClearColor(col);\n        state.gl.setClearColor(col, state.gl.getClearAlpha());\n        state.gl.clear(true, true);\n        return;\n      } // When children are present render the portalled scene, otherwise the default scene\n\n\n      state.gl.render(children ? virtualScene : scene, camera);\n    }\n  }, index);\n  React.useEffect(() => {\n    // Connect the event layer to the tracking element\n    const old = get().events.connected;\n    setEvents({\n      connected: track.current\n    });\n    return () => setEvents({\n      connected: old\n    });\n  }, []);\n  React.useEffect(() => {\n    if (isNonLegacyCanvasSize(canvasSize)) {\n      return;\n    }\n\n    console.warn('Detected @react-three/fiber canvas size does not include position information. <View /> may not work as expected. ' + 'Upgrade to @react-three/fiber ^8.1.0 for support.\\n See https://github.com/pmndrs/drei/issues/944');\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n}\n\nconst View = ({\n  track,\n  index = 1,\n  frames = Infinity,\n  children\n}) => {\n  const rect = React.useRef(null);\n  const {\n    size,\n    scene\n  } = useThree();\n  const [virtualScene] = React.useState(() => new THREE.Scene());\n  const compute = React.useCallback((event, state) => {\n    if (track.current && event.target === track.current) {\n      const {\n        width,\n        height,\n        left,\n        top\n      } = rect.current;\n      const x = event.clientX - left;\n      const y = event.clientY - top;\n      state.pointer.set(x / width * 2 - 1, -(y / height) * 2 + 1);\n      state.raycaster.setFromCamera(state.pointer, state.camera);\n    }\n  }, [rect]);\n  const [ready, toggle] = React.useReducer(() => true, false);\n  React.useEffect(() => {\n    var _track$current2;\n\n    // We need the tracking elements bounds beforehand in order to inject it into the portal\n    rect.current = (_track$current2 = track.current) == null ? void 0 : _track$current2.getBoundingClientRect(); // And now we can proceed\n\n    toggle();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, ready && createPortal( /*#__PURE__*/React.createElement(Container, {\n    canvasSize: size,\n    frames: frames,\n    scene: scene,\n    track: track,\n    rect: rect,\n    index: index\n  }, children), virtualScene, {\n    events: {\n      compute,\n      priority: index\n    },\n    size: {\n      width: rect.current.width,\n      height: rect.current.height\n    }\n  }));\n};\n\nexport { View };\n"]},"metadata":{},"sourceType":"module"}