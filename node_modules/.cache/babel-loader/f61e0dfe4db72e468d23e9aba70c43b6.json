{"ast":null,"code":"import { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\n\nclass LineGeometry extends LineSegmentsGeometry {\n  constructor() {\n    super();\n    this.isLineGeometry = true;\n    this.type = 'LineGeometry';\n  }\n\n  setPositions(array) {\n    // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n    const length = array.length - 3;\n    const points = new Float32Array(2 * length);\n\n    for (let i = 0; i < length; i += 3) {\n      points[2 * i] = array[i];\n      points[2 * i + 1] = array[i + 1];\n      points[2 * i + 2] = array[i + 2];\n      points[2 * i + 3] = array[i + 3];\n      points[2 * i + 4] = array[i + 4];\n      points[2 * i + 5] = array[i + 5];\n    }\n\n    super.setPositions(points);\n    return this;\n  }\n\n  setColors(array) {\n    // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n    const length = array.length - 3;\n    const colors = new Float32Array(2 * length);\n\n    for (let i = 0; i < length; i += 3) {\n      colors[2 * i] = array[i];\n      colors[2 * i + 1] = array[i + 1];\n      colors[2 * i + 2] = array[i + 2];\n      colors[2 * i + 3] = array[i + 3];\n      colors[2 * i + 4] = array[i + 4];\n      colors[2 * i + 5] = array[i + 5];\n    }\n\n    super.setColors(colors);\n    return this;\n  }\n\n  fromLine(line) {\n    const geometry = line.geometry;\n    this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    // set colors, maybe\n\n    return this;\n  }\n\n}\n\nexport { LineGeometry };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/lines/LineGeometry.js"],"names":["LineSegmentsGeometry","LineGeometry","constructor","isLineGeometry","type","setPositions","array","length","points","Float32Array","i","setColors","colors","fromLine","line","geometry","attributes","position"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,2BAArC;;AAEA,MAAMC,YAAN,SAA2BD,oBAA3B,CAAgD;AAC9CE,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,IAAL,GAAY,cAAZ;AACD;;AAEDC,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAClB;AACA,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAAN,GAAe,CAA9B;AACA,UAAMC,MAAM,GAAG,IAAIC,YAAJ,CAAiB,IAAIF,MAArB,CAAf;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,IAAI,CAAjC,EAAoC;AAClCF,MAAAA,MAAM,CAAC,IAAIE,CAAL,CAAN,GAAgBJ,KAAK,CAACI,CAAD,CAArB;AACAF,MAAAA,MAAM,CAAC,IAAIE,CAAJ,GAAQ,CAAT,CAAN,GAAoBJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAzB;AACAF,MAAAA,MAAM,CAAC,IAAIE,CAAJ,GAAQ,CAAT,CAAN,GAAoBJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAzB;AACAF,MAAAA,MAAM,CAAC,IAAIE,CAAJ,GAAQ,CAAT,CAAN,GAAoBJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAzB;AACAF,MAAAA,MAAM,CAAC,IAAIE,CAAJ,GAAQ,CAAT,CAAN,GAAoBJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAzB;AACAF,MAAAA,MAAM,CAAC,IAAIE,CAAJ,GAAQ,CAAT,CAAN,GAAoBJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAzB;AACD;;AAED,UAAML,YAAN,CAAmBG,MAAnB;AACA,WAAO,IAAP;AACD;;AAEDG,EAAAA,SAAS,CAACL,KAAD,EAAQ;AACf;AACA,UAAMC,MAAM,GAAGD,KAAK,CAACC,MAAN,GAAe,CAA9B;AACA,UAAMK,MAAM,GAAG,IAAIH,YAAJ,CAAiB,IAAIF,MAArB,CAAf;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,IAAI,CAAjC,EAAoC;AAClCE,MAAAA,MAAM,CAAC,IAAIF,CAAL,CAAN,GAAgBJ,KAAK,CAACI,CAAD,CAArB;AACAE,MAAAA,MAAM,CAAC,IAAIF,CAAJ,GAAQ,CAAT,CAAN,GAAoBJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAzB;AACAE,MAAAA,MAAM,CAAC,IAAIF,CAAJ,GAAQ,CAAT,CAAN,GAAoBJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAzB;AACAE,MAAAA,MAAM,CAAC,IAAIF,CAAJ,GAAQ,CAAT,CAAN,GAAoBJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAzB;AACAE,MAAAA,MAAM,CAAC,IAAIF,CAAJ,GAAQ,CAAT,CAAN,GAAoBJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAzB;AACAE,MAAAA,MAAM,CAAC,IAAIF,CAAJ,GAAQ,CAAT,CAAN,GAAoBJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAAzB;AACD;;AAED,UAAMC,SAAN,CAAgBC,MAAhB;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACb,UAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAtB;AACA,SAAKV,YAAL,CAAkBU,QAAQ,CAACC,UAAT,CAAoBC,QAApB,CAA6BX,KAA/C,EAFa,CAE0C;AACvD;;AAEA,WAAO,IAAP;AACD;;AAjD6C;;AAqDhD,SAASL,YAAT","sourcesContent":["import { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\n\nclass LineGeometry extends LineSegmentsGeometry {\n  constructor() {\n    super();\n    this.isLineGeometry = true;\n    this.type = 'LineGeometry';\n  }\n\n  setPositions(array) {\n    // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n    const length = array.length - 3;\n    const points = new Float32Array(2 * length);\n\n    for (let i = 0; i < length; i += 3) {\n      points[2 * i] = array[i];\n      points[2 * i + 1] = array[i + 1];\n      points[2 * i + 2] = array[i + 2];\n      points[2 * i + 3] = array[i + 3];\n      points[2 * i + 4] = array[i + 4];\n      points[2 * i + 5] = array[i + 5];\n    }\n\n    super.setPositions(points);\n    return this;\n  }\n\n  setColors(array) {\n    // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n    const length = array.length - 3;\n    const colors = new Float32Array(2 * length);\n\n    for (let i = 0; i < length; i += 3) {\n      colors[2 * i] = array[i];\n      colors[2 * i + 1] = array[i + 1];\n      colors[2 * i + 2] = array[i + 2];\n      colors[2 * i + 3] = array[i + 3];\n      colors[2 * i + 4] = array[i + 4];\n      colors[2 * i + 5] = array[i + 5];\n    }\n\n    super.setColors(colors);\n    return this;\n  }\n\n  fromLine(line) {\n    const geometry = line.geometry;\n    this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    // set colors, maybe\n\n    return this;\n  }\n\n}\n\nexport { LineGeometry };\n"]},"metadata":{},"sourceType":"module"}