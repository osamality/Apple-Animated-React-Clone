{"ast":null,"code":"import { useMemo, useCallback } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Texture } from 'three';\n/**\n *  Adapted from https://github.com/brunoimbrizi/interactive-particles/blob/master/src/scripts/webgl/particles/TrailTexture.js\n *  Changes:\n *    * accepts config as constructor params\n *    * frame-rate independent aging\n *    * added option to interpolate between slow mouse events\n *    * added option for smoothing between values to avoid large jumps in force\n */\n// smooth new sample (measurement) based on previous sample (current)\n\nfunction smoothAverage(current, measurement, smoothing = 0.9) {\n  return measurement * smoothing + current * (1.0 - smoothing);\n} // default ease\n\n\nconst easeCircleOut = x => Math.sqrt(1 - Math.pow(x - 1, 2));\n\nclass TrailTexture {\n  constructor({\n    size = 256,\n    maxAge = 750,\n    radius = 0.3,\n    intensity = 0.2,\n    interpolate = 0,\n    smoothing = 0,\n    minForce = 0.3,\n    blend = 'screen',\n    // source-over is canvas default. Others are slower\n    ease = easeCircleOut\n  } = {}) {\n    this.size = size;\n    this.maxAge = maxAge;\n    this.radius = radius;\n    this.intensity = intensity;\n    this.ease = ease;\n    this.interpolate = interpolate;\n    this.smoothing = smoothing;\n    this.minForce = minForce;\n    this.blend = blend;\n    this.trail = [];\n    this.force = 0;\n    this.initTexture();\n  }\n\n  initTexture() {\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = this.canvas.height = this.size;\n    this.ctx = this.canvas.getContext('2d');\n    this.ctx.fillStyle = 'black';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    this.texture = new Texture(this.canvas);\n    this.canvas.id = 'touchTexture';\n    this.canvas.style.width = this.canvas.style.height = `${this.canvas.width}px`;\n  }\n\n  update(delta) {\n    this.clear(); // age points\n\n    this.trail.forEach((point, i) => {\n      point.age += delta * 1000; // remove old\n\n      if (point.age > this.maxAge) {\n        this.trail.splice(i, 1);\n      }\n    }); // reset force when empty (when smoothing)\n\n    if (!this.trail.length) this.force = 0;\n    this.trail.forEach(point => {\n      this.drawTouch(point);\n    });\n    this.texture.needsUpdate = true;\n  }\n\n  clear() {\n    this.ctx.globalCompositeOperation = 'source-over';\n    this.ctx.fillStyle = 'black';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  addTouch(point) {\n    const last = this.trail[this.trail.length - 1];\n\n    if (last) {\n      const dx = last.x - point.x;\n      const dy = last.y - point.y;\n      const dd = dx * dx + dy * dy;\n      const force = Math.max(this.minForce, Math.min(dd * 10000, 1));\n      this.force = smoothAverage(force, this.force, this.smoothing);\n\n      if (!!this.interpolate) {\n        const lines = Math.ceil(dd / Math.pow(this.radius * 0.5 / this.interpolate, 2));\n\n        if (lines > 1) {\n          for (let i = 1; i < lines; i++) {\n            this.trail.push({\n              x: last.x - dx / lines * i,\n              y: last.y - dy / lines * i,\n              age: 0,\n              force\n            });\n          }\n        }\n      }\n    }\n\n    this.trail.push({\n      x: point.x,\n      y: point.y,\n      age: 0,\n      force: this.force\n    });\n  }\n\n  drawTouch(point) {\n    const pos = {\n      x: point.x * this.size,\n      y: (1 - point.y) * this.size\n    };\n    let intensity = 1;\n\n    if (point.age < this.maxAge * 0.3) {\n      intensity = this.ease(point.age / (this.maxAge * 0.3));\n    } else {\n      intensity = this.ease(1 - (point.age - this.maxAge * 0.3) / (this.maxAge * 0.7));\n    }\n\n    intensity *= point.force; // apply blending\n\n    this.ctx.globalCompositeOperation = this.blend;\n    const radius = this.size * this.radius * intensity;\n    const grd = this.ctx.createRadialGradient(pos.x, pos.y, Math.max(0, radius * 0.25), pos.x, pos.y, Math.max(0, radius));\n    grd.addColorStop(0, `rgba(255, 255, 255, ${this.intensity})`);\n    grd.addColorStop(1, `rgba(0, 0, 0, 0.0)`);\n    this.ctx.beginPath();\n    this.ctx.fillStyle = grd;\n    this.ctx.arc(pos.x, pos.y, Math.max(0, radius), 0, Math.PI * 2);\n    this.ctx.fill();\n  }\n\n}\n\nfunction useTrailTexture(config = {}) {\n  const {\n    size,\n    maxAge,\n    radius,\n    intensity,\n    interpolate,\n    smoothing,\n    minForce,\n    blend,\n    ease\n  } = config;\n  const trail = useMemo(() => new TrailTexture(config), [size, maxAge, radius, intensity, interpolate, smoothing, minForce, blend, ease]);\n  useFrame((_, delta) => void trail.update(delta));\n  const onMove = useCallback(e => trail.addTouch(e.uv), [trail]);\n  return [trail.texture, onMove];\n}\n\nexport { useTrailTexture };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/core/useTrailTexture.js"],"names":["useMemo","useCallback","useFrame","Texture","smoothAverage","current","measurement","smoothing","easeCircleOut","x","Math","sqrt","pow","TrailTexture","constructor","size","maxAge","radius","intensity","interpolate","minForce","blend","ease","trail","force","initTexture","canvas","document","createElement","width","height","ctx","getContext","fillStyle","fillRect","texture","id","style","update","delta","clear","forEach","point","i","age","splice","length","drawTouch","needsUpdate","globalCompositeOperation","addTouch","last","dx","dy","y","dd","max","min","lines","ceil","push","pos","grd","createRadialGradient","addColorStop","beginPath","arc","PI","fill","useTrailTexture","config","_","onMove","e","uv"],"mappings":"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","sourcesContent":["import { useMemo, useCallback } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Texture } from 'three';\n\n/**\n *  Adapted from https://github.com/brunoimbrizi/interactive-particles/blob/master/src/scripts/webgl/particles/TrailTexture.js\n *  Changes:\n *    * accepts config as constructor params\n *    * frame-rate independent aging\n *    * added option to interpolate between slow mouse events\n *    * added option for smoothing between values to avoid large jumps in force\n */\n\n// smooth new sample (measurement) based on previous sample (current)\nfunction smoothAverage(current, measurement, smoothing = 0.9) {\n  return measurement * smoothing + current * (1.0 - smoothing);\n} // default ease\n\n\nconst easeCircleOut = x => Math.sqrt(1 - Math.pow(x - 1, 2));\n\nclass TrailTexture {\n  constructor({\n    size = 256,\n    maxAge = 750,\n    radius = 0.3,\n    intensity = 0.2,\n    interpolate = 0,\n    smoothing = 0,\n    minForce = 0.3,\n    blend = 'screen',\n    // source-over is canvas default. Others are slower\n    ease = easeCircleOut\n  } = {}) {\n    this.size = size;\n    this.maxAge = maxAge;\n    this.radius = radius;\n    this.intensity = intensity;\n    this.ease = ease;\n    this.interpolate = interpolate;\n    this.smoothing = smoothing;\n    this.minForce = minForce;\n    this.blend = blend;\n    this.trail = [];\n    this.force = 0;\n    this.initTexture();\n  }\n\n  initTexture() {\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = this.canvas.height = this.size;\n    this.ctx = this.canvas.getContext('2d');\n    this.ctx.fillStyle = 'black';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    this.texture = new Texture(this.canvas);\n    this.canvas.id = 'touchTexture';\n    this.canvas.style.width = this.canvas.style.height = `${this.canvas.width}px`;\n  }\n\n  update(delta) {\n    this.clear(); // age points\n\n    this.trail.forEach((point, i) => {\n      point.age += delta * 1000; // remove old\n\n      if (point.age > this.maxAge) {\n        this.trail.splice(i, 1);\n      }\n    }); // reset force when empty (when smoothing)\n\n    if (!this.trail.length) this.force = 0;\n    this.trail.forEach(point => {\n      this.drawTouch(point);\n    });\n    this.texture.needsUpdate = true;\n  }\n\n  clear() {\n    this.ctx.globalCompositeOperation = 'source-over';\n    this.ctx.fillStyle = 'black';\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  addTouch(point) {\n    const last = this.trail[this.trail.length - 1];\n\n    if (last) {\n      const dx = last.x - point.x;\n      const dy = last.y - point.y;\n      const dd = dx * dx + dy * dy;\n      const force = Math.max(this.minForce, Math.min(dd * 10000, 1));\n      this.force = smoothAverage(force, this.force, this.smoothing);\n\n      if (!!this.interpolate) {\n        const lines = Math.ceil(dd / Math.pow(this.radius * 0.5 / this.interpolate, 2));\n\n        if (lines > 1) {\n          for (let i = 1; i < lines; i++) {\n            this.trail.push({\n              x: last.x - dx / lines * i,\n              y: last.y - dy / lines * i,\n              age: 0,\n              force\n            });\n          }\n        }\n      }\n    }\n\n    this.trail.push({\n      x: point.x,\n      y: point.y,\n      age: 0,\n      force: this.force\n    });\n  }\n\n  drawTouch(point) {\n    const pos = {\n      x: point.x * this.size,\n      y: (1 - point.y) * this.size\n    };\n    let intensity = 1;\n\n    if (point.age < this.maxAge * 0.3) {\n      intensity = this.ease(point.age / (this.maxAge * 0.3));\n    } else {\n      intensity = this.ease(1 - (point.age - this.maxAge * 0.3) / (this.maxAge * 0.7));\n    }\n\n    intensity *= point.force; // apply blending\n\n    this.ctx.globalCompositeOperation = this.blend;\n    const radius = this.size * this.radius * intensity;\n    const grd = this.ctx.createRadialGradient(pos.x, pos.y, Math.max(0, radius * 0.25), pos.x, pos.y, Math.max(0, radius));\n    grd.addColorStop(0, `rgba(255, 255, 255, ${this.intensity})`);\n    grd.addColorStop(1, `rgba(0, 0, 0, 0.0)`);\n    this.ctx.beginPath();\n    this.ctx.fillStyle = grd;\n    this.ctx.arc(pos.x, pos.y, Math.max(0, radius), 0, Math.PI * 2);\n    this.ctx.fill();\n  }\n\n}\n\nfunction useTrailTexture(config = {}) {\n  const {\n    size,\n    maxAge,\n    radius,\n    intensity,\n    interpolate,\n    smoothing,\n    minForce,\n    blend,\n    ease\n  } = config;\n  const trail = useMemo(() => new TrailTexture(config), [size, maxAge, radius, intensity, interpolate, smoothing, minForce, blend, ease]);\n  useFrame((_, delta) => void trail.update(delta));\n  const onMove = useCallback(e => trail.addTouch(e.uv), [trail]);\n  return [trail.texture, onMove];\n}\n\nexport { useTrailTexture };\n"]},"metadata":{},"sourceType":"module"}