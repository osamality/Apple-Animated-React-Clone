{"ast":null,"code":"import { Vector3, Mesh, InstancedInterleavedBuffer, InterleavedBufferAttribute } from 'three';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\nimport { LineMaterial } from './LineMaterial.js';\n\nconst _start = new Vector3();\n\nconst _end = new Vector3();\n\nclass Wireframe extends Mesh {\n  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({\n    color: Math.random() * 0xffffff\n  })) {\n    super(geometry, material);\n    this.isWireframe = true;\n    this.type = 'Wireframe';\n  } // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n\n  computeLineDistances() {\n    const geometry = this.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const lineDistances = new Float32Array(2 * instanceStart.count);\n\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i);\n\n      _end.fromBufferAttribute(instanceEnd, i);\n\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n    }\n\n    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n    geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n    geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n    return this;\n  }\n\n}\n\nexport { Wireframe };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/lines/Wireframe.js"],"names":["Vector3","Mesh","InstancedInterleavedBuffer","InterleavedBufferAttribute","LineSegmentsGeometry","LineMaterial","_start","_end","Wireframe","constructor","geometry","material","color","Math","random","isWireframe","type","computeLineDistances","instanceStart","attributes","instanceEnd","lineDistances","Float32Array","count","i","j","l","fromBufferAttribute","distanceTo","instanceDistanceBuffer","setAttribute"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,IAAlB,EAAwBC,0BAAxB,EAAoDC,0BAApD,QAAsF,OAAtF;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,YAAT,QAA6B,mBAA7B;;AAEA,MAAMC,MAAM,GAAG,IAAIN,OAAJ,EAAf;;AAEA,MAAMO,IAAI,GAAG,IAAIP,OAAJ,EAAb;;AAEA,MAAMQ,SAAN,SAAwBP,IAAxB,CAA6B;AAC3BQ,EAAAA,WAAW,CAACC,QAAQ,GAAG,IAAIN,oBAAJ,EAAZ,EAAwCO,QAAQ,GAAG,IAAIN,YAAJ,CAAiB;AAC7EO,IAAAA,KAAK,EAAEC,IAAI,CAACC,MAAL,KAAgB;AADsD,GAAjB,CAAnD,EAEP;AACF,UAAMJ,QAAN,EAAgBC,QAAhB;AACA,SAAKI,WAAL,GAAmB,IAAnB;AACA,SAAKC,IAAL,GAAY,WAAZ;AACD,GAP0B,CAOzB;;;AAGFC,EAAAA,oBAAoB,GAAG;AACrB,UAAMP,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMQ,aAAa,GAAGR,QAAQ,CAACS,UAAT,CAAoBD,aAA1C;AACA,UAAME,WAAW,GAAGV,QAAQ,CAACS,UAAT,CAAoBC,WAAxC;AACA,UAAMC,aAAa,GAAG,IAAIC,YAAJ,CAAiB,IAAIJ,aAAa,CAACK,KAAnC,CAAtB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAAf,EAAkBC,CAAC,GAAGR,aAAa,CAACK,KAAzC,EAAgDC,CAAC,GAAGE,CAApD,EAAuDF,CAAC,IAAIC,CAAC,IAAI,CAAjE,EAAoE;AAClEnB,MAAAA,MAAM,CAACqB,mBAAP,CAA2BT,aAA3B,EAA0CM,CAA1C;;AAEAjB,MAAAA,IAAI,CAACoB,mBAAL,CAAyBP,WAAzB,EAAsCI,CAAtC;;AAEAH,MAAAA,aAAa,CAACI,CAAD,CAAb,GAAmBA,CAAC,KAAK,CAAN,GAAU,CAAV,GAAcJ,aAAa,CAACI,CAAC,GAAG,CAAL,CAA9C;AACAJ,MAAAA,aAAa,CAACI,CAAC,GAAG,CAAL,CAAb,GAAuBJ,aAAa,CAACI,CAAD,CAAb,GAAmBnB,MAAM,CAACsB,UAAP,CAAkBrB,IAAlB,CAA1C;AACD;;AAED,UAAMsB,sBAAsB,GAAG,IAAI3B,0BAAJ,CAA+BmB,aAA/B,EAA8C,CAA9C,EAAiD,CAAjD,CAA/B,CAfqB,CAe+D;;AAEpFX,IAAAA,QAAQ,CAACoB,YAAT,CAAsB,uBAAtB,EAA+C,IAAI3B,0BAAJ,CAA+B0B,sBAA/B,EAAuD,CAAvD,EAA0D,CAA1D,CAA/C,EAjBqB,CAiByF;;AAE9GnB,IAAAA,QAAQ,CAACoB,YAAT,CAAsB,qBAAtB,EAA6C,IAAI3B,0BAAJ,CAA+B0B,sBAA/B,EAAuD,CAAvD,EAA0D,CAA1D,CAA7C,EAnBqB,CAmBuF;;AAE5G,WAAO,IAAP;AACD;;AAhC0B;;AAoC7B,SAASrB,SAAT","sourcesContent":["import { Vector3, Mesh, InstancedInterleavedBuffer, InterleavedBufferAttribute } from 'three';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\nimport { LineMaterial } from './LineMaterial.js';\n\nconst _start = new Vector3();\n\nconst _end = new Vector3();\n\nclass Wireframe extends Mesh {\n  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({\n    color: Math.random() * 0xffffff\n  })) {\n    super(geometry, material);\n    this.isWireframe = true;\n    this.type = 'Wireframe';\n  } // for backwards-compatibility, but could be a method of LineSegmentsGeometry...\n\n\n  computeLineDistances() {\n    const geometry = this.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const lineDistances = new Float32Array(2 * instanceStart.count);\n\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i);\n\n      _end.fromBufferAttribute(instanceEnd, i);\n\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n    }\n\n    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n    geometry.setAttribute('instanceDistanceStart', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n    geometry.setAttribute('instanceDistanceEnd', new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n    return this;\n  }\n\n}\n\nexport { Wireframe };\n"]},"metadata":{},"sourceType":"module"}