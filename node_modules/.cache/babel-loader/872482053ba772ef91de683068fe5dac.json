{"ast":null,"code":"let updateQueue = makeQueue();\n\nconst raf = fn => schedule(fn, updateQueue);\n\nlet writeQueue = makeQueue();\n\nraf.write = fn => schedule(fn, writeQueue);\n\nlet onStartQueue = makeQueue();\n\nraf.onStart = fn => schedule(fn, onStartQueue);\n\nlet onFrameQueue = makeQueue();\n\nraf.onFrame = fn => schedule(fn, onFrameQueue);\n\nlet onFinishQueue = makeQueue();\n\nraf.onFinish = fn => schedule(fn, onFinishQueue);\n\nlet timeouts = [];\n\nraf.setTimeout = (handler, ms) => {\n  let time = raf.now() + ms;\n\n  let cancel = () => {\n    let i = timeouts.findIndex(t => t.cancel == cancel);\n    if (~i) timeouts.splice(i, 1);\n    pendingCount -= ~i ? 1 : 0;\n  };\n\n  let timeout = {\n    time,\n    handler,\n    cancel\n  };\n  timeouts.splice(findTimeout(time), 0, timeout);\n  pendingCount += 1;\n  start();\n  return timeout;\n};\n\nlet findTimeout = time => ~(~timeouts.findIndex(t => t.time > time) || ~timeouts.length);\n\nraf.cancel = fn => {\n  onStartQueue.delete(fn);\n  onFrameQueue.delete(fn);\n  onFinishQueue.delete(fn);\n  updateQueue.delete(fn);\n  writeQueue.delete(fn);\n};\n\nraf.sync = fn => {\n  sync = true;\n  raf.batchedUpdates(fn);\n  sync = false;\n};\n\nraf.throttle = fn => {\n  let lastArgs;\n\n  function queuedFn() {\n    try {\n      fn(...lastArgs);\n    } finally {\n      lastArgs = null;\n    }\n  }\n\n  function throttled(...args) {\n    lastArgs = args;\n    raf.onStart(queuedFn);\n  }\n\n  throttled.handler = fn;\n\n  throttled.cancel = () => {\n    onStartQueue.delete(queuedFn);\n    lastArgs = null;\n  };\n\n  return throttled;\n};\n\nlet nativeRaf = typeof window != 'undefined' ? window.requestAnimationFrame : () => {};\n\nraf.use = impl => nativeRaf = impl;\n\nraf.now = typeof performance != 'undefined' ? () => performance.now() : Date.now;\n\nraf.batchedUpdates = fn => fn();\n\nraf.catch = console.error;\nraf.frameLoop = 'always';\n\nraf.advance = () => {\n  if (raf.frameLoop !== 'demand') {\n    console.warn('Cannot call the manual advancement of rafz whilst frameLoop is not set as demand');\n  } else {\n    update();\n  }\n};\n\nlet ts = -1;\nlet pendingCount = 0;\nlet sync = false;\n\nfunction schedule(fn, queue) {\n  if (sync) {\n    queue.delete(fn);\n    fn(0);\n  } else {\n    queue.add(fn);\n    start();\n  }\n}\n\nfunction start() {\n  if (ts < 0) {\n    ts = 0;\n\n    if (raf.frameLoop !== 'demand') {\n      nativeRaf(loop);\n    }\n  }\n}\n\nfunction stop() {\n  ts = -1;\n}\n\nfunction loop() {\n  if (~ts) {\n    nativeRaf(loop);\n    raf.batchedUpdates(update);\n  }\n}\n\nfunction update() {\n  let prevTs = ts;\n  ts = raf.now();\n  let count = findTimeout(ts);\n\n  if (count) {\n    eachSafely(timeouts.splice(0, count), t => t.handler());\n    pendingCount -= count;\n  }\n\n  if (!pendingCount) {\n    stop();\n    return;\n  }\n\n  onStartQueue.flush();\n  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);\n  onFrameQueue.flush();\n  writeQueue.flush();\n  onFinishQueue.flush();\n}\n\nfunction makeQueue() {\n  let next = new Set();\n  let current = next;\n  return {\n    add(fn) {\n      pendingCount += current == next && !next.has(fn) ? 1 : 0;\n      next.add(fn);\n    },\n\n    delete(fn) {\n      pendingCount -= current == next && next.has(fn) ? 1 : 0;\n      return next.delete(fn);\n    },\n\n    flush(arg) {\n      if (current.size) {\n        next = new Set();\n        pendingCount -= current.size;\n        eachSafely(current, fn => fn(arg) && next.add(fn));\n        pendingCount += next.size;\n        current = next;\n      }\n    }\n\n  };\n}\n\nfunction eachSafely(values, each) {\n  values.forEach(value => {\n    try {\n      each(value);\n    } catch (e) {\n      raf.catch(e);\n    }\n  });\n}\n\nconst __raf = {\n  count() {\n    return pendingCount;\n  },\n\n  isRunning() {\n    return ts >= 0;\n  },\n\n  clear() {\n    ts = -1;\n    timeouts = [];\n    onStartQueue = makeQueue();\n    updateQueue = makeQueue();\n    onFrameQueue = makeQueue();\n    writeQueue = makeQueue();\n    onFinishQueue = makeQueue();\n    pendingCount = 0;\n  }\n\n};\nexport { __raf, raf };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-spring/rafz/dist/react-spring-rafz.esm.js"],"names":["updateQueue","makeQueue","raf","fn","schedule","writeQueue","write","onStartQueue","onStart","onFrameQueue","onFrame","onFinishQueue","onFinish","timeouts","setTimeout","handler","ms","time","now","cancel","i","findIndex","t","splice","pendingCount","timeout","findTimeout","start","length","delete","sync","batchedUpdates","throttle","lastArgs","queuedFn","throttled","args","nativeRaf","window","requestAnimationFrame","use","impl","performance","Date","catch","console","error","frameLoop","advance","warn","update","ts","queue","add","loop","stop","prevTs","count","eachSafely","flush","Math","min","next","Set","current","has","arg","size","values","each","forEach","value","e","__raf","isRunning","clear"],"mappings":"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","sourcesContent":["let updateQueue = makeQueue();\nconst raf = fn => schedule(fn, updateQueue);\nlet writeQueue = makeQueue();\n\nraf.write = fn => schedule(fn, writeQueue);\n\nlet onStartQueue = makeQueue();\n\nraf.onStart = fn => schedule(fn, onStartQueue);\n\nlet onFrameQueue = makeQueue();\n\nraf.onFrame = fn => schedule(fn, onFrameQueue);\n\nlet onFinishQueue = makeQueue();\n\nraf.onFinish = fn => schedule(fn, onFinishQueue);\n\nlet timeouts = [];\n\nraf.setTimeout = (handler, ms) => {\n  let time = raf.now() + ms;\n\n  let cancel = () => {\n    let i = timeouts.findIndex(t => t.cancel == cancel);\n    if (~i) timeouts.splice(i, 1);\n    pendingCount -= ~i ? 1 : 0;\n  };\n\n  let timeout = {\n    time,\n    handler,\n    cancel\n  };\n  timeouts.splice(findTimeout(time), 0, timeout);\n  pendingCount += 1;\n  start();\n  return timeout;\n};\n\nlet findTimeout = time => ~(~timeouts.findIndex(t => t.time > time) || ~timeouts.length);\n\nraf.cancel = fn => {\n  onStartQueue.delete(fn);\n  onFrameQueue.delete(fn);\n  onFinishQueue.delete(fn);\n  updateQueue.delete(fn);\n  writeQueue.delete(fn);\n};\n\nraf.sync = fn => {\n  sync = true;\n  raf.batchedUpdates(fn);\n  sync = false;\n};\n\nraf.throttle = fn => {\n  let lastArgs;\n\n  function queuedFn() {\n    try {\n      fn(...lastArgs);\n    } finally {\n      lastArgs = null;\n    }\n  }\n\n  function throttled(...args) {\n    lastArgs = args;\n    raf.onStart(queuedFn);\n  }\n\n  throttled.handler = fn;\n\n  throttled.cancel = () => {\n    onStartQueue.delete(queuedFn);\n    lastArgs = null;\n  };\n\n  return throttled;\n};\n\nlet nativeRaf = typeof window != 'undefined' ? window.requestAnimationFrame : () => {};\n\nraf.use = impl => nativeRaf = impl;\n\nraf.now = typeof performance != 'undefined' ? () => performance.now() : Date.now;\n\nraf.batchedUpdates = fn => fn();\n\nraf.catch = console.error;\nraf.frameLoop = 'always';\n\nraf.advance = () => {\n  if (raf.frameLoop !== 'demand') {\n    console.warn('Cannot call the manual advancement of rafz whilst frameLoop is not set as demand');\n  } else {\n    update();\n  }\n};\n\nlet ts = -1;\nlet pendingCount = 0;\nlet sync = false;\n\nfunction schedule(fn, queue) {\n  if (sync) {\n    queue.delete(fn);\n    fn(0);\n  } else {\n    queue.add(fn);\n    start();\n  }\n}\n\nfunction start() {\n  if (ts < 0) {\n    ts = 0;\n\n    if (raf.frameLoop !== 'demand') {\n      nativeRaf(loop);\n    }\n  }\n}\n\nfunction stop() {\n  ts = -1;\n}\n\nfunction loop() {\n  if (~ts) {\n    nativeRaf(loop);\n    raf.batchedUpdates(update);\n  }\n}\n\nfunction update() {\n  let prevTs = ts;\n  ts = raf.now();\n  let count = findTimeout(ts);\n\n  if (count) {\n    eachSafely(timeouts.splice(0, count), t => t.handler());\n    pendingCount -= count;\n  }\n\n  if (!pendingCount) {\n    stop();\n    return;\n  }\n\n  onStartQueue.flush();\n  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);\n  onFrameQueue.flush();\n  writeQueue.flush();\n  onFinishQueue.flush();\n}\n\nfunction makeQueue() {\n  let next = new Set();\n  let current = next;\n  return {\n    add(fn) {\n      pendingCount += current == next && !next.has(fn) ? 1 : 0;\n      next.add(fn);\n    },\n\n    delete(fn) {\n      pendingCount -= current == next && next.has(fn) ? 1 : 0;\n      return next.delete(fn);\n    },\n\n    flush(arg) {\n      if (current.size) {\n        next = new Set();\n        pendingCount -= current.size;\n        eachSafely(current, fn => fn(arg) && next.add(fn));\n        pendingCount += next.size;\n        current = next;\n      }\n    }\n\n  };\n}\n\nfunction eachSafely(values, each) {\n  values.forEach(value => {\n    try {\n      each(value);\n    } catch (e) {\n      raf.catch(e);\n    }\n  });\n}\n\nconst __raf = {\n  count() {\n    return pendingCount;\n  },\n\n  isRunning() {\n    return ts >= 0;\n  },\n\n  clear() {\n    ts = -1;\n    timeouts = [];\n    onStartQueue = makeQueue();\n    updateQueue = makeQueue();\n    onFrameQueue = makeQueue();\n    writeQueue = makeQueue();\n    onFinishQueue = makeQueue();\n    pendingCount = 0;\n  }\n\n};\n\nexport { __raf, raf };\n"]},"metadata":{},"sourceType":"module"}