{"ast":null,"code":"import { DataTexture, FloatType, UnsignedIntType, RGBAFormat, RGIntegerFormat, NearestFilter } from 'three';\nimport { FloatVertexAttributeTexture, UIntVertexAttributeTexture } from './VertexAttributeTexture.js';\nimport { BYTES_PER_NODE } from '../core/Constants.js';\nimport { BOUNDING_DATA_INDEX, COUNT, IS_LEAF, RIGHT_NODE, OFFSET, SPLIT_AXIS } from '../core/nodeBufferFunctions.js';\n\nfunction bvhToTextures(bvh, boundsTexture, contentsTexture) {\n  const roots = bvh._roots;\n\n  if (roots.length !== 1) {\n    throw new Error('MeshBVHUniformStruct: Multi-root BVHs not supported.');\n  }\n\n  const root = roots[0];\n  const uint16Array = new Uint16Array(root);\n  const uint32Array = new Uint32Array(root);\n  const float32Array = new Float32Array(root); // Both bounds need two elements per node so compute the height so it's twice as long as\n  // the width so we can expand the row by two and still have a square texture\n\n  const nodeCount = root.byteLength / BYTES_PER_NODE;\n  const boundsDimension = 2 * Math.ceil(Math.sqrt(nodeCount / 2));\n  const boundsArray = new Float32Array(4 * boundsDimension * boundsDimension);\n  const contentsDimension = Math.ceil(Math.sqrt(nodeCount));\n  const contentsArray = new Uint32Array(2 * contentsDimension * contentsDimension);\n\n  for (let i = 0; i < nodeCount; i++) {\n    const nodeIndex32 = i * BYTES_PER_NODE / 4;\n    const nodeIndex16 = nodeIndex32 * 2;\n    const boundsIndex = BOUNDING_DATA_INDEX(nodeIndex32);\n\n    for (let b = 0; b < 3; b++) {\n      boundsArray[8 * i + 0 + b] = float32Array[boundsIndex + 0 + b];\n      boundsArray[8 * i + 4 + b] = float32Array[boundsIndex + 3 + b];\n    }\n\n    if (IS_LEAF(nodeIndex16, uint16Array)) {\n      const count = COUNT(nodeIndex16, uint16Array);\n      const offset = OFFSET(nodeIndex32, uint32Array);\n      const mergedLeafCount = 0xffff0000 | count;\n      contentsArray[i * 2 + 0] = mergedLeafCount;\n      contentsArray[i * 2 + 1] = offset;\n    } else {\n      const rightIndex = 4 * RIGHT_NODE(nodeIndex32, uint32Array) / BYTES_PER_NODE;\n      const splitAxis = SPLIT_AXIS(nodeIndex32, uint32Array);\n      contentsArray[i * 2 + 0] = splitAxis;\n      contentsArray[i * 2 + 1] = rightIndex;\n    }\n  }\n\n  boundsTexture.image.data = boundsArray;\n  boundsTexture.image.width = boundsDimension;\n  boundsTexture.image.height = boundsDimension;\n  boundsTexture.format = RGBAFormat;\n  boundsTexture.type = FloatType;\n  boundsTexture.internalFormat = 'RGBA32F';\n  boundsTexture.minFilter = NearestFilter;\n  boundsTexture.magFilter = NearestFilter;\n  boundsTexture.generateMipmaps = false;\n  boundsTexture.needsUpdate = true;\n  boundsTexture.dispose();\n  contentsTexture.image.data = contentsArray;\n  contentsTexture.image.width = contentsDimension;\n  contentsTexture.image.height = contentsDimension;\n  contentsTexture.format = RGIntegerFormat;\n  contentsTexture.type = UnsignedIntType;\n  contentsTexture.internalFormat = 'RG32UI';\n  contentsTexture.minFilter = NearestFilter;\n  contentsTexture.magFilter = NearestFilter;\n  contentsTexture.generateMipmaps = false;\n  contentsTexture.needsUpdate = true;\n  contentsTexture.dispose();\n}\n\nexport class MeshBVHUniformStruct {\n  constructor() {\n    this.autoDispose = true;\n    this.index = new UIntVertexAttributeTexture();\n    this.position = new FloatVertexAttributeTexture();\n    this.bvhBounds = new DataTexture();\n    this.bvhContents = new DataTexture();\n    this.index.overrideItemSize = 3;\n  }\n\n  updateFrom(bvh) {\n    const {\n      geometry\n    } = bvh;\n    bvhToTextures(bvh, this.bvhBounds, this.bvhContents);\n    this.index.updateFrom(geometry.index);\n    this.position.updateFrom(geometry.attributes.position);\n  }\n\n  dispose() {\n    const {\n      index,\n      position,\n      bvhBounds,\n      bvhContents\n    } = this;\n    if (index) index.dispose();\n    if (position) position.dispose();\n    if (bvhBounds) bvhBounds.dispose();\n    if (bvhContents) bvhContents.dispose();\n  }\n\n}","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-mesh-bvh/src/gpu/MeshBVHUniformStruct.js"],"names":["DataTexture","FloatType","UnsignedIntType","RGBAFormat","RGIntegerFormat","NearestFilter","FloatVertexAttributeTexture","UIntVertexAttributeTexture","BYTES_PER_NODE","BOUNDING_DATA_INDEX","COUNT","IS_LEAF","RIGHT_NODE","OFFSET","SPLIT_AXIS","bvhToTextures","bvh","boundsTexture","contentsTexture","roots","_roots","length","Error","root","uint16Array","Uint16Array","uint32Array","Uint32Array","float32Array","Float32Array","nodeCount","byteLength","boundsDimension","Math","ceil","sqrt","boundsArray","contentsDimension","contentsArray","i","nodeIndex32","nodeIndex16","boundsIndex","b","count","offset","mergedLeafCount","rightIndex","splitAxis","image","data","width","height","format","type","internalFormat","minFilter","magFilter","generateMipmaps","needsUpdate","dispose","MeshBVHUniformStruct","constructor","autoDispose","index","position","bvhBounds","bvhContents","overrideItemSize","updateFrom","geometry","attributes"],"mappings":"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","sourcesContent":["import {\n\tDataTexture,\n\tFloatType,\n\tUnsignedIntType,\n\tRGBAFormat,\n\tRGIntegerFormat,\n\tNearestFilter,\n} from 'three';\nimport {\n\tFloatVertexAttributeTexture,\n\tUIntVertexAttributeTexture,\n} from './VertexAttributeTexture.js';\nimport { BYTES_PER_NODE } from '../core/Constants.js';\nimport {\n\tBOUNDING_DATA_INDEX,\n\tCOUNT,\n\tIS_LEAF,\n\tRIGHT_NODE,\n\tOFFSET,\n\tSPLIT_AXIS,\n} from '../core/nodeBufferFunctions.js';\n\nfunction bvhToTextures( bvh, boundsTexture, contentsTexture ) {\n\n\tconst roots = bvh._roots;\n\n\tif ( roots.length !== 1 ) {\n\n\t\tthrow new Error( 'MeshBVHUniformStruct: Multi-root BVHs not supported.' );\n\n\t}\n\n\tconst root = roots[ 0 ];\n\tconst uint16Array = new Uint16Array( root );\n\tconst uint32Array = new Uint32Array( root );\n\tconst float32Array = new Float32Array( root );\n\n\t// Both bounds need two elements per node so compute the height so it's twice as long as\n\t// the width so we can expand the row by two and still have a square texture\n\tconst nodeCount = root.byteLength / BYTES_PER_NODE;\n\tconst boundsDimension = 2 * Math.ceil( Math.sqrt( nodeCount / 2 ) );\n\tconst boundsArray = new Float32Array( 4 * boundsDimension * boundsDimension );\n\n\tconst contentsDimension = Math.ceil( Math.sqrt( nodeCount ) );\n\tconst contentsArray = new Uint32Array( 2 * contentsDimension * contentsDimension );\n\n\tfor ( let i = 0; i < nodeCount; i ++ ) {\n\n\t\tconst nodeIndex32 = i * BYTES_PER_NODE / 4;\n\t\tconst nodeIndex16 = nodeIndex32 * 2;\n\t\tconst boundsIndex = BOUNDING_DATA_INDEX( nodeIndex32 );\n\t\tfor ( let b = 0; b < 3; b ++ ) {\n\n\t\t\tboundsArray[ 8 * i + 0 + b ] = float32Array[ boundsIndex + 0 + b ];\n\t\t\tboundsArray[ 8 * i + 4 + b ] = float32Array[ boundsIndex + 3 + b ];\n\n\t\t}\n\n\t\tif ( IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\n\t\t\tconst mergedLeafCount = 0xffff0000 | count;\n\t\t\tcontentsArray[ i * 2 + 0 ] = mergedLeafCount;\n\t\t\tcontentsArray[ i * 2 + 1 ] = offset;\n\n\t\t} else {\n\n\t\t\tconst rightIndex = 4 * RIGHT_NODE( nodeIndex32, uint32Array ) / BYTES_PER_NODE;\n\t\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\n\t\t\tcontentsArray[ i * 2 + 0 ] = splitAxis;\n\t\t\tcontentsArray[ i * 2 + 1 ] = rightIndex;\n\n\t\t}\n\n\t}\n\n\tboundsTexture.image.data = boundsArray;\n\tboundsTexture.image.width = boundsDimension;\n\tboundsTexture.image.height = boundsDimension;\n\tboundsTexture.format = RGBAFormat;\n\tboundsTexture.type = FloatType;\n\tboundsTexture.internalFormat = 'RGBA32F';\n\tboundsTexture.minFilter = NearestFilter;\n\tboundsTexture.magFilter = NearestFilter;\n\tboundsTexture.generateMipmaps = false;\n\tboundsTexture.needsUpdate = true;\n\tboundsTexture.dispose();\n\n\tcontentsTexture.image.data = contentsArray;\n\tcontentsTexture.image.width = contentsDimension;\n\tcontentsTexture.image.height = contentsDimension;\n\tcontentsTexture.format = RGIntegerFormat;\n\tcontentsTexture.type = UnsignedIntType;\n\tcontentsTexture.internalFormat = 'RG32UI';\n\tcontentsTexture.minFilter = NearestFilter;\n\tcontentsTexture.magFilter = NearestFilter;\n\tcontentsTexture.generateMipmaps = false;\n\tcontentsTexture.needsUpdate = true;\n\tcontentsTexture.dispose();\n\n}\n\nexport class MeshBVHUniformStruct {\n\n\tconstructor() {\n\n\t\tthis.autoDispose = true;\n\t\tthis.index = new UIntVertexAttributeTexture();\n\t\tthis.position = new FloatVertexAttributeTexture();\n\t\tthis.bvhBounds = new DataTexture();\n\t\tthis.bvhContents = new DataTexture();\n\n\t\tthis.index.overrideItemSize = 3;\n\n\t}\n\n\tupdateFrom( bvh ) {\n\n\t\tconst { geometry } = bvh;\n\n\t\tbvhToTextures( bvh, this.bvhBounds, this.bvhContents );\n\n\t\tthis.index.updateFrom( geometry.index );\n\t\tthis.position.updateFrom( geometry.attributes.position );\n\n\t}\n\n\tdispose() {\n\n\t\tconst { index, position, bvhBounds, bvhContents } = this;\n\n\t\tif ( index ) index.dispose();\n\t\tif ( position ) position.dispose();\n\t\tif ( bvhBounds ) bvhBounds.dispose();\n\t\tif ( bvhContents ) bvhContents.dispose();\n\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}