{"ast":null,"code":"import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  const material = class material extends THREE.ShaderMaterial {\n    constructor(parameters = {}) {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      }); // Create getter/setters\n\n      this.key = '';\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      })); // Assign parameters, this might include uniforms\n\n      Object.assign(this, parameters); // Call onInit\n\n      if (onInit) onInit(this);\n    }\n\n  };\n  material.key = THREE.MathUtils.generateUUID();\n  return material;\n}\n\nexport { shaderMaterial };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/@react-three/drei/core/shaderMaterial.js"],"names":["THREE","shaderMaterial","uniforms","vertexShader","fragmentShader","onInit","material","ShaderMaterial","constructor","parameters","entries","Object","reduce","acc","name","value","uniform","UniformsUtils","clone","key","forEach","defineProperty","get","set","v","assign","MathUtils","generateUUID"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,YAAlC,EAAgDC,cAAhD,EAAgEC,MAAhE,EAAwE;AACtE,QAAMC,QAAQ,GAAG,MAAMA,QAAN,SAAuBN,KAAK,CAACO,cAA7B,CAA4C;AAC3DC,IAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EAAkB;AAC3B,YAAMC,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeR,QAAf,CAAhB,CAD2B,CACe;;AAE1C,YAAM;AACJA,QAAAA,QAAQ,EAAEQ,OAAO,CAACE,MAAR,CAAe,CAACC,GAAD,EAAM,CAACC,IAAD,EAAOC,KAAP,CAAN,KAAwB;AAC/C,gBAAMC,OAAO,GAAGhB,KAAK,CAACiB,aAAN,CAAoBC,KAApB,CAA0B;AACxC,aAACJ,IAAD,GAAQ;AACNC,cAAAA;AADM;AADgC,WAA1B,CAAhB;AAKA,iBAAO,EAAE,GAAGF,GAAL;AACL,eAAGG;AADE,WAAP;AAGD,SATS,EASP,EATO,CADN;AAWJb,QAAAA,YAXI;AAYJC,QAAAA;AAZI,OAAN,EAH2B,CAgBvB;;AAEJ,WAAKe,GAAL,GAAW,EAAX;AACAT,MAAAA,OAAO,CAACU,OAAR,CAAgB,CAAC,CAACN,IAAD,CAAD,KAAYH,MAAM,CAACU,cAAP,CAAsB,IAAtB,EAA4BP,IAA5B,EAAkC;AAC5DQ,QAAAA,GAAG,EAAE,MAAM,KAAKpB,QAAL,CAAcY,IAAd,EAAoBC,KAD6B;AAE5DQ,QAAAA,GAAG,EAAEC,CAAC,IAAI,KAAKtB,QAAL,CAAcY,IAAd,EAAoBC,KAApB,GAA4BS;AAFsB,OAAlC,CAA5B,EAnB2B,CAsBtB;;AAELb,MAAAA,MAAM,CAACc,MAAP,CAAc,IAAd,EAAoBhB,UAApB,EAxB2B,CAwBM;;AAEjC,UAAIJ,MAAJ,EAAYA,MAAM,CAAC,IAAD,CAAN;AACb;;AA5B0D,GAA7D;AA+BAC,EAAAA,QAAQ,CAACa,GAAT,GAAenB,KAAK,CAAC0B,SAAN,CAAgBC,YAAhB,EAAf;AACA,SAAOrB,QAAP;AACD;;AAED,SAASL,cAAT","sourcesContent":["import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  const material = class material extends THREE.ShaderMaterial {\n    constructor(parameters = {}) {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      }); // Create getter/setters\n\n      this.key = '';\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      })); // Assign parameters, this might include uniforms\n\n      Object.assign(this, parameters); // Call onInit\n\n      if (onInit) onInit(this);\n    }\n\n  };\n  material.key = THREE.MathUtils.generateUUID();\n  return material;\n}\n\nexport { shaderMaterial };\n"]},"metadata":{},"sourceType":"module"}