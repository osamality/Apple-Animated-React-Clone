{"ast":null,"code":"import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, sRGBEncoding, LinearEncoding, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FloatType, HalfFloatType, DataTexture, Data3DTexture, RGFormat, RedFormat } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM } from 'ktx-parse';\nimport { ZSTDDecoder } from 'zstddec';\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nconst _taskCache = new WeakMap();\n\nlet _activeLoaders = 0;\n\nlet _zstd;\n\nclass KTX2Loader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n\n    if (renderer.capabilities.isWebGL2) {\n      // https://github.com/mrdoob/three.js/pull/22928\n      this.workerConfig.etc1Supported = false;\n    }\n\n    return this;\n  }\n\n  init() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync('basis_transcoder.js'); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = KTX2Loader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: 'init',\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n\n      if (_activeLoaders > 0) {\n        // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n        console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n      }\n\n      _activeLoaders++;\n    }\n\n    return this.transcoderPending;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n    }\n\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n    }, onProgress, onError);\n  }\n\n  _createTextureFrom(transcodeResult) {\n    const {\n      mipmaps,\n      width,\n      height,\n      format,\n      type,\n      error,\n      dfdTransferFn,\n      dfdFlags\n    } = transcodeResult;\n    if (type === 'error') return Promise.reject(error);\n    const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? sRGBEncoding : LinearEncoding;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|DataTexture|Data3DTexture>}\n   */\n\n\n  _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    } //\n\n\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({\n        type: 'transcode',\n        buffer,\n        taskConfig: taskConfig\n      }, [buffer]);\n    }).then(e => this._createTextureFrom(e.data)); // Cache the task result.\n\n    _taskCache.set(buffer, {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n\n}\n/* CONSTANTS */\n\n\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            } = transcode(message.buffer);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const levelInfo = ktx2File.getImageLevelInfo(mip, 0, 0);\n      const mipWidth = levelInfo.origWidth;\n      const mipHeight = levelInfo.origHeight;\n      const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, 0, 0, transcoderFormat));\n      const status = ktx2File.transcodeImage(dst, mip, 0, 0, transcoderFormat, 0, -1, -1);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat,\n      dfdTransferFn,\n      dfdFlags\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n}; //\n// DataTexture and Data3DTexture parsing.\n\n\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8G8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8_SRGB]: sRGBEncoding\n};\n\nasync function createDataTexture(container) {\n  const {\n    vkFormat,\n    pixelWidth,\n    pixelHeight,\n    pixelDepth\n  } = container;\n\n  if (FORMAT_MAP[vkFormat] === undefined) {\n    throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n  } //\n\n\n  const level = container.levels[0];\n  let levelData;\n  let view;\n\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n  }\n\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  } //\n\n\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || LinearEncoding;\n  texture.needsUpdate = true; //\n\n  return Promise.resolve(texture);\n}\n\nexport { KTX2Loader };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/loaders/KTX2Loader.js"],"names":["Loader","FileLoader","CompressedTexture","UnsignedByteType","LinearFilter","LinearMipmapLinearFilter","sRGBEncoding","LinearEncoding","RGBAFormat","RGBA_ASTC_4x4_Format","RGBA_BPTC_Format","RGBA_ETC2_EAC_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_S3TC_DXT5_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGB_PVRTC_4BPPV1_Format","RGB_S3TC_DXT1_Format","FloatType","HalfFloatType","DataTexture","Data3DTexture","RGFormat","RedFormat","WorkerPool","KHR_DF_TRANSFER_SRGB","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","read","VK_FORMAT_UNDEFINED","KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_ZSTD","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8_UNORM","ZSTDDecoder","_taskCache","WeakMap","_activeLoaders","_zstd","KTX2Loader","constructor","manager","transcoderPath","transcoderBinary","transcoderPending","workerPool","workerSourceURL","workerConfig","MSC_TRANSCODER","console","warn","setTranscoderPath","path","setWorkerLimit","num","detectSupport","renderer","astcSupported","extensions","has","etc1Supported","etc2Supported","dxtSupported","bptcSupported","pvrtcSupported","capabilities","isWebGL2","init","jsLoader","setPath","setWithCredentials","withCredentials","jsContent","loadAsync","binaryLoader","setResponseType","binaryContent","Promise","all","then","fn","BasisWorker","toString","body","JSON","stringify","EngineFormat","TranscoderFormat","BasisFormat","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","setWorkerCreator","worker","Worker","slice","postMessage","type","config","load","url","onLoad","onProgress","onError","Error","loader","buffer","cachedTask","get","promise","catch","_createTexture","texture","_createTextureFrom","transcodeResult","mipmaps","width","height","format","error","dfdTransferFn","dfdFlags","reject","minFilter","length","magFilter","generateMipmaps","needsUpdate","encoding","premultiplyAlpha","container","Uint8Array","vkFormat","createDataTexture","taskConfig","texturePending","e","data","set","dispose","revokeObjectURL","ETC1S","UASTC_4x4","ETC1","ETC2","BC1","BC3","BC4","BC5","BC7_M6_OPAQUE_ONLY","BC7_M5","PVRTC1_4_RGB","PVRTC1_4_RGBA","ASTC_4x4","ATC_RGB","ATC_RGBA_INTERPOLATED_ALPHA","RGBA32","RGB565","BGR565","RGBA4444","BasisModule","_EngineFormat","_TranscoderFormat","_BasisFormat","self","addEventListener","message","hasAlpha","transcode","buffers","i","push","id","wasmBinary","resolve","onRuntimeInitialized","BASIS","initializeBasis","KTX2File","undefined","ktx2File","cleanup","close","delete","isValid","basisFormat","isUASTC","getWidth","getHeight","levels","getLevels","getHasAlpha","getDFDTransferFunc","getDFDFlags","transcoderFormat","engineFormat","getTranscoderFormat","startTranscoding","mip","levelInfo","getImageLevelInfo","mipWidth","origWidth","mipHeight","origHeight","dst","getImageTranscodedSizeInBytes","status","transcodeImage","FORMAT_OPTIONS","if","priorityETC1S","Infinity","priorityUASTC","needsPowerOfTwo","ETC1S_OPTIONS","sort","a","b","UASTC_OPTIONS","options","opt","includes","isPowerOfTwo","value","FORMAT_MAP","TYPE_MAP","ENCODING_MAP","pixelWidth","pixelHeight","pixelDepth","level","levelData","view","supercompressionScheme","zstd","decode","uncompressedByteLength","Float32Array","byteOffset","byteLength","BYTES_PER_ELEMENT","Uint16Array"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, CompressedTexture, UnsignedByteType, LinearFilter, LinearMipmapLinearFilter, sRGBEncoding, LinearEncoding, RGBAFormat, RGBA_ASTC_4x4_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT5_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, FloatType, HalfFloatType, DataTexture, Data3DTexture, RGFormat, RedFormat } from 'three';\nimport { WorkerPool } from '../utils/WorkerPool.js';\nimport { KHR_DF_TRANSFER_SRGB, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, read, VK_FORMAT_UNDEFINED, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZSTD, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UNORM } from 'ktx-parse';\nimport { ZSTDDecoder } from 'zstddec';\n\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats, as well as some\n * uncompressed DataTexture and Data3DTexture formats.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nconst _taskCache = new WeakMap();\n\nlet _activeLoaders = 0;\n\nlet _zstd;\n\nclass KTX2Loader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.transcoderPath = '';\n    this.transcoderBinary = null;\n    this.transcoderPending = null;\n    this.workerPool = new WorkerPool();\n    this.workerSourceURL = '';\n    this.workerConfig = null;\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n\n  setTranscoderPath(path) {\n    this.transcoderPath = path;\n    return this;\n  }\n\n  setWorkerLimit(num) {\n    this.workerPool.setWorkerLimit(num);\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.workerConfig = {\n      astcSupported: renderer.extensions.has('WEBGL_compressed_texture_astc'),\n      etc1Supported: renderer.extensions.has('WEBGL_compressed_texture_etc1'),\n      etc2Supported: renderer.extensions.has('WEBGL_compressed_texture_etc'),\n      dxtSupported: renderer.extensions.has('WEBGL_compressed_texture_s3tc'),\n      bptcSupported: renderer.extensions.has('EXT_texture_compression_bptc'),\n      pvrtcSupported: renderer.extensions.has('WEBGL_compressed_texture_pvrtc') || renderer.extensions.has('WEBKIT_WEBGL_compressed_texture_pvrtc')\n    };\n\n    if (renderer.capabilities.isWebGL2) {\n      // https://github.com/mrdoob/three.js/pull/22928\n      this.workerConfig.etc1Supported = false;\n    }\n\n    return this;\n  }\n\n  init() {\n    if (!this.transcoderPending) {\n      // Load transcoder wrapper.\n      const jsLoader = new FileLoader(this.manager);\n      jsLoader.setPath(this.transcoderPath);\n      jsLoader.setWithCredentials(this.withCredentials);\n      const jsContent = jsLoader.loadAsync('basis_transcoder.js'); // Load transcoder WASM binary.\n\n      const binaryLoader = new FileLoader(this.manager);\n      binaryLoader.setPath(this.transcoderPath);\n      binaryLoader.setResponseType('arraybuffer');\n      binaryLoader.setWithCredentials(this.withCredentials);\n      const binaryContent = binaryLoader.loadAsync('basis_transcoder.wasm');\n      this.transcoderPending = Promise.all([jsContent, binaryContent]).then(([jsContent, binaryContent]) => {\n        const fn = KTX2Loader.BasisWorker.toString();\n        const body = ['/* constants */', 'let _EngineFormat = ' + JSON.stringify(KTX2Loader.EngineFormat), 'let _TranscoderFormat = ' + JSON.stringify(KTX2Loader.TranscoderFormat), 'let _BasisFormat = ' + JSON.stringify(KTX2Loader.BasisFormat), '/* basis_transcoder.js */', jsContent, '/* worker */', fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))].join('\\n');\n        this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n        this.transcoderBinary = binaryContent;\n        this.workerPool.setWorkerCreator(() => {\n          const worker = new Worker(this.workerSourceURL);\n          const transcoderBinary = this.transcoderBinary.slice(0);\n          worker.postMessage({\n            type: 'init',\n            config: this.workerConfig,\n            transcoderBinary\n          }, [transcoderBinary]);\n          return worker;\n        });\n      });\n\n      if (_activeLoaders > 0) {\n        // Each instance loads a transcoder and allocates workers, increasing network and memory cost.\n        console.warn('THREE.KTX2Loader: Multiple active KTX2 loaders may cause performance issues.' + ' Use a single KTX2Loader instance, or call .dispose() on old instances.');\n      }\n\n      _activeLoaders++;\n    }\n\n    return this.transcoderPending;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    if (this.workerConfig === null) {\n      throw new Error('THREE.KTX2Loader: Missing initialization with `.detectSupport( renderer )`.');\n    }\n\n    const loader = new FileLoader(this.manager);\n    loader.setResponseType('arraybuffer');\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, buffer => {\n      // Check for an existing task using this buffer. A transferred buffer cannot be transferred\n      // again from this thread.\n      if (_taskCache.has(buffer)) {\n        const cachedTask = _taskCache.get(buffer);\n\n        return cachedTask.promise.then(onLoad).catch(onError);\n      }\n\n      this._createTexture(buffer).then(texture => onLoad ? onLoad(texture) : null).catch(onError);\n    }, onProgress, onError);\n  }\n\n  _createTextureFrom(transcodeResult) {\n    const {\n      mipmaps,\n      width,\n      height,\n      format,\n      type,\n      error,\n      dfdTransferFn,\n      dfdFlags\n    } = transcodeResult;\n    if (type === 'error') return Promise.reject(error);\n    const texture = new CompressedTexture(mipmaps, width, height, format, UnsignedByteType);\n    texture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n    texture.magFilter = LinearFilter;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    texture.encoding = dfdTransferFn === KHR_DF_TRANSFER_SRGB ? sRGBEncoding : LinearEncoding;\n    texture.premultiplyAlpha = !!(dfdFlags & KHR_DF_FLAG_ALPHA_PREMULTIPLIED);\n    return texture;\n  }\n  /**\n   * @param {ArrayBuffer} buffer\n   * @param {object?} config\n   * @return {Promise<CompressedTexture|DataTexture|Data3DTexture>}\n   */\n\n\n  _createTexture(buffer, config = {}) {\n    const container = read(new Uint8Array(buffer));\n\n    if (container.vkFormat !== VK_FORMAT_UNDEFINED) {\n      return createDataTexture(container);\n    } //\n\n\n    const taskConfig = config;\n    const texturePending = this.init().then(() => {\n      return this.workerPool.postMessage({\n        type: 'transcode',\n        buffer,\n        taskConfig: taskConfig\n      }, [buffer]);\n    }).then(e => this._createTextureFrom(e.data)); // Cache the task result.\n\n    _taskCache.set(buffer, {\n      promise: texturePending\n    });\n\n    return texturePending;\n  }\n\n  dispose() {\n    this.workerPool.dispose();\n    if (this.workerSourceURL) URL.revokeObjectURL(this.workerSourceURL);\n    _activeLoaders--;\n    return this;\n  }\n\n}\n/* CONSTANTS */\n\n\nKTX2Loader.BasisFormat = {\n  ETC1S: 0,\n  UASTC_4x4: 1\n};\nKTX2Loader.TranscoderFormat = {\n  ETC1: 0,\n  ETC2: 1,\n  BC1: 2,\n  BC3: 3,\n  BC4: 4,\n  BC5: 5,\n  BC7_M6_OPAQUE_ONLY: 6,\n  BC7_M5: 7,\n  PVRTC1_4_RGB: 8,\n  PVRTC1_4_RGBA: 9,\n  ASTC_4x4: 10,\n  ATC_RGB: 11,\n  ATC_RGBA_INTERPOLATED_ALPHA: 12,\n  RGBA32: 13,\n  RGB565: 14,\n  BGR565: 15,\n  RGBA4444: 16\n};\nKTX2Loader.EngineFormat = {\n  RGBAFormat: RGBAFormat,\n  RGBA_ASTC_4x4_Format: RGBA_ASTC_4x4_Format,\n  RGBA_BPTC_Format: RGBA_BPTC_Format,\n  RGBA_ETC2_EAC_Format: RGBA_ETC2_EAC_Format,\n  RGBA_PVRTC_4BPPV1_Format: RGBA_PVRTC_4BPPV1_Format,\n  RGBA_S3TC_DXT5_Format: RGBA_S3TC_DXT5_Format,\n  RGB_ETC1_Format: RGB_ETC1_Format,\n  RGB_ETC2_Format: RGB_ETC2_Format,\n  RGB_PVRTC_4BPPV1_Format: RGB_PVRTC_4BPPV1_Format,\n  RGB_S3TC_DXT1_Format: RGB_S3TC_DXT1_Format\n};\n/* WEB WORKER */\n\nKTX2Loader.BasisWorker = function () {\n  let config;\n  let transcoderPending;\n  let BasisModule;\n  const EngineFormat = _EngineFormat; // eslint-disable-line no-undef\n\n  const TranscoderFormat = _TranscoderFormat; // eslint-disable-line no-undef\n\n  const BasisFormat = _BasisFormat; // eslint-disable-line no-undef\n\n  self.addEventListener('message', function (e) {\n    const message = e.data;\n\n    switch (message.type) {\n      case 'init':\n        config = message.config;\n        init(message.transcoderBinary);\n        break;\n\n      case 'transcode':\n        transcoderPending.then(() => {\n          try {\n            const {\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            } = transcode(message.buffer);\n            const buffers = [];\n\n            for (let i = 0; i < mipmaps.length; ++i) {\n              buffers.push(mipmaps[i].data.buffer);\n            }\n\n            self.postMessage({\n              type: 'transcode',\n              id: message.id,\n              width,\n              height,\n              hasAlpha,\n              mipmaps,\n              format,\n              dfdTransferFn,\n              dfdFlags\n            }, buffers);\n          } catch (error) {\n            console.error(error);\n            self.postMessage({\n              type: 'error',\n              id: message.id,\n              error: error.message\n            });\n          }\n        });\n        break;\n    }\n  });\n\n  function init(wasmBinary) {\n    transcoderPending = new Promise(resolve => {\n      BasisModule = {\n        wasmBinary,\n        onRuntimeInitialized: resolve\n      };\n      BASIS(BasisModule); // eslint-disable-line no-undef\n    }).then(() => {\n      BasisModule.initializeBasis();\n\n      if (BasisModule.KTX2File === undefined) {\n        console.warn('THREE.KTX2Loader: Please update Basis Universal transcoder.');\n      }\n    });\n  }\n\n  function transcode(buffer) {\n    const ktx2File = new BasisModule.KTX2File(new Uint8Array(buffer));\n\n    function cleanup() {\n      ktx2File.close();\n      ktx2File.delete();\n    }\n\n    if (!ktx2File.isValid()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid or unsupported .ktx2 file');\n    }\n\n    const basisFormat = ktx2File.isUASTC() ? BasisFormat.UASTC_4x4 : BasisFormat.ETC1S;\n    const width = ktx2File.getWidth();\n    const height = ktx2File.getHeight();\n    const levels = ktx2File.getLevels();\n    const hasAlpha = ktx2File.getHasAlpha();\n    const dfdTransferFn = ktx2File.getDFDTransferFunc();\n    const dfdFlags = ktx2File.getDFDFlags();\n    const {\n      transcoderFormat,\n      engineFormat\n    } = getTranscoderFormat(basisFormat, width, height, hasAlpha);\n\n    if (!width || !height || !levels) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader:\tInvalid texture');\n    }\n\n    if (!ktx2File.startTranscoding()) {\n      cleanup();\n      throw new Error('THREE.KTX2Loader: .startTranscoding failed');\n    }\n\n    const mipmaps = [];\n\n    for (let mip = 0; mip < levels; mip++) {\n      const levelInfo = ktx2File.getImageLevelInfo(mip, 0, 0);\n      const mipWidth = levelInfo.origWidth;\n      const mipHeight = levelInfo.origHeight;\n      const dst = new Uint8Array(ktx2File.getImageTranscodedSizeInBytes(mip, 0, 0, transcoderFormat));\n      const status = ktx2File.transcodeImage(dst, mip, 0, 0, transcoderFormat, 0, -1, -1);\n\n      if (!status) {\n        cleanup();\n        throw new Error('THREE.KTX2Loader: .transcodeImage failed.');\n      }\n\n      mipmaps.push({\n        data: dst,\n        width: mipWidth,\n        height: mipHeight\n      });\n    }\n\n    cleanup();\n    return {\n      width,\n      height,\n      hasAlpha,\n      mipmaps,\n      format: engineFormat,\n      dfdTransferFn,\n      dfdFlags\n    };\n  } //\n  // Optimal choice of a transcoder target format depends on the Basis format (ETC1S or UASTC),\n  // device capabilities, and texture dimensions. The list below ranks the formats separately\n  // for ETC1S and UASTC.\n  //\n  // In some cases, transcoding UASTC to RGBA32 might be preferred for higher quality (at\n  // significant memory cost) compared to ETC1/2, BC1/3, and PVRTC. The transcoder currently\n  // chooses RGBA32 only as a last resort and does not expose that option to the caller.\n\n\n  const FORMAT_OPTIONS = [{\n    if: 'astcSupported',\n    basisFormat: [BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ASTC_4x4, TranscoderFormat.ASTC_4x4],\n    engineFormat: [EngineFormat.RGBA_ASTC_4x4_Format, EngineFormat.RGBA_ASTC_4x4_Format],\n    priorityETC1S: Infinity,\n    priorityUASTC: 1,\n    needsPowerOfTwo: false\n  }, {\n    if: 'bptcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC7_M5, TranscoderFormat.BC7_M5],\n    engineFormat: [EngineFormat.RGBA_BPTC_Format, EngineFormat.RGBA_BPTC_Format],\n    priorityETC1S: 3,\n    priorityUASTC: 2,\n    needsPowerOfTwo: false\n  }, {\n    if: 'dxtSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.BC1, TranscoderFormat.BC3],\n    engineFormat: [EngineFormat.RGB_S3TC_DXT1_Format, EngineFormat.RGBA_S3TC_DXT5_Format],\n    priorityETC1S: 4,\n    priorityUASTC: 5,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc2Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1, TranscoderFormat.ETC2],\n    engineFormat: [EngineFormat.RGB_ETC2_Format, EngineFormat.RGBA_ETC2_EAC_Format],\n    priorityETC1S: 1,\n    priorityUASTC: 3,\n    needsPowerOfTwo: false\n  }, {\n    if: 'etc1Supported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.ETC1],\n    engineFormat: [EngineFormat.RGB_ETC1_Format],\n    priorityETC1S: 2,\n    priorityUASTC: 4,\n    needsPowerOfTwo: false\n  }, {\n    if: 'pvrtcSupported',\n    basisFormat: [BasisFormat.ETC1S, BasisFormat.UASTC_4x4],\n    transcoderFormat: [TranscoderFormat.PVRTC1_4_RGB, TranscoderFormat.PVRTC1_4_RGBA],\n    engineFormat: [EngineFormat.RGB_PVRTC_4BPPV1_Format, EngineFormat.RGBA_PVRTC_4BPPV1_Format],\n    priorityETC1S: 5,\n    priorityUASTC: 6,\n    needsPowerOfTwo: true\n  }];\n  const ETC1S_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityETC1S - b.priorityETC1S;\n  });\n  const UASTC_OPTIONS = FORMAT_OPTIONS.sort(function (a, b) {\n    return a.priorityUASTC - b.priorityUASTC;\n  });\n\n  function getTranscoderFormat(basisFormat, width, height, hasAlpha) {\n    let transcoderFormat;\n    let engineFormat;\n    const options = basisFormat === BasisFormat.ETC1S ? ETC1S_OPTIONS : UASTC_OPTIONS;\n\n    for (let i = 0; i < options.length; i++) {\n      const opt = options[i];\n      if (!config[opt.if]) continue;\n      if (!opt.basisFormat.includes(basisFormat)) continue;\n      if (hasAlpha && opt.transcoderFormat.length < 2) continue;\n      if (opt.needsPowerOfTwo && !(isPowerOfTwo(width) && isPowerOfTwo(height))) continue;\n      transcoderFormat = opt.transcoderFormat[hasAlpha ? 1 : 0];\n      engineFormat = opt.engineFormat[hasAlpha ? 1 : 0];\n      return {\n        transcoderFormat,\n        engineFormat\n      };\n    }\n\n    console.warn('THREE.KTX2Loader: No suitable compressed texture format found. Decoding to RGBA32.');\n    transcoderFormat = TranscoderFormat.RGBA32;\n    engineFormat = EngineFormat.RGBAFormat;\n    return {\n      transcoderFormat,\n      engineFormat\n    };\n  }\n\n  function isPowerOfTwo(value) {\n    if (value <= 2) return true;\n    return (value & value - 1) === 0 && value !== 0;\n  }\n}; //\n// DataTexture and Data3DTexture parsing.\n\n\nconst FORMAT_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_UNORM]: RGBAFormat,\n  [VK_FORMAT_R8G8B8A8_SRGB]: RGBAFormat,\n  [VK_FORMAT_R32G32_SFLOAT]: RGFormat,\n  [VK_FORMAT_R16G16_SFLOAT]: RGFormat,\n  [VK_FORMAT_R8G8_UNORM]: RGFormat,\n  [VK_FORMAT_R8G8_SRGB]: RGFormat,\n  [VK_FORMAT_R32_SFLOAT]: RedFormat,\n  [VK_FORMAT_R16_SFLOAT]: RedFormat,\n  [VK_FORMAT_R8_SRGB]: RedFormat,\n  [VK_FORMAT_R8_UNORM]: RedFormat\n};\nconst TYPE_MAP = {\n  [VK_FORMAT_R32G32B32A32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16B16A16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8B8A8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8B8A8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32G32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16G16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8G8_UNORM]: UnsignedByteType,\n  [VK_FORMAT_R8G8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R32_SFLOAT]: FloatType,\n  [VK_FORMAT_R16_SFLOAT]: HalfFloatType,\n  [VK_FORMAT_R8_SRGB]: UnsignedByteType,\n  [VK_FORMAT_R8_UNORM]: UnsignedByteType\n};\nconst ENCODING_MAP = {\n  [VK_FORMAT_R8G8B8A8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8G8_SRGB]: sRGBEncoding,\n  [VK_FORMAT_R8_SRGB]: sRGBEncoding\n};\n\nasync function createDataTexture(container) {\n  const {\n    vkFormat,\n    pixelWidth,\n    pixelHeight,\n    pixelDepth\n  } = container;\n\n  if (FORMAT_MAP[vkFormat] === undefined) {\n    throw new Error('THREE.KTX2Loader: Unsupported vkFormat.');\n  } //\n\n\n  const level = container.levels[0];\n  let levelData;\n  let view;\n\n  if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_NONE) {\n    levelData = level.levelData;\n  } else if (container.supercompressionScheme === KHR_SUPERCOMPRESSION_ZSTD) {\n    if (!_zstd) {\n      _zstd = new Promise(async resolve => {\n        const zstd = new ZSTDDecoder();\n        await zstd.init();\n        resolve(zstd);\n      });\n    }\n\n    levelData = (await _zstd).decode(level.levelData, level.uncompressedByteLength);\n  } else {\n    throw new Error('THREE.KTX2Loader: Unsupported supercompressionScheme.');\n  }\n\n  if (TYPE_MAP[vkFormat] === FloatType) {\n    view = new Float32Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Float32Array.BYTES_PER_ELEMENT);\n  } else if (TYPE_MAP[vkFormat] === HalfFloatType) {\n    view = new Uint16Array(levelData.buffer, levelData.byteOffset, levelData.byteLength / Uint16Array.BYTES_PER_ELEMENT);\n  } else {\n    view = levelData;\n  } //\n\n\n  const texture = pixelDepth === 0 ? new DataTexture(view, pixelWidth, pixelHeight) : new Data3DTexture(view, pixelWidth, pixelHeight, pixelDepth);\n  texture.type = TYPE_MAP[vkFormat];\n  texture.format = FORMAT_MAP[vkFormat];\n  texture.encoding = ENCODING_MAP[vkFormat] || LinearEncoding;\n  texture.needsUpdate = true; //\n\n  return Promise.resolve(texture);\n}\n\nexport { KTX2Loader };\n"]},"metadata":{},"sourceType":"module"}