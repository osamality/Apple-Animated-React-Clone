{"ast":null,"code":"/**\n * @author Deepkolos / https://github.com/deepkolos\n */\nclass WorkerPool {\n  constructor(pool = 4) {\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n\n  _initWorker(workerId) {\n    if (!this.workers[workerId]) {\n      const worker = this.workerCreator();\n      worker.addEventListener('message', this._onMessage.bind(this, workerId));\n      this.workers[workerId] = worker;\n    }\n  }\n\n  _getIdleWorker() {\n    for (let i = 0; i < this.pool; i++) if (!(this.workerStatus & 1 << i)) return i;\n\n    return -1;\n  }\n\n  _onMessage(workerId, msg) {\n    const resolve = this.workersResolve[workerId];\n    resolve && resolve(msg);\n\n    if (this.queue.length) {\n      const {\n        resolve,\n        msg,\n        transfer\n      } = this.queue.shift();\n      this.workersResolve[workerId] = resolve;\n      this.workers[workerId].postMessage(msg, transfer);\n    } else {\n      this.workerStatus ^= 1 << workerId;\n    }\n  }\n\n  setWorkerCreator(workerCreator) {\n    this.workerCreator = workerCreator;\n  }\n\n  setWorkerLimit(pool) {\n    this.pool = pool;\n  }\n\n  postMessage(msg, transfer) {\n    return new Promise(resolve => {\n      const workerId = this._getIdleWorker();\n\n      if (workerId !== -1) {\n        this._initWorker(workerId);\n\n        this.workerStatus |= 1 << workerId;\n        this.workersResolve[workerId] = resolve;\n        this.workers[workerId].postMessage(msg, transfer);\n      } else {\n        this.queue.push({\n          resolve,\n          msg,\n          transfer\n        });\n      }\n    });\n  }\n\n  dispose() {\n    this.workers.forEach(worker => worker.terminate());\n    this.workersResolve.length = 0;\n    this.workers.length = 0;\n    this.queue.length = 0;\n    this.workerStatus = 0;\n  }\n\n}\n\nexport { WorkerPool };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/utils/WorkerPool.js"],"names":["WorkerPool","constructor","pool","queue","workers","workersResolve","workerStatus","_initWorker","workerId","worker","workerCreator","addEventListener","_onMessage","bind","_getIdleWorker","i","msg","resolve","length","transfer","shift","postMessage","setWorkerCreator","setWorkerLimit","Promise","push","dispose","forEach","terminate"],"mappings":"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","sourcesContent":["/**\n * @author Deepkolos / https://github.com/deepkolos\n */\nclass WorkerPool {\n  constructor(pool = 4) {\n    this.pool = pool;\n    this.queue = [];\n    this.workers = [];\n    this.workersResolve = [];\n    this.workerStatus = 0;\n  }\n\n  _initWorker(workerId) {\n    if (!this.workers[workerId]) {\n      const worker = this.workerCreator();\n      worker.addEventListener('message', this._onMessage.bind(this, workerId));\n      this.workers[workerId] = worker;\n    }\n  }\n\n  _getIdleWorker() {\n    for (let i = 0; i < this.pool; i++) if (!(this.workerStatus & 1 << i)) return i;\n\n    return -1;\n  }\n\n  _onMessage(workerId, msg) {\n    const resolve = this.workersResolve[workerId];\n    resolve && resolve(msg);\n\n    if (this.queue.length) {\n      const {\n        resolve,\n        msg,\n        transfer\n      } = this.queue.shift();\n      this.workersResolve[workerId] = resolve;\n      this.workers[workerId].postMessage(msg, transfer);\n    } else {\n      this.workerStatus ^= 1 << workerId;\n    }\n  }\n\n  setWorkerCreator(workerCreator) {\n    this.workerCreator = workerCreator;\n  }\n\n  setWorkerLimit(pool) {\n    this.pool = pool;\n  }\n\n  postMessage(msg, transfer) {\n    return new Promise(resolve => {\n      const workerId = this._getIdleWorker();\n\n      if (workerId !== -1) {\n        this._initWorker(workerId);\n\n        this.workerStatus |= 1 << workerId;\n        this.workersResolve[workerId] = resolve;\n        this.workers[workerId].postMessage(msg, transfer);\n      } else {\n        this.queue.push({\n          resolve,\n          msg,\n          transfer\n        });\n      }\n    });\n  }\n\n  dispose() {\n    this.workers.forEach(worker => worker.terminate());\n    this.workersResolve.length = 0;\n    this.workers.length = 0;\n    this.queue.length = 0;\n    this.workerStatus = 0;\n  }\n\n}\n\nexport { WorkerPool };\n"]},"metadata":{},"sourceType":"module"}