{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { extend } from '@react-three/fiber';\nimport { suspend } from 'suspend-react';\nimport { TextGeometry, FontLoader } from 'three-stdlib';\nconst types = ['string', 'number'];\n\nconst getTextFromChildren = children => {\n  let label = '';\n  const rest = [];\n  React.Children.forEach(children, child => {\n    if (types.includes(typeof child)) label += child + '';else rest.push(child);\n  });\n  return [label, ...rest];\n};\n\nconst Text3D = /*#__PURE__*/React.forwardRef(({\n  font: _font,\n  letterSpacing = 0,\n  lineHeight = 1,\n  size = 1,\n  height = 0.2,\n  bevelThickness = 0.1,\n  bevelSize = 0.01,\n  bevelEnabled = false,\n  bevelOffset = 0,\n  bevelSegments = 4,\n  curveSegments = 8,\n  children,\n  ...props\n}, ref) => {\n  React.useMemo(() => extend({\n    RenamedTextGeometry: TextGeometry\n  }), []);\n  const font = suspend(async () => {\n    let data = typeof _font === 'string' ? await (await fetch(_font)).json() : _font;\n    let loader = new FontLoader();\n    return loader.parse(data);\n  }, [_font]);\n  const opts = useMemo(() => {\n    return {\n      font,\n      size,\n      height,\n      bevelThickness,\n      bevelSize,\n      bevelEnabled,\n      bevelSegments,\n      bevelOffset,\n      curveSegments,\n      letterSpacing,\n      lineHeight\n    };\n  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelSegments, bevelOffset, curveSegments, letterSpacing, lineHeight]);\n  /**\n   * We need the `children` in the deps because we\n   * need to be able to do `<Text3d>{state}</Text3d>`.\n   */\n\n  const [label, ...rest] = useMemo(() => getTextFromChildren(children), [children]);\n  const args = React.useMemo(() => [label, opts], [label, opts]);\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"renamedTextGeometry\", {\n    args: args\n  }), rest);\n});\nexport { Text3D };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/core/Text3D.js"],"names":["_extends","React","useMemo","extend","suspend","TextGeometry","FontLoader","types","getTextFromChildren","children","label","rest","Children","forEach","child","includes","push","Text3D","forwardRef","font","_font","letterSpacing","lineHeight","size","height","bevelThickness","bevelSize","bevelEnabled","bevelOffset","bevelSegments","curveSegments","props","ref","RenamedTextGeometry","data","fetch","json","loader","parse","opts","args","createElement"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { extend } from '@react-three/fiber';\nimport { suspend } from 'suspend-react';\nimport { TextGeometry, FontLoader } from 'three-stdlib';\n\nconst types = ['string', 'number'];\n\nconst getTextFromChildren = children => {\n  let label = '';\n  const rest = [];\n  React.Children.forEach(children, child => {\n    if (types.includes(typeof child)) label += child + '';else rest.push(child);\n  });\n  return [label, ...rest];\n};\n\nconst Text3D = /*#__PURE__*/React.forwardRef(({\n  font: _font,\n  letterSpacing = 0,\n  lineHeight = 1,\n  size = 1,\n  height = 0.2,\n  bevelThickness = 0.1,\n  bevelSize = 0.01,\n  bevelEnabled = false,\n  bevelOffset = 0,\n  bevelSegments = 4,\n  curveSegments = 8,\n  children,\n  ...props\n}, ref) => {\n  React.useMemo(() => extend({\n    RenamedTextGeometry: TextGeometry\n  }), []);\n  const font = suspend(async () => {\n    let data = typeof _font === 'string' ? await (await fetch(_font)).json() : _font;\n    let loader = new FontLoader();\n    return loader.parse(data);\n  }, [_font]);\n  const opts = useMemo(() => {\n    return {\n      font,\n      size,\n      height,\n      bevelThickness,\n      bevelSize,\n      bevelEnabled,\n      bevelSegments,\n      bevelOffset,\n      curveSegments,\n      letterSpacing,\n      lineHeight\n    };\n  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelSegments, bevelOffset, curveSegments, letterSpacing, lineHeight]);\n  /**\n   * We need the `children` in the deps because we\n   * need to be able to do `<Text3d>{state}</Text3d>`.\n   */\n\n  const [label, ...rest] = useMemo(() => getTextFromChildren(children), [children]);\n  const args = React.useMemo(() => [label, opts], [label, opts]);\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"renamedTextGeometry\", {\n    args: args\n  }), rest);\n});\n\nexport { Text3D };\n"]},"metadata":{},"sourceType":"module"}