{"ast":null,"code":"import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst isOrthographic = def => def && def.isOrthographicCamera;\n\nconst isBox3 = def => def && def.isBox3;\n\nconst context = /*#__PURE__*/React.createContext(null);\n\nfunction Bounds({\n  children,\n  damping = 6,\n  fit,\n  clip,\n  observe,\n  margin = 1.2,\n  eps = 0.01,\n  onFit\n}) {\n  const ref = React.useRef(null);\n  const {\n    camera,\n    invalidate,\n    size,\n    controls: controlsImpl\n  } = useThree();\n  const controls = controlsImpl;\n  const onFitRef = React.useRef(onFit);\n  onFitRef.current = onFit;\n\n  function equals(a, b) {\n    return Math.abs(a.x - b.x) < eps && Math.abs(a.y - b.y) < eps && Math.abs(a.z - b.z) < eps;\n  }\n\n  function damp(v, t, lambda, delta) {\n    v.x = THREE.MathUtils.damp(v.x, t.x, lambda, delta);\n    v.y = THREE.MathUtils.damp(v.y, t.y, lambda, delta);\n    v.z = THREE.MathUtils.damp(v.z, t.z, lambda, delta);\n  }\n\n  const [current] = React.useState(() => ({\n    animating: false,\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [goal] = React.useState(() => ({\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [box] = React.useState(() => new THREE.Box3());\n  const api = React.useMemo(() => {\n    function getSize() {\n      const size = box.getSize(new THREE.Vector3());\n      const center = box.getCenter(new THREE.Vector3());\n      const maxSize = Math.max(size.x, size.y, size.z);\n      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        box,\n        size,\n        center,\n        distance\n      };\n    }\n\n    return {\n      getSize,\n\n      refresh(object) {\n        if (isBox3(object)) box.copy(object);else {\n          const target = object || ref.current;\n          target.updateWorldMatrix(true, true);\n          box.setFromObject(target);\n        }\n\n        if (box.isEmpty()) {\n          const max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n\n        if ((controls == null ? void 0 : controls.constructor.name) === 'OrthographicTrackballControls') {\n          // Put camera on a sphere along which it should move\n          const {\n            distance\n          } = getSize();\n          const direction = camera.position.clone().sub(controls.target).normalize().multiplyScalar(distance);\n          const newPos = controls.target.clone().add(direction);\n          camera.position.copy(newPos);\n        }\n\n        return this;\n      },\n\n      clip() {\n        const {\n          distance\n        } = getSize();\n        if (controls) controls.maxDistance = distance * 10;\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) controls.update();\n        invalidate();\n        return this;\n      },\n\n      to({\n        position,\n        target\n      }) {\n        current.camera.copy(camera.position);\n        const {\n          center\n        } = getSize();\n        goal.camera.set(...position);\n\n        if (target) {\n          goal.focus.set(...target);\n        } else {\n          goal.focus.copy(center);\n        }\n\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.set(...position);\n        }\n\n        return this;\n      },\n\n      fit() {\n        current.camera.copy(camera.position);\n        if (controls) current.focus.copy(controls.target);\n        const {\n          center,\n          distance\n        } = getSize();\n        const direction = center.clone().sub(camera.position).normalize().multiplyScalar(distance);\n        goal.camera.copy(center).sub(direction);\n        goal.focus.copy(center);\n\n        if (isOrthographic(camera)) {\n          current.zoom = camera.zoom;\n          let maxHeight = 0,\n              maxWidth = 0;\n          const vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)]; // Transform the center and each corner to camera space\n\n          center.applyMatrix4(camera.matrixWorldInverse);\n\n          for (const v of vertices) {\n            v.applyMatrix4(camera.matrixWorldInverse);\n            maxHeight = Math.max(maxHeight, Math.abs(v.y - center.y));\n            maxWidth = Math.max(maxWidth, Math.abs(v.x - center.x));\n          }\n\n          maxHeight *= 2;\n          maxWidth *= 2;\n          const zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n          const zoomForWidth = (camera.right - camera.left) / maxWidth;\n          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n\n          if (!damping) {\n            camera.zoom = goal.zoom;\n            camera.updateProjectionMatrix();\n          }\n        }\n\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.copy(goal.camera);\n          camera.lookAt(goal.focus);\n\n          if (controls) {\n            controls.target.copy(goal.focus);\n            controls.update();\n          }\n        }\n\n        if (onFitRef.current) onFitRef.current(this.getSize());\n        invalidate();\n        return this;\n      }\n\n    };\n  }, [box, camera, controls, margin, damping, invalidate]);\n  React.useLayoutEffect(() => {\n    if (controls) {\n      // Try to prevent drag hijacking\n      const callback = () => current.animating = false;\n\n      controls.addEventListener('start', callback);\n      return () => controls.removeEventListener('start', callback);\n    }\n  }, [controls]); // Scale pointer on window resize\n\n  const count = React.useRef(0);\n  React.useLayoutEffect(() => {\n    if (observe || count.current++ === 0) {\n      api.refresh();\n      if (fit) api.fit();\n      if (clip) api.clip();\n    }\n  }, [size, clip, fit, observe, camera, controls]);\n  useFrame((state, delta) => {\n    if (current.animating) {\n      damp(current.focus, goal.focus, damping, delta);\n      damp(current.camera, goal.camera, damping, delta);\n      current.zoom = THREE.MathUtils.damp(current.zoom, goal.zoom, damping, delta);\n      camera.position.copy(current.camera);\n\n      if (isOrthographic(camera)) {\n        camera.zoom = current.zoom;\n        camera.updateProjectionMatrix();\n      }\n\n      if (!controls) {\n        camera.lookAt(current.focus);\n      } else {\n        controls.target.copy(current.focus);\n        controls.update();\n      }\n\n      invalidate();\n      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps)) return;\n      if (!isOrthographic(camera) && !equals(current.camera, goal.camera)) return;\n      if (controls && !equals(current.focus, goal.focus)) return;\n      current.animating = false;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\n\nfunction useBounds() {\n  return React.useContext(context);\n}\n\nexport { Bounds, useBounds };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/@react-three/drei/core/Bounds.js"],"names":["React","THREE","useThree","useFrame","isOrthographic","def","isOrthographicCamera","isBox3","context","createContext","Bounds","children","damping","fit","clip","observe","margin","eps","onFit","ref","useRef","camera","invalidate","size","controls","controlsImpl","onFitRef","current","equals","a","b","Math","abs","x","y","z","damp","v","t","lambda","delta","MathUtils","useState","animating","focus","Vector3","zoom","goal","box","Box3","api","useMemo","getSize","center","getCenter","maxSize","max","fitHeightDistance","atan","PI","fov","fitWidthDistance","aspect","distance","refresh","object","copy","target","updateWorldMatrix","setFromObject","isEmpty","position","length","setFromCenterAndSize","constructor","name","direction","clone","sub","normalize","multiplyScalar","newPos","add","maxDistance","near","far","updateProjectionMatrix","update","to","set","maxHeight","maxWidth","vertices","min","applyMatrix4","matrixWorldInverse","zoomForHeight","top","bottom","zoomForWidth","right","left","lookAt","useLayoutEffect","callback","addEventListener","removeEventListener","count","state","createElement","Provider","value","useBounds","useContext"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst isOrthographic = def => def && def.isOrthographicCamera;\n\nconst isBox3 = def => def && def.isBox3;\n\nconst context = /*#__PURE__*/React.createContext(null);\nfunction Bounds({\n  children,\n  damping = 6,\n  fit,\n  clip,\n  observe,\n  margin = 1.2,\n  eps = 0.01,\n  onFit\n}) {\n  const ref = React.useRef(null);\n  const {\n    camera,\n    invalidate,\n    size,\n    controls: controlsImpl\n  } = useThree();\n  const controls = controlsImpl;\n  const onFitRef = React.useRef(onFit);\n  onFitRef.current = onFit;\n\n  function equals(a, b) {\n    return Math.abs(a.x - b.x) < eps && Math.abs(a.y - b.y) < eps && Math.abs(a.z - b.z) < eps;\n  }\n\n  function damp(v, t, lambda, delta) {\n    v.x = THREE.MathUtils.damp(v.x, t.x, lambda, delta);\n    v.y = THREE.MathUtils.damp(v.y, t.y, lambda, delta);\n    v.z = THREE.MathUtils.damp(v.z, t.z, lambda, delta);\n  }\n\n  const [current] = React.useState(() => ({\n    animating: false,\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [goal] = React.useState(() => ({\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [box] = React.useState(() => new THREE.Box3());\n  const api = React.useMemo(() => {\n    function getSize() {\n      const size = box.getSize(new THREE.Vector3());\n      const center = box.getCenter(new THREE.Vector3());\n      const maxSize = Math.max(size.x, size.y, size.z);\n      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        box,\n        size,\n        center,\n        distance\n      };\n    }\n\n    return {\n      getSize,\n\n      refresh(object) {\n        if (isBox3(object)) box.copy(object);else {\n          const target = object || ref.current;\n          target.updateWorldMatrix(true, true);\n          box.setFromObject(target);\n        }\n\n        if (box.isEmpty()) {\n          const max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n\n        if ((controls == null ? void 0 : controls.constructor.name) === 'OrthographicTrackballControls') {\n          // Put camera on a sphere along which it should move\n          const {\n            distance\n          } = getSize();\n          const direction = camera.position.clone().sub(controls.target).normalize().multiplyScalar(distance);\n          const newPos = controls.target.clone().add(direction);\n          camera.position.copy(newPos);\n        }\n\n        return this;\n      },\n\n      clip() {\n        const {\n          distance\n        } = getSize();\n        if (controls) controls.maxDistance = distance * 10;\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) controls.update();\n        invalidate();\n        return this;\n      },\n\n      to({\n        position,\n        target\n      }) {\n        current.camera.copy(camera.position);\n        const {\n          center\n        } = getSize();\n        goal.camera.set(...position);\n\n        if (target) {\n          goal.focus.set(...target);\n        } else {\n          goal.focus.copy(center);\n        }\n\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.set(...position);\n        }\n\n        return this;\n      },\n\n      fit() {\n        current.camera.copy(camera.position);\n        if (controls) current.focus.copy(controls.target);\n        const {\n          center,\n          distance\n        } = getSize();\n        const direction = center.clone().sub(camera.position).normalize().multiplyScalar(distance);\n        goal.camera.copy(center).sub(direction);\n        goal.focus.copy(center);\n\n        if (isOrthographic(camera)) {\n          current.zoom = camera.zoom;\n          let maxHeight = 0,\n              maxWidth = 0;\n          const vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)]; // Transform the center and each corner to camera space\n\n          center.applyMatrix4(camera.matrixWorldInverse);\n\n          for (const v of vertices) {\n            v.applyMatrix4(camera.matrixWorldInverse);\n            maxHeight = Math.max(maxHeight, Math.abs(v.y - center.y));\n            maxWidth = Math.max(maxWidth, Math.abs(v.x - center.x));\n          }\n\n          maxHeight *= 2;\n          maxWidth *= 2;\n          const zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n          const zoomForWidth = (camera.right - camera.left) / maxWidth;\n          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n\n          if (!damping) {\n            camera.zoom = goal.zoom;\n            camera.updateProjectionMatrix();\n          }\n        }\n\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.copy(goal.camera);\n          camera.lookAt(goal.focus);\n\n          if (controls) {\n            controls.target.copy(goal.focus);\n            controls.update();\n          }\n        }\n\n        if (onFitRef.current) onFitRef.current(this.getSize());\n        invalidate();\n        return this;\n      }\n\n    };\n  }, [box, camera, controls, margin, damping, invalidate]);\n  React.useLayoutEffect(() => {\n    if (controls) {\n      // Try to prevent drag hijacking\n      const callback = () => current.animating = false;\n\n      controls.addEventListener('start', callback);\n      return () => controls.removeEventListener('start', callback);\n    }\n  }, [controls]); // Scale pointer on window resize\n\n  const count = React.useRef(0);\n  React.useLayoutEffect(() => {\n    if (observe || count.current++ === 0) {\n      api.refresh();\n      if (fit) api.fit();\n      if (clip) api.clip();\n    }\n  }, [size, clip, fit, observe, camera, controls]);\n  useFrame((state, delta) => {\n    if (current.animating) {\n      damp(current.focus, goal.focus, damping, delta);\n      damp(current.camera, goal.camera, damping, delta);\n      current.zoom = THREE.MathUtils.damp(current.zoom, goal.zoom, damping, delta);\n      camera.position.copy(current.camera);\n\n      if (isOrthographic(camera)) {\n        camera.zoom = current.zoom;\n        camera.updateProjectionMatrix();\n      }\n\n      if (!controls) {\n        camera.lookAt(current.focus);\n      } else {\n        controls.target.copy(current.focus);\n        controls.update();\n      }\n\n      invalidate();\n      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps)) return;\n      if (!isOrthographic(camera) && !equals(current.camera, goal.camera)) return;\n      if (controls && !equals(current.focus, goal.focus)) return;\n      current.animating = false;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\nfunction useBounds() {\n  return React.useContext(context);\n}\n\nexport { Bounds, useBounds };\n"]},"metadata":{},"sourceType":"module"}