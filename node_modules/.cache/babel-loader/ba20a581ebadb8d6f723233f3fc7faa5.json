{"ast":null,"code":"import { Loader, FileLoader, Matrix3, Vector2, Vector3, ShapeUtils, Box2, Shape, Path, BufferGeometry, Float32BufferAttribute, ShapePath } from 'three';\n\nclass SVGLoader extends Loader {\n  constructor(manager) {\n    super(manager); // Default dots per inch\n\n    this.defaultDPI = 90; // Accepted units: 'mm', 'cm', 'in', 'pt', 'pc', 'px'\n\n    this.defaultUnit = 'px';\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(text) {\n    const scope = this;\n\n    function parseNode(node, style) {\n      if (node.nodeType !== 1) return;\n      const transform = getNodeTransform(node);\n      let traverseChildNodes = true;\n      let path = null;\n\n      switch (node.nodeName) {\n        case 'svg':\n          break;\n\n        case 'style':\n          parseCSSStylesheet(node);\n          break;\n\n        case 'g':\n          style = parseStyle(node, style);\n          break;\n\n        case 'path':\n          style = parseStyle(node, style);\n          if (node.hasAttribute('d')) path = parsePathNode(node);\n          break;\n\n        case 'rect':\n          style = parseStyle(node, style);\n          path = parseRectNode(node);\n          break;\n\n        case 'polygon':\n          style = parseStyle(node, style);\n          path = parsePolygonNode(node);\n          break;\n\n        case 'polyline':\n          style = parseStyle(node, style);\n          path = parsePolylineNode(node);\n          break;\n\n        case 'circle':\n          style = parseStyle(node, style);\n          path = parseCircleNode(node);\n          break;\n\n        case 'ellipse':\n          style = parseStyle(node, style);\n          path = parseEllipseNode(node);\n          break;\n\n        case 'line':\n          style = parseStyle(node, style);\n          path = parseLineNode(node);\n          break;\n\n        case 'defs':\n          traverseChildNodes = false;\n          break;\n\n        case 'use':\n          style = parseStyle(node, style);\n          const usedNodeId = node.href.baseVal.substring(1);\n          const usedNode = node.viewportElement.getElementById(usedNodeId);\n\n          if (usedNode) {\n            parseNode(usedNode, style);\n          } else {\n            console.warn(\"SVGLoader: 'use node' references non-existent node id: \" + usedNodeId);\n          }\n\n          break;\n      }\n\n      if (path) {\n        if (style.fill !== undefined && style.fill !== 'none') {\n          path.color.setStyle(style.fill);\n        }\n\n        transformPath(path, currentTransform);\n        paths.push(path);\n        path.userData = {\n          node: node,\n          style: style\n        };\n      }\n\n      if (traverseChildNodes) {\n        const nodes = node.childNodes;\n\n        for (let i = 0; i < nodes.length; i++) {\n          parseNode(nodes[i], style);\n        }\n      }\n\n      if (transform) {\n        transformStack.pop();\n\n        if (transformStack.length > 0) {\n          currentTransform.copy(transformStack[transformStack.length - 1]);\n        } else {\n          currentTransform.identity();\n        }\n      }\n    }\n\n    function parsePathNode(node) {\n      const path = new ShapePath();\n      const point = new Vector2();\n      const control = new Vector2();\n      const firstPoint = new Vector2();\n      let isFirstPoint = true;\n      let doSetFirstPoint = false;\n      const d = node.getAttribute('d'); // console.log( d );\n\n      const commands = d.match(/[a-df-z][^a-df-z]*/gi);\n\n      for (let i = 0, l = commands.length; i < l; i++) {\n        const command = commands[i];\n        const type = command.charAt(0);\n        const data = command.substr(1).trim();\n\n        if (isFirstPoint === true) {\n          doSetFirstPoint = true;\n          isFirstPoint = false;\n        }\n\n        let numbers;\n\n        switch (type) {\n          case 'M':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n\n              if (j === 0) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'H':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'V':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'L':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'C':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], numbers[j + 5]);\n              control.x = numbers[j + 2];\n              control.y = numbers[j + 3];\n              point.x = numbers[j + 4];\n              point.y = numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'S':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'Q':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'T':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'A':\n            numbers = parseFloats(data, [3, 4], 7);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              // skip command if start point == end point\n              if (numbers[j + 5] == point.x && numbers[j + 6] == point.y) continue;\n              const start = point.clone();\n              point.x = numbers[j + 5];\n              point.y = numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'm':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n\n              if (j === 0) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'h':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'v':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'l':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'c':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3], point.x + numbers[j + 4], point.y + numbers[j + 5]);\n              control.x = point.x + numbers[j + 2];\n              control.y = point.y + numbers[j + 3];\n              point.x += numbers[j + 4];\n              point.y += numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 's':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'q':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 't':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = point.x + numbers[j + 0];\n              point.y = point.y + numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'a':\n            numbers = parseFloats(data, [3, 4], 7);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              // skip command if no displacement\n              if (numbers[j + 5] == 0 && numbers[j + 6] == 0) continue;\n              const start = point.clone();\n              point.x += numbers[j + 5];\n              point.y += numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'Z':\n          case 'z':\n            path.currentPath.autoClose = true;\n\n            if (path.currentPath.curves.length > 0) {\n              // Reset point to beginning of Path\n              point.copy(firstPoint);\n              path.currentPath.currentPoint.copy(point);\n              isFirstPoint = true;\n            }\n\n            break;\n\n          default:\n            console.warn(command);\n        } // console.log( type, parseFloats( data ), parseFloats( data ).length  )\n\n\n        doSetFirstPoint = false;\n      }\n\n      return path;\n    }\n\n    function parseCSSStylesheet(node) {\n      if (!node.sheet || !node.sheet.cssRules || !node.sheet.cssRules.length) return;\n\n      for (let i = 0; i < node.sheet.cssRules.length; i++) {\n        const stylesheet = node.sheet.cssRules[i];\n        if (stylesheet.type !== 1) continue;\n        const selectorList = stylesheet.selectorText.split(/,/gm).filter(Boolean).map(i => i.trim());\n\n        for (let j = 0; j < selectorList.length; j++) {\n          stylesheets[selectorList[j]] = Object.assign(stylesheets[selectorList[j]] || {}, stylesheet.style);\n        }\n      }\n    }\n    /**\n     * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n     * https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/ Appendix: Endpoint to center arc conversion\n     * From\n     * rx ry x-axis-rotation large-arc-flag sweep-flag x y\n     * To\n     * aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation\n     */\n\n\n    function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n      if (rx == 0 || ry == 0) {\n        // draw a line if either of the radii == 0\n        path.lineTo(end.x, end.y);\n        return;\n      }\n\n      x_axis_rotation = x_axis_rotation * Math.PI / 180; // Ensure radii are positive\n\n      rx = Math.abs(rx);\n      ry = Math.abs(ry); // Compute (x1', y1')\n\n      const dx2 = (start.x - end.x) / 2.0;\n      const dy2 = (start.y - end.y) / 2.0;\n      const x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n      const y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2; // Compute (cx', cy')\n\n      let rxs = rx * rx;\n      let rys = ry * ry;\n      const x1ps = x1p * x1p;\n      const y1ps = y1p * y1p; // Ensure radii are large enough\n\n      const cr = x1ps / rxs + y1ps / rys;\n\n      if (cr > 1) {\n        // scale up rx,ry equally so cr == 1\n        const s = Math.sqrt(cr);\n        rx = s * rx;\n        ry = s * ry;\n        rxs = rx * rx;\n        rys = ry * ry;\n      }\n\n      const dq = rxs * y1ps + rys * x1ps;\n      const pq = (rxs * rys - dq) / dq;\n      let q = Math.sqrt(Math.max(0, pq));\n      if (large_arc_flag === sweep_flag) q = -q;\n      const cxp = q * rx * y1p / ry;\n      const cyp = -q * ry * x1p / rx; // Step 3: Compute (cx, cy) from (cx', cy')\n\n      const cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n      const cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2; // Step 4: Compute θ1 and Δθ\n\n      const theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n      const delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n      path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n    }\n\n    function svgAngle(ux, uy, vx, vy) {\n      const dot = ux * vx + uy * vy;\n      const len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n      let ang = Math.acos(Math.max(-1, Math.min(1, dot / len))); // floating point precision, slightly over values appear\n\n      if (ux * vy - uy * vx < 0) ang = -ang;\n      return ang;\n    }\n    /*\n     * According to https://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute\n     * rounded corner should be rendered to elliptical arc, but bezier curve does the job well enough\n     */\n\n\n    function parseRectNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('x') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('y') || 0);\n      const rx = parseFloatWithUnits(node.getAttribute('rx') || node.getAttribute('ry') || 0);\n      const ry = parseFloatWithUnits(node.getAttribute('ry') || node.getAttribute('rx') || 0);\n      const w = parseFloatWithUnits(node.getAttribute('width'));\n      const h = parseFloatWithUnits(node.getAttribute('height')); // Ellipse arc to Bezier approximation Coefficient (Inversed). See:\n      // https://spencermortensen.com/articles/bezier-circle/\n\n      const bci = 1 - 0.551915024494;\n      const path = new ShapePath(); // top left\n\n      path.moveTo(x + rx, y); // top right\n\n      path.lineTo(x + w - rx, y);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w - rx * bci, y, x + w, y + ry * bci, x + w, y + ry);\n      } // bottom right\n\n\n      path.lineTo(x + w, y + h - ry);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w, y + h - ry * bci, x + w - rx * bci, y + h, x + w - rx, y + h);\n      } // bottom left\n\n\n      path.lineTo(x + rx, y + h);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + rx * bci, y + h, x, y + h - ry * bci, x, y + h - ry);\n      } // back to top left\n\n\n      path.lineTo(x, y + ry);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x, y + ry * bci, x + rx * bci, y, x + rx, y);\n      }\n\n      return path;\n    }\n\n    function parsePolygonNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n\n        index++;\n      }\n\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute('points').replace(regex, iterator);\n      path.currentPath.autoClose = true;\n      return path;\n    }\n\n    function parsePolylineNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n\n        index++;\n      }\n\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute('points').replace(regex, iterator);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n\n    function parseCircleNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('cx') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('cy') || 0);\n      const r = parseFloatWithUnits(node.getAttribute('r') || 0);\n      const subpath = new Path();\n      subpath.absarc(x, y, r, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n\n    function parseEllipseNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('cx') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('cy') || 0);\n      const rx = parseFloatWithUnits(node.getAttribute('rx') || 0);\n      const ry = parseFloatWithUnits(node.getAttribute('ry') || 0);\n      const subpath = new Path();\n      subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n\n    function parseLineNode(node) {\n      const x1 = parseFloatWithUnits(node.getAttribute('x1') || 0);\n      const y1 = parseFloatWithUnits(node.getAttribute('y1') || 0);\n      const x2 = parseFloatWithUnits(node.getAttribute('x2') || 0);\n      const y2 = parseFloatWithUnits(node.getAttribute('y2') || 0);\n      const path = new ShapePath();\n      path.moveTo(x1, y1);\n      path.lineTo(x2, y2);\n      path.currentPath.autoClose = false;\n      return path;\n    } //\n\n\n    function parseStyle(node, style) {\n      style = Object.assign({}, style); // clone style\n\n      let stylesheetStyles = {};\n\n      if (node.hasAttribute('class')) {\n        const classSelectors = node.getAttribute('class').split(/\\s/).filter(Boolean).map(i => i.trim());\n\n        for (let i = 0; i < classSelectors.length; i++) {\n          stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['.' + classSelectors[i]]);\n        }\n      }\n\n      if (node.hasAttribute('id')) {\n        stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['#' + node.getAttribute('id')]);\n      }\n\n      function addStyle(svgName, jsName, adjustFunction) {\n        if (adjustFunction === undefined) {\n          adjustFunction = function copy(v) {\n            if (v.startsWith('url')) console.warn('SVGLoader: url access in attributes is not implemented.');\n            return v;\n          };\n        }\n\n        if (node.hasAttribute(svgName)) style[jsName] = adjustFunction(node.getAttribute(svgName));\n        if (stylesheetStyles[svgName]) style[jsName] = adjustFunction(stylesheetStyles[svgName]);\n        if (node.style && node.style[svgName] !== '') style[jsName] = adjustFunction(node.style[svgName]);\n      }\n\n      function clamp(v) {\n        return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n      }\n\n      function positive(v) {\n        return Math.max(0, parseFloatWithUnits(v));\n      }\n\n      addStyle('fill', 'fill');\n      addStyle('fill-opacity', 'fillOpacity', clamp);\n      addStyle('fill-rule', 'fillRule');\n      addStyle('opacity', 'opacity', clamp);\n      addStyle('stroke', 'stroke');\n      addStyle('stroke-opacity', 'strokeOpacity', clamp);\n      addStyle('stroke-width', 'strokeWidth', positive);\n      addStyle('stroke-linejoin', 'strokeLineJoin');\n      addStyle('stroke-linecap', 'strokeLineCap');\n      addStyle('stroke-miterlimit', 'strokeMiterLimit', positive);\n      addStyle('visibility', 'visibility');\n      return style;\n    } // http://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes\n\n\n    function getReflection(a, b) {\n      return a - (b - a);\n    } // from https://github.com/ppvg/svg-numbers (MIT License)\n\n\n    function parseFloats(input, flags, stride) {\n      if (typeof input !== 'string') {\n        throw new TypeError('Invalid input: ' + typeof input);\n      } // Character groups\n\n\n      const RE = {\n        SEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n        WHITESPACE: /[ \\t\\r\\n]/,\n        DIGIT: /[\\d]/,\n        SIGN: /[-+]/,\n        POINT: /\\./,\n        COMMA: /,/,\n        EXP: /e/i,\n        FLAGS: /[01]/\n      }; // States\n\n      const SEP = 0;\n      const INT = 1;\n      const FLOAT = 2;\n      const EXP = 3;\n      let state = SEP;\n      let seenComma = true;\n      let number = '',\n          exponent = '';\n      const result = [];\n\n      function throwSyntaxError(current, i, partial) {\n        const error = new SyntaxError('Unexpected character \"' + current + '\" at index ' + i + '.');\n        error.partial = partial;\n        throw error;\n      }\n\n      function newNumber() {\n        if (number !== '') {\n          if (exponent === '') result.push(Number(number));else result.push(Number(number) * Math.pow(10, Number(exponent)));\n        }\n\n        number = '';\n        exponent = '';\n      }\n\n      let current;\n      const length = input.length;\n\n      for (let i = 0; i < length; i++) {\n        current = input[i]; // check for flags\n\n        if (Array.isArray(flags) && flags.includes(result.length % stride) && RE.FLAGS.test(current)) {\n          state = INT;\n          number = current;\n          newNumber();\n          continue;\n        } // parse until next number\n\n\n        if (state === SEP) {\n          // eat whitespace\n          if (RE.WHITESPACE.test(current)) {\n            continue;\n          } // start new number\n\n\n          if (RE.DIGIT.test(current) || RE.SIGN.test(current)) {\n            state = INT;\n            number = current;\n            continue;\n          }\n\n          if (RE.POINT.test(current)) {\n            state = FLOAT;\n            number = current;\n            continue;\n          } // throw on double commas (e.g. \"1, , 2\")\n\n\n          if (RE.COMMA.test(current)) {\n            if (seenComma) {\n              throwSyntaxError(current, i, result);\n            }\n\n            seenComma = true;\n          }\n        } // parse integer part\n\n\n        if (state === INT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n\n          if (RE.POINT.test(current)) {\n            number += current;\n            state = FLOAT;\n            continue;\n          }\n\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          } // throw on double signs (\"-+1\"), but not on sign as separator (\"-1-2\")\n\n\n          if (RE.SIGN.test(current) && number.length === 1 && RE.SIGN.test(number[0])) {\n            throwSyntaxError(current, i, result);\n          }\n        } // parse decimal part\n\n\n        if (state === FLOAT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          } // throw on double decimal points (e.g. \"1..2\")\n\n\n          if (RE.POINT.test(current) && number[number.length - 1] === '.') {\n            throwSyntaxError(current, i, result);\n          }\n        } // parse exponent part\n\n\n        if (state === EXP) {\n          if (RE.DIGIT.test(current)) {\n            exponent += current;\n            continue;\n          }\n\n          if (RE.SIGN.test(current)) {\n            if (exponent === '') {\n              exponent += current;\n              continue;\n            }\n\n            if (exponent.length === 1 && RE.SIGN.test(exponent)) {\n              throwSyntaxError(current, i, result);\n            }\n          }\n        } // end of number\n\n\n        if (RE.WHITESPACE.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = false;\n        } else if (RE.COMMA.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = true;\n        } else if (RE.SIGN.test(current)) {\n          newNumber();\n          state = INT;\n          number = current;\n        } else if (RE.POINT.test(current)) {\n          newNumber();\n          state = FLOAT;\n          number = current;\n        } else {\n          throwSyntaxError(current, i, result);\n        }\n      } // add the last number found (if any)\n\n\n      newNumber();\n      return result;\n    } // Units\n\n\n    const units = ['mm', 'cm', 'in', 'pt', 'pc', 'px']; // Conversion: [ fromUnit ][ toUnit ] (-1 means dpi dependent)\n\n    const unitConversion = {\n      mm: {\n        mm: 1,\n        cm: 0.1,\n        in: 1 / 25.4,\n        pt: 72 / 25.4,\n        pc: 6 / 25.4,\n        px: -1\n      },\n      cm: {\n        mm: 10,\n        cm: 1,\n        in: 1 / 2.54,\n        pt: 72 / 2.54,\n        pc: 6 / 2.54,\n        px: -1\n      },\n      in: {\n        mm: 25.4,\n        cm: 2.54,\n        in: 1,\n        pt: 72,\n        pc: 6,\n        px: -1\n      },\n      pt: {\n        mm: 25.4 / 72,\n        cm: 2.54 / 72,\n        in: 1 / 72,\n        pt: 1,\n        pc: 6 / 72,\n        px: -1\n      },\n      pc: {\n        mm: 25.4 / 6,\n        cm: 2.54 / 6,\n        in: 1 / 6,\n        pt: 72 / 6,\n        pc: 1,\n        px: -1\n      },\n      px: {\n        px: 1\n      }\n    };\n\n    function parseFloatWithUnits(string) {\n      let theUnit = 'px';\n\n      if (typeof string === 'string' || string instanceof String) {\n        for (let i = 0, n = units.length; i < n; i++) {\n          const u = units[i];\n\n          if (string.endsWith(u)) {\n            theUnit = u;\n            string = string.substring(0, string.length - u.length);\n            break;\n          }\n        }\n      }\n\n      let scale = undefined;\n\n      if (theUnit === 'px' && scope.defaultUnit !== 'px') {\n        // Conversion scale from  pixels to inches, then to default units\n        scale = unitConversion['in'][scope.defaultUnit] / scope.defaultDPI;\n      } else {\n        scale = unitConversion[theUnit][scope.defaultUnit];\n\n        if (scale < 0) {\n          // Conversion scale to pixels\n          scale = unitConversion[theUnit]['in'] * scope.defaultDPI;\n        }\n      }\n\n      return scale * parseFloat(string);\n    } // Transforms\n\n\n    function getNodeTransform(node) {\n      if (!(node.hasAttribute('transform') || node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y')))) {\n        return null;\n      }\n\n      const transform = parseNodeTransform(node);\n\n      if (transformStack.length > 0) {\n        transform.premultiply(transformStack[transformStack.length - 1]);\n      }\n\n      currentTransform.copy(transform);\n      transformStack.push(transform);\n      return transform;\n    }\n\n    function parseNodeTransform(node) {\n      const transform = new Matrix3();\n      const currentTransform = tempTransform0;\n\n      if (node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y'))) {\n        const tx = parseFloatWithUnits(node.getAttribute('x'));\n        const ty = parseFloatWithUnits(node.getAttribute('y'));\n        transform.translate(tx, ty);\n      }\n\n      if (node.hasAttribute('transform')) {\n        const transformsTexts = node.getAttribute('transform').split(')');\n\n        for (let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n          const transformText = transformsTexts[tIndex].trim();\n          if (transformText === '') continue;\n          const openParPos = transformText.indexOf('(');\n          const closeParPos = transformText.length;\n\n          if (openParPos > 0 && openParPos < closeParPos) {\n            const transformType = transformText.substr(0, openParPos);\n            const array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));\n            currentTransform.identity();\n\n            switch (transformType) {\n              case 'translate':\n                if (array.length >= 1) {\n                  const tx = array[0];\n                  let ty = tx;\n\n                  if (array.length >= 2) {\n                    ty = array[1];\n                  }\n\n                  currentTransform.translate(tx, ty);\n                }\n\n                break;\n\n              case 'rotate':\n                if (array.length >= 1) {\n                  let angle = 0;\n                  let cx = 0;\n                  let cy = 0; // Angle\n\n                  angle = -array[0] * Math.PI / 180;\n\n                  if (array.length >= 3) {\n                    // Center x, y\n                    cx = array[1];\n                    cy = array[2];\n                  } // Rotate around center (cx, cy)\n\n\n                  tempTransform1.identity().translate(-cx, -cy);\n                  tempTransform2.identity().rotate(angle);\n                  tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                  tempTransform1.identity().translate(cx, cy);\n                  currentTransform.multiplyMatrices(tempTransform1, tempTransform3);\n                }\n\n                break;\n\n              case 'scale':\n                if (array.length >= 1) {\n                  const scaleX = array[0];\n                  let scaleY = scaleX;\n\n                  if (array.length >= 2) {\n                    scaleY = array[1];\n                  }\n\n                  currentTransform.scale(scaleX, scaleY);\n                }\n\n                break;\n\n              case 'skewX':\n                if (array.length === 1) {\n                  currentTransform.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                }\n\n                break;\n\n              case 'skewY':\n                if (array.length === 1) {\n                  currentTransform.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                }\n\n                break;\n\n              case 'matrix':\n                if (array.length === 6) {\n                  currentTransform.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                }\n\n                break;\n            }\n          }\n\n          transform.premultiply(currentTransform);\n        }\n      }\n\n      return transform;\n    }\n\n    function transformPath(path, m) {\n      function transfVec2(v2) {\n        tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n        v2.set(tempV3.x, tempV3.y);\n      }\n\n      const isRotated = isTransformRotated(m);\n      const subPaths = path.subPaths;\n\n      for (let i = 0, n = subPaths.length; i < n; i++) {\n        const subPath = subPaths[i];\n        const curves = subPath.curves;\n\n        for (let j = 0; j < curves.length; j++) {\n          const curve = curves[j];\n\n          if (curve.isLineCurve) {\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isCubicBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n            transfVec2(curve.v3);\n          } else if (curve.isQuadraticBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isEllipseCurve) {\n            if (isRotated) {\n              console.warn('SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.');\n            }\n\n            tempV2.set(curve.aX, curve.aY);\n            transfVec2(tempV2);\n            curve.aX = tempV2.x;\n            curve.aY = tempV2.y;\n            curve.xRadius *= getTransformScaleX(m);\n            curve.yRadius *= getTransformScaleY(m);\n          }\n        }\n      }\n    }\n\n    function isTransformRotated(m) {\n      return m.elements[1] !== 0 || m.elements[3] !== 0;\n    }\n\n    function getTransformScaleX(m) {\n      const te = m.elements;\n      return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n    }\n\n    function getTransformScaleY(m) {\n      const te = m.elements;\n      return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n    } //\n\n\n    const paths = [];\n    const stylesheets = {};\n    const transformStack = [];\n    const tempTransform0 = new Matrix3();\n    const tempTransform1 = new Matrix3();\n    const tempTransform2 = new Matrix3();\n    const tempTransform3 = new Matrix3();\n    const tempV2 = new Vector2();\n    const tempV3 = new Vector3();\n    const currentTransform = new Matrix3();\n    const xml = new DOMParser().parseFromString(text, 'image/svg+xml'); // application/xml\n\n    parseNode(xml.documentElement, {\n      fill: '#000',\n      fillOpacity: 1,\n      strokeOpacity: 1,\n      strokeWidth: 1,\n      strokeLineJoin: 'miter',\n      strokeLineCap: 'butt',\n      strokeMiterLimit: 4\n    });\n    const data = {\n      paths: paths,\n      xml: xml.documentElement\n    }; // console.log( paths );\n\n    return data;\n  }\n\n  static createShapes(shapePath) {\n    // Param shapePath: a shapepath as returned by the parse function of this class\n    // Returns Shape object\n    const BIGNUMBER = 999999999;\n    const IntersectionLocationType = {\n      ORIGIN: 0,\n      DESTINATION: 1,\n      BETWEEN: 2,\n      LEFT: 3,\n      RIGHT: 4,\n      BEHIND: 5,\n      BEYOND: 6\n    };\n    const classifyResult = {\n      loc: IntersectionLocationType.ORIGIN,\n      t: 0\n    };\n\n    function findEdgeIntersection(a0, a1, b0, b1) {\n      const x1 = a0.x;\n      const x2 = a1.x;\n      const x3 = b0.x;\n      const x4 = b1.x;\n      const y1 = a0.y;\n      const y2 = a1.y;\n      const y3 = b0.y;\n      const y4 = b1.y;\n      const nom1 = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n      const nom2 = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n      const denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n      const t1 = nom1 / denom;\n      const t2 = nom2 / denom;\n\n      if (denom === 0 && nom1 !== 0 || t1 <= 0 || t1 >= 1 || t2 < 0 || t2 > 1) {\n        //1. lines are parallel or edges don't intersect\n        return null;\n      } else if (nom1 === 0 && denom === 0) {\n        //2. lines are colinear\n        //check if endpoints of edge2 (b0-b1) lies on edge1 (a0-a1)\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1); //find position of this endpoints relatively to edge1\n\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          } else if (classifyResult.loc == IntersectionLocationType.BETWEEN) {\n            const x = +(x1 + classifyResult.t * (x2 - x1)).toPrecision(10);\n            const y = +(y1 + classifyResult.t * (y2 - y1)).toPrecision(10);\n            return {\n              x: x,\n              y: y,\n              t: classifyResult.t\n            };\n          }\n        }\n\n        return null;\n      } else {\n        //3. edges intersect\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          }\n        }\n\n        const x = +(x1 + t1 * (x2 - x1)).toPrecision(10);\n        const y = +(y1 + t1 * (y2 - y1)).toPrecision(10);\n        return {\n          x: x,\n          y: y,\n          t: t1\n        };\n      }\n    }\n\n    function classifyPoint(p, edgeStart, edgeEnd) {\n      const ax = edgeEnd.x - edgeStart.x;\n      const ay = edgeEnd.y - edgeStart.y;\n      const bx = p.x - edgeStart.x;\n      const by = p.y - edgeStart.y;\n      const sa = ax * by - bx * ay;\n\n      if (p.x === edgeStart.x && p.y === edgeStart.y) {\n        classifyResult.loc = IntersectionLocationType.ORIGIN;\n        classifyResult.t = 0;\n        return;\n      }\n\n      if (p.x === edgeEnd.x && p.y === edgeEnd.y) {\n        classifyResult.loc = IntersectionLocationType.DESTINATION;\n        classifyResult.t = 1;\n        return;\n      }\n\n      if (sa < -Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.LEFT;\n        return;\n      }\n\n      if (sa > Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.RIGHT;\n        return;\n      }\n\n      if (ax * bx < 0 || ay * by < 0) {\n        classifyResult.loc = IntersectionLocationType.BEHIND;\n        return;\n      }\n\n      if (Math.sqrt(ax * ax + ay * ay) < Math.sqrt(bx * bx + by * by)) {\n        classifyResult.loc = IntersectionLocationType.BEYOND;\n        return;\n      }\n\n      let t;\n\n      if (ax !== 0) {\n        t = bx / ax;\n      } else {\n        t = by / ay;\n      }\n\n      classifyResult.loc = IntersectionLocationType.BETWEEN;\n      classifyResult.t = t;\n    }\n\n    function getIntersections(path1, path2) {\n      const intersectionsRaw = [];\n      const intersections = [];\n\n      for (let index = 1; index < path1.length; index++) {\n        const path1EdgeStart = path1[index - 1];\n        const path1EdgeEnd = path1[index];\n\n        for (let index2 = 1; index2 < path2.length; index2++) {\n          const path2EdgeStart = path2[index2 - 1];\n          const path2EdgeEnd = path2[index2];\n          const intersection = findEdgeIntersection(path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd);\n\n          if (intersection !== null && intersectionsRaw.find(i => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON) === undefined) {\n            intersectionsRaw.push(intersection);\n            intersections.push(new Vector2(intersection.x, intersection.y));\n          }\n        }\n      }\n\n      return intersections;\n    }\n\n    function getScanlineIntersections(scanline, boundingBox, paths) {\n      const center = new Vector2();\n      boundingBox.getCenter(center);\n      const allIntersections = [];\n      paths.forEach(path => {\n        // check if the center of the bounding box is in the bounding box of the paths.\n        // this is a pruning method to limit the search of intersections in paths that can't envelop of the current path.\n        // if a path envelops another path. The center of that oter path, has to be inside the bounding box of the enveloping path.\n        if (path.boundingBox.containsPoint(center)) {\n          const intersections = getIntersections(scanline, path.points);\n          intersections.forEach(p => {\n            allIntersections.push({\n              identifier: path.identifier,\n              isCW: path.isCW,\n              point: p\n            });\n          });\n        }\n      });\n      allIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      return allIntersections;\n    }\n\n    function isHoleTo(simplePath, allPaths, scanlineMinX, scanlineMaxX, _fillRule) {\n      if (_fillRule === null || _fillRule === undefined || _fillRule === '') {\n        _fillRule = 'nonzero';\n      }\n\n      const centerBoundingBox = new Vector2();\n      simplePath.boundingBox.getCenter(centerBoundingBox);\n      const scanline = [new Vector2(scanlineMinX, centerBoundingBox.y), new Vector2(scanlineMaxX, centerBoundingBox.y)];\n      const scanlineIntersections = getScanlineIntersections(scanline, simplePath.boundingBox, allPaths);\n      scanlineIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      const baseIntersections = [];\n      const otherIntersections = [];\n      scanlineIntersections.forEach(i => {\n        if (i.identifier === simplePath.identifier) {\n          baseIntersections.push(i);\n        } else {\n          otherIntersections.push(i);\n        }\n      });\n      const firstXOfPath = baseIntersections[0].point.x; // build up the path hierarchy\n\n      const stack = [];\n      let i = 0;\n\n      while (i < otherIntersections.length && otherIntersections[i].point.x < firstXOfPath) {\n        if (stack.length > 0 && stack[stack.length - 1] === otherIntersections[i].identifier) {\n          stack.pop();\n        } else {\n          stack.push(otherIntersections[i].identifier);\n        }\n\n        i++;\n      }\n\n      stack.push(simplePath.identifier);\n\n      if (_fillRule === 'evenodd') {\n        const isHole = stack.length % 2 === 0 ? true : false;\n        const isHoleFor = stack[stack.length - 2];\n        return {\n          identifier: simplePath.identifier,\n          isHole: isHole,\n          for: isHoleFor\n        };\n      } else if (_fillRule === 'nonzero') {\n        // check if path is a hole by counting the amount of paths with alternating rotations it has to cross.\n        let isHole = true;\n        let isHoleFor = null;\n        let lastCWValue = null;\n\n        for (let i = 0; i < stack.length; i++) {\n          const identifier = stack[i];\n\n          if (isHole) {\n            lastCWValue = allPaths[identifier].isCW;\n            isHole = false;\n            isHoleFor = identifier;\n          } else if (lastCWValue !== allPaths[identifier].isCW) {\n            lastCWValue = allPaths[identifier].isCW;\n            isHole = true;\n          }\n        }\n\n        return {\n          identifier: simplePath.identifier,\n          isHole: isHole,\n          for: isHoleFor\n        };\n      } else {\n        console.warn('fill-rule: \"' + _fillRule + '\" is currently not implemented.');\n      }\n    } // check for self intersecting paths\n    // TODO\n    // check intersecting paths\n    // TODO\n    // prepare paths for hole detection\n\n\n    let identifier = 0;\n    let scanlineMinX = BIGNUMBER;\n    let scanlineMaxX = -BIGNUMBER;\n    let simplePaths = shapePath.subPaths.map(p => {\n      const points = p.getPoints();\n      let maxY = -BIGNUMBER;\n      let minY = BIGNUMBER;\n      let maxX = -BIGNUMBER;\n      let minX = BIGNUMBER; //points.forEach(p => p.y *= -1);\n\n      for (let i = 0; i < points.length; i++) {\n        const p = points[i];\n\n        if (p.y > maxY) {\n          maxY = p.y;\n        }\n\n        if (p.y < minY) {\n          minY = p.y;\n        }\n\n        if (p.x > maxX) {\n          maxX = p.x;\n        }\n\n        if (p.x < minX) {\n          minX = p.x;\n        }\n      } //\n\n\n      if (scanlineMaxX <= maxX) {\n        scanlineMaxX = maxX + 1;\n      }\n\n      if (scanlineMinX >= minX) {\n        scanlineMinX = minX - 1;\n      }\n\n      return {\n        curves: p.curves,\n        points: points,\n        isCW: ShapeUtils.isClockWise(points),\n        identifier: identifier++,\n        boundingBox: new Box2(new Vector2(minX, minY), new Vector2(maxX, maxY))\n      };\n    });\n    simplePaths = simplePaths.filter(sp => sp.points.length > 1); // check if path is solid or a hole\n\n    const isAHole = simplePaths.map(p => isHoleTo(p, simplePaths, scanlineMinX, scanlineMaxX, shapePath.userData.style.fillRule));\n    const shapesToReturn = [];\n    simplePaths.forEach(p => {\n      const amIAHole = isAHole[p.identifier];\n\n      if (!amIAHole.isHole) {\n        const shape = new Shape();\n        shape.curves = p.curves;\n        const holes = isAHole.filter(h => h.isHole && h.for === p.identifier);\n        holes.forEach(h => {\n          const hole = simplePaths[h.identifier];\n          const path = new Path();\n          path.curves = hole.curves;\n          shape.holes.push(path);\n        });\n        shapesToReturn.push(shape);\n      }\n    });\n    return shapesToReturn;\n  }\n\n  static getStrokeStyle(width, color, lineJoin, lineCap, miterLimit) {\n    // Param width: Stroke width\n    // Param color: As returned by THREE.Color.getStyle()\n    // Param lineJoin: One of \"round\", \"bevel\", \"miter\" or \"miter-limit\"\n    // Param lineCap: One of \"round\", \"square\" or \"butt\"\n    // Param miterLimit: Maximum join length, in multiples of the \"width\" parameter (join is truncated if it exceeds that distance)\n    // Returns style object\n    width = width !== undefined ? width : 1;\n    color = color !== undefined ? color : '#000';\n    lineJoin = lineJoin !== undefined ? lineJoin : 'miter';\n    lineCap = lineCap !== undefined ? lineCap : 'butt';\n    miterLimit = miterLimit !== undefined ? miterLimit : 4;\n    return {\n      strokeColor: color,\n      strokeWidth: width,\n      strokeLineJoin: lineJoin,\n      strokeLineCap: lineCap,\n      strokeMiterLimit: miterLimit\n    };\n  }\n\n  static pointsToStroke(points, style, arcDivisions, minDistance) {\n    // Generates a stroke with some witdh around the given path.\n    // The path can be open or closed (last point equals to first point)\n    // Param points: Array of Vector2D (the path). Minimum 2 points.\n    // Param style: Object with SVG properties as returned by SVGLoader.getStrokeStyle(), or SVGLoader.parse() in the path.userData.style object\n    // Params arcDivisions: Arc divisions for round joins and endcaps. (Optional)\n    // Param minDistance: Points closer to this distance will be merged. (Optional)\n    // Returns BufferGeometry with stroke triangles (In plane z = 0). UV coordinates are generated ('u' along path. 'v' across it, from left to right)\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n      return null;\n    }\n\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    return geometry;\n  }\n\n  static pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n    // This function can be called to update existing arrays or buffers.\n    // Accepts same parameters as pointsToStroke, plus the buffers and optional offset.\n    // Param vertexOffset: Offset vertices to start writing in the buffers (3 elements/vertex for vertices and normals, and 2 elements/vertex for uvs)\n    // Returns number of written vertices / normals / uvs pairs\n    // if 'vertices' parameter is undefined no triangles will be generated, but the returned vertices count will still be valid (useful to preallocate the buffers)\n    // 'normals' and 'uvs' buffers are optional\n    const tempV2_1 = new Vector2();\n    const tempV2_2 = new Vector2();\n    const tempV2_3 = new Vector2();\n    const tempV2_4 = new Vector2();\n    const tempV2_5 = new Vector2();\n    const tempV2_6 = new Vector2();\n    const tempV2_7 = new Vector2();\n    const lastPointL = new Vector2();\n    const lastPointR = new Vector2();\n    const point0L = new Vector2();\n    const point0R = new Vector2();\n    const currentPointL = new Vector2();\n    const currentPointR = new Vector2();\n    const nextPointL = new Vector2();\n    const nextPointR = new Vector2();\n    const innerPoint = new Vector2();\n    const outerPoint = new Vector2();\n    arcDivisions = arcDivisions !== undefined ? arcDivisions : 12;\n    minDistance = minDistance !== undefined ? minDistance : 0.001;\n    vertexOffset = vertexOffset !== undefined ? vertexOffset : 0; // First ensure there are no duplicated points\n\n    points = removeDuplicatedPoints(points);\n    const numPoints = points.length;\n    if (numPoints < 2) return 0;\n    const isClosed = points[0].equals(points[numPoints - 1]);\n    let currentPoint;\n    let previousPoint = points[0];\n    let nextPoint;\n    const strokeWidth2 = style.strokeWidth / 2;\n    const deltaU = 1 / (numPoints - 1);\n    let u0 = 0,\n        u1;\n    let innerSideModified;\n    let joinIsOnLeftSide;\n    let isMiter;\n    let initialJoinIsOnLeftSide = false;\n    let numVertices = 0;\n    let currentCoordinate = vertexOffset * 3;\n    let currentCoordinateUV = vertexOffset * 2; // Get initial left and right stroke points\n\n    getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n    lastPointL.copy(points[0]).sub(tempV2_1);\n    lastPointR.copy(points[0]).add(tempV2_1);\n    point0L.copy(lastPointL);\n    point0R.copy(lastPointR);\n\n    for (let iPoint = 1; iPoint < numPoints; iPoint++) {\n      currentPoint = points[iPoint]; // Get next point\n\n      if (iPoint === numPoints - 1) {\n        if (isClosed) {\n          // Skip duplicated initial point\n          nextPoint = points[1];\n        } else {\n          nextPoint = undefined;\n        }\n      } else {\n        nextPoint = points[iPoint + 1];\n      } // Normal of previous segment in tempV2_1\n\n\n      const normal1 = tempV2_1;\n      getNormal(previousPoint, currentPoint, normal1);\n      tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n      currentPointL.copy(currentPoint).sub(tempV2_3);\n      currentPointR.copy(currentPoint).add(tempV2_3);\n      u1 = u0 + deltaU;\n      innerSideModified = false;\n\n      if (nextPoint !== undefined) {\n        // Normal of next segment in tempV2_2\n        getNormal(currentPoint, nextPoint, tempV2_2);\n        tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n        nextPointL.copy(currentPoint).sub(tempV2_3);\n        nextPointR.copy(currentPoint).add(tempV2_3);\n        joinIsOnLeftSide = true;\n        tempV2_3.subVectors(nextPoint, previousPoint);\n\n        if (normal1.dot(tempV2_3) < 0) {\n          joinIsOnLeftSide = false;\n        }\n\n        if (iPoint === 1) initialJoinIsOnLeftSide = joinIsOnLeftSide;\n        tempV2_3.subVectors(nextPoint, currentPoint);\n        tempV2_3.normalize();\n        const dot = Math.abs(normal1.dot(tempV2_3)); // If path is straight, don't create join\n\n        if (dot !== 0) {\n          // Compute inner and outer segment intersections\n          const miterSide = strokeWidth2 / dot;\n          tempV2_3.multiplyScalar(-miterSide);\n          tempV2_4.subVectors(currentPoint, previousPoint);\n          tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n          innerPoint.copy(tempV2_5).negate();\n          const miterLength2 = tempV2_5.length();\n          const segmentLengthPrev = tempV2_4.length();\n          tempV2_4.divideScalar(segmentLengthPrev);\n          tempV2_6.subVectors(nextPoint, currentPoint);\n          const segmentLengthNext = tempV2_6.length();\n          tempV2_6.divideScalar(segmentLengthNext); // Check that previous and next segments doesn't overlap with the innerPoint of intersection\n\n          if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n            innerSideModified = true;\n          }\n\n          outerPoint.copy(tempV2_5).add(currentPoint);\n          innerPoint.add(currentPoint);\n          isMiter = false;\n\n          if (innerSideModified) {\n            if (joinIsOnLeftSide) {\n              nextPointR.copy(innerPoint);\n              currentPointR.copy(innerPoint);\n            } else {\n              nextPointL.copy(innerPoint);\n              currentPointL.copy(innerPoint);\n            }\n          } else {\n            // The segment triangles are generated here if there was overlapping\n            makeSegmentTriangles();\n          }\n\n          switch (style.strokeLineJoin) {\n            case 'bevel':\n              makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n              break;\n\n            case 'round':\n              // Segment triangles\n              createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified); // Join triangles\n\n              if (joinIsOnLeftSide) {\n                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n              } else {\n                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n              }\n\n              break;\n\n            case 'miter':\n            case 'miter-clip':\n            default:\n              const miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n\n              if (miterFraction < 1) {\n                // The join miter length exceeds the miter limit\n                if (style.strokeLineJoin !== 'miter-clip') {\n                  makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                  break;\n                } else {\n                  // Segment triangles\n                  createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified); // Miter-clip join triangles\n\n                  if (joinIsOnLeftSide) {\n                    tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                    tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                    tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n              } else {\n                // Miter join segment triangles\n                if (innerSideModified) {\n                  // Optimized segment + join triangles\n                  if (joinIsOnLeftSide) {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(innerPoint, u1, 1);\n                  } else {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(innerPoint, u1, 0);\n                    addVertex(outerPoint, u1, 1);\n                  }\n\n                  if (joinIsOnLeftSide) {\n                    nextPointL.copy(outerPoint);\n                  } else {\n                    nextPointR.copy(outerPoint);\n                  }\n                } else {\n                  // Add extra miter join triangles\n                  if (joinIsOnLeftSide) {\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n\n                isMiter = true;\n              }\n\n              break;\n          }\n        } else {\n          // The segment triangles are generated here when two consecutive points are collinear\n          makeSegmentTriangles();\n        }\n      } else {\n        // The segment triangles are generated here if it is the ending segment\n        makeSegmentTriangles();\n      }\n\n      if (!isClosed && iPoint === numPoints - 1) {\n        // Start line endcap\n        addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n      } // Increment loop variables\n\n\n      u0 = u1;\n      previousPoint = currentPoint;\n      lastPointL.copy(nextPointL);\n      lastPointR.copy(nextPointR);\n    }\n\n    if (!isClosed) {\n      // Ending line endcap\n      addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n    } else if (innerSideModified && vertices) {\n      // Modify path first segment vertices to adjust to the segments inner and outer intersections\n      let lastOuter = outerPoint;\n      let lastInner = innerPoint;\n\n      if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n        lastOuter = innerPoint;\n        lastInner = outerPoint;\n      }\n\n      if (joinIsOnLeftSide) {\n        if (isMiter || initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 0 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n\n          if (isMiter) {\n            lastOuter.toArray(vertices, 1 * 3);\n          }\n        }\n      } else {\n        if (isMiter || !initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 1 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n\n          if (isMiter) {\n            lastOuter.toArray(vertices, 0 * 3);\n          }\n        }\n      }\n    }\n\n    return numVertices; // -- End of algorithm\n    // -- Functions\n\n    function getNormal(p1, p2, result) {\n      result.subVectors(p2, p1);\n      return result.set(-result.y, result.x).normalize();\n    }\n\n    function addVertex(position, u, v) {\n      if (vertices) {\n        vertices[currentCoordinate] = position.x;\n        vertices[currentCoordinate + 1] = position.y;\n        vertices[currentCoordinate + 2] = 0;\n\n        if (normals) {\n          normals[currentCoordinate] = 0;\n          normals[currentCoordinate + 1] = 0;\n          normals[currentCoordinate + 2] = 1;\n        }\n\n        currentCoordinate += 3;\n\n        if (uvs) {\n          uvs[currentCoordinateUV] = u;\n          uvs[currentCoordinateUV + 1] = v;\n          currentCoordinateUV += 2;\n        }\n      }\n\n      numVertices += 3;\n    }\n\n    function makeCircularSector(center, p1, p2, u, v) {\n      // param p1, p2: Points in the circle arc.\n      // p1 and p2 are in clockwise direction.\n      tempV2_1.copy(p1).sub(center).normalize();\n      tempV2_2.copy(p2).sub(center).normalize();\n      let angle = Math.PI;\n      const dot = tempV2_1.dot(tempV2_2);\n      if (Math.abs(dot) < 1) angle = Math.abs(Math.acos(dot));\n      angle /= arcDivisions;\n      tempV2_3.copy(p1);\n\n      for (let i = 0, il = arcDivisions - 1; i < il; i++) {\n        tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n        addVertex(tempV2_3, u, v);\n        addVertex(tempV2_4, u, v);\n        addVertex(center, u, 0.5);\n        tempV2_3.copy(tempV2_4);\n      }\n\n      addVertex(tempV2_4, u, v);\n      addVertex(p2, u, v);\n      addVertex(center, u, 0.5);\n    }\n\n    function makeSegmentTriangles() {\n      addVertex(lastPointR, u0, 1);\n      addVertex(lastPointL, u0, 0);\n      addVertex(currentPointL, u1, 0);\n      addVertex(lastPointR, u0, 1);\n      addVertex(currentPointL, u1, 1);\n      addVertex(currentPointR, u1, 0);\n    }\n\n    function makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u) {\n      if (innerSideModified) {\n        // Optimized segment + bevel triangles\n        if (joinIsOnLeftSide) {\n          // Path segments triangles\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1); // Bevel join triangle\n\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        } else {\n          // Path segments triangles\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1); // Bevel join triangle\n\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        }\n      } else {\n        // Bevel join triangle. The segment triangles are done in the main loop\n        if (joinIsOnLeftSide) {\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        } else {\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        }\n      }\n    }\n\n    function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified) {\n      if (innerSideModified) {\n        if (joinIsOnLeftSide) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u0, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(nextPointL, u0, 0);\n          addVertex(innerPoint, u1, 1);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u0, 1);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 0);\n          addVertex(nextPointR, u0, 1);\n        }\n      }\n    }\n\n    function addCapGeometry(center, p1, p2, joinIsOnLeftSide, start, u) {\n      // param center: End point of the path\n      // param p1, p2: Left and right cap points\n      switch (style.strokeLineCap) {\n        case 'round':\n          if (start) {\n            makeCircularSector(center, p2, p1, u, 0.5);\n          } else {\n            makeCircularSector(center, p1, p2, u, 0.5);\n          }\n\n          break;\n\n        case 'square':\n          if (start) {\n            tempV2_1.subVectors(p1, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center); // Modify already existing vertices\n\n            if (joinIsOnLeftSide) {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n              tempV2_4.toArray(vertices, 3 * 3);\n            } else {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_3.toArray(vertices, 3 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n            }\n          } else {\n            tempV2_1.subVectors(p2, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            const vl = vertices.length; // Modify already existing vertices\n\n            if (joinIsOnLeftSide) {\n              tempV2_3.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            } else {\n              tempV2_3.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            }\n          }\n\n          break;\n      }\n    }\n\n    function removeDuplicatedPoints(points) {\n      // Creates a new array if necessary with duplicated points removed.\n      // This does not remove duplicated initial and ending points of a closed path.\n      let dupPoints = false;\n\n      for (let i = 1, n = points.length - 1; i < n; i++) {\n        if (points[i].distanceTo(points[i + 1]) < minDistance) {\n          dupPoints = true;\n          break;\n        }\n      }\n\n      if (!dupPoints) return points;\n      const newPoints = [];\n      newPoints.push(points[0]);\n\n      for (let i = 1, n = points.length - 1; i < n; i++) {\n        if (points[i].distanceTo(points[i + 1]) >= minDistance) {\n          newPoints.push(points[i]);\n        }\n      }\n\n      newPoints.push(points[points.length - 1]);\n      return newPoints;\n    }\n  }\n\n}\n\nexport { SVGLoader };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/loaders/SVGLoader.js"],"names":["Loader","FileLoader","Matrix3","Vector2","Vector3","ShapeUtils","Box2","Shape","Path","BufferGeometry","Float32BufferAttribute","ShapePath","SVGLoader","constructor","manager","defaultDPI","defaultUnit","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","parseNode","node","style","nodeType","transform","getNodeTransform","traverseChildNodes","nodeName","parseCSSStylesheet","parseStyle","hasAttribute","parsePathNode","parseRectNode","parsePolygonNode","parsePolylineNode","parseCircleNode","parseEllipseNode","parseLineNode","usedNodeId","href","baseVal","substring","usedNode","viewportElement","getElementById","warn","fill","undefined","color","setStyle","transformPath","currentTransform","paths","push","userData","nodes","childNodes","i","length","transformStack","pop","copy","identity","point","control","firstPoint","isFirstPoint","doSetFirstPoint","d","getAttribute","commands","match","l","command","type","charAt","data","substr","trim","numbers","parseFloats","j","jl","x","y","moveTo","lineTo","bezierCurveTo","getReflection","quadraticCurveTo","rx","ry","start","clone","parseArcCommand","currentPath","autoClose","curves","currentPoint","sheet","cssRules","stylesheet","selectorList","selectorText","split","filter","Boolean","map","stylesheets","Object","assign","x_axis_rotation","large_arc_flag","sweep_flag","end","Math","PI","abs","dx2","dy2","x1p","cos","sin","y1p","rxs","rys","x1ps","y1ps","cr","s","sqrt","dq","pq","q","max","cxp","cyp","cx","cy","theta","svgAngle","delta","absellipse","ux","uy","vx","vy","dot","len","ang","acos","min","parseFloatWithUnits","w","h","bci","iterator","a","b","index","regex","replace","r","subpath","absarc","subPaths","x1","y1","x2","y2","stylesheetStyles","classSelectors","addStyle","svgName","jsName","adjustFunction","v","startsWith","clamp","positive","input","flags","stride","TypeError","RE","SEPARATOR","WHITESPACE","DIGIT","SIGN","POINT","COMMA","EXP","FLAGS","SEP","INT","FLOAT","state","seenComma","number","exponent","result","throwSyntaxError","current","partial","SyntaxError","newNumber","Number","pow","Array","isArray","includes","test","units","unitConversion","mm","cm","in","pt","pc","px","string","theUnit","String","n","u","endsWith","scale","parseFloat","parseNodeTransform","premultiply","tempTransform0","tx","ty","translate","transformsTexts","tIndex","transformText","openParPos","indexOf","closeParPos","transformType","array","angle","tempTransform1","tempTransform2","rotate","tempTransform3","multiplyMatrices","scaleX","scaleY","set","tan","m","transfVec2","v2","tempV3","applyMatrix3","isRotated","isTransformRotated","subPath","curve","isLineCurve","v1","isCubicBezierCurve","v0","v3","isQuadraticBezierCurve","isEllipseCurve","tempV2","aX","aY","xRadius","getTransformScaleX","yRadius","getTransformScaleY","elements","te","xml","DOMParser","parseFromString","documentElement","fillOpacity","strokeOpacity","strokeWidth","strokeLineJoin","strokeLineCap","strokeMiterLimit","createShapes","shapePath","BIGNUMBER","IntersectionLocationType","ORIGIN","DESTINATION","BETWEEN","LEFT","RIGHT","BEHIND","BEYOND","classifyResult","loc","t","findEdgeIntersection","a0","a1","b0","b1","x3","x4","y3","y4","nom1","nom2","denom","t1","t2","classifyPoint","toPrecision","p","edgeStart","edgeEnd","ax","ay","bx","by","sa","EPSILON","getIntersections","path1","path2","intersectionsRaw","intersections","path1EdgeStart","path1EdgeEnd","index2","path2EdgeStart","path2EdgeEnd","intersection","find","getScanlineIntersections","scanline","boundingBox","center","getCenter","allIntersections","forEach","containsPoint","points","identifier","isCW","sort","i1","i2","isHoleTo","simplePath","allPaths","scanlineMinX","scanlineMaxX","_fillRule","centerBoundingBox","scanlineIntersections","baseIntersections","otherIntersections","firstXOfPath","stack","isHole","isHoleFor","for","lastCWValue","simplePaths","getPoints","maxY","minY","maxX","minX","isClockWise","sp","isAHole","fillRule","shapesToReturn","amIAHole","shape","holes","hole","getStrokeStyle","width","lineJoin","lineCap","miterLimit","strokeColor","pointsToStroke","arcDivisions","minDistance","vertices","normals","uvs","pointsToStrokeWithBuffers","geometry","setAttribute","vertexOffset","tempV2_1","tempV2_2","tempV2_3","tempV2_4","tempV2_5","tempV2_6","tempV2_7","lastPointL","lastPointR","point0L","point0R","currentPointL","currentPointR","nextPointL","nextPointR","innerPoint","outerPoint","removeDuplicatedPoints","numPoints","isClosed","equals","previousPoint","nextPoint","strokeWidth2","deltaU","u0","u1","innerSideModified","joinIsOnLeftSide","isMiter","initialJoinIsOnLeftSide","numVertices","currentCoordinate","currentCoordinateUV","getNormal","multiplyScalar","sub","add","iPoint","normal1","subVectors","normalize","miterSide","setLength","negate","miterLength2","segmentLengthPrev","divideScalar","segmentLengthNext","makeSegmentTriangles","makeSegmentWithBevelJoin","createSegmentTrianglesWithMiddleSection","makeCircularSector","miterFraction","addVertex","addCapGeometry","lastOuter","lastInner","toArray","p1","p2","position","il","rotateAround","addVectors","vl","dupPoints","distanceTo","newPoints"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, Matrix3, Vector2, Vector3, ShapeUtils, Box2, Shape, Path, BufferGeometry, Float32BufferAttribute, ShapePath } from 'three';\n\nclass SVGLoader extends Loader {\n  constructor(manager) {\n    super(manager); // Default dots per inch\n\n    this.defaultDPI = 90; // Accepted units: 'mm', 'cm', 'in', 'pt', 'pc', 'px'\n\n    this.defaultUnit = 'px';\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(text) {\n    const scope = this;\n\n    function parseNode(node, style) {\n      if (node.nodeType !== 1) return;\n      const transform = getNodeTransform(node);\n      let traverseChildNodes = true;\n      let path = null;\n\n      switch (node.nodeName) {\n        case 'svg':\n          break;\n\n        case 'style':\n          parseCSSStylesheet(node);\n          break;\n\n        case 'g':\n          style = parseStyle(node, style);\n          break;\n\n        case 'path':\n          style = parseStyle(node, style);\n          if (node.hasAttribute('d')) path = parsePathNode(node);\n          break;\n\n        case 'rect':\n          style = parseStyle(node, style);\n          path = parseRectNode(node);\n          break;\n\n        case 'polygon':\n          style = parseStyle(node, style);\n          path = parsePolygonNode(node);\n          break;\n\n        case 'polyline':\n          style = parseStyle(node, style);\n          path = parsePolylineNode(node);\n          break;\n\n        case 'circle':\n          style = parseStyle(node, style);\n          path = parseCircleNode(node);\n          break;\n\n        case 'ellipse':\n          style = parseStyle(node, style);\n          path = parseEllipseNode(node);\n          break;\n\n        case 'line':\n          style = parseStyle(node, style);\n          path = parseLineNode(node);\n          break;\n\n        case 'defs':\n          traverseChildNodes = false;\n          break;\n\n        case 'use':\n          style = parseStyle(node, style);\n          const usedNodeId = node.href.baseVal.substring(1);\n          const usedNode = node.viewportElement.getElementById(usedNodeId);\n\n          if (usedNode) {\n            parseNode(usedNode, style);\n          } else {\n            console.warn(\"SVGLoader: 'use node' references non-existent node id: \" + usedNodeId);\n          }\n\n          break;\n\n      }\n\n      if (path) {\n        if (style.fill !== undefined && style.fill !== 'none') {\n          path.color.setStyle(style.fill);\n        }\n\n        transformPath(path, currentTransform);\n        paths.push(path);\n        path.userData = {\n          node: node,\n          style: style\n        };\n      }\n\n      if (traverseChildNodes) {\n        const nodes = node.childNodes;\n\n        for (let i = 0; i < nodes.length; i++) {\n          parseNode(nodes[i], style);\n        }\n      }\n\n      if (transform) {\n        transformStack.pop();\n\n        if (transformStack.length > 0) {\n          currentTransform.copy(transformStack[transformStack.length - 1]);\n        } else {\n          currentTransform.identity();\n        }\n      }\n    }\n\n    function parsePathNode(node) {\n      const path = new ShapePath();\n      const point = new Vector2();\n      const control = new Vector2();\n      const firstPoint = new Vector2();\n      let isFirstPoint = true;\n      let doSetFirstPoint = false;\n      const d = node.getAttribute('d'); // console.log( d );\n\n      const commands = d.match(/[a-df-z][^a-df-z]*/gi);\n\n      for (let i = 0, l = commands.length; i < l; i++) {\n        const command = commands[i];\n        const type = command.charAt(0);\n        const data = command.substr(1).trim();\n\n        if (isFirstPoint === true) {\n          doSetFirstPoint = true;\n          isFirstPoint = false;\n        }\n\n        let numbers;\n\n        switch (type) {\n          case 'M':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n\n              if (j === 0) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'H':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'V':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y = numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'L':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'C':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], numbers[j + 5]);\n              control.x = numbers[j + 2];\n              control.y = numbers[j + 3];\n              point.x = numbers[j + 4];\n              point.y = numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'S':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'Q':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(numbers[j + 0], numbers[j + 1], numbers[j + 2], numbers[j + 3]);\n              control.x = numbers[j + 0];\n              control.y = numbers[j + 1];\n              point.x = numbers[j + 2];\n              point.y = numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'T':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, numbers[j + 0], numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = numbers[j + 0];\n              point.y = numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'A':\n            numbers = parseFloats(data, [3, 4], 7);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              // skip command if start point == end point\n              if (numbers[j + 5] == point.x && numbers[j + 6] == point.y) continue;\n              const start = point.clone();\n              point.x = numbers[j + 5];\n              point.y = numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'm':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n\n              if (j === 0) {\n                path.moveTo(point.x, point.y);\n              } else {\n                path.lineTo(point.x, point.y);\n              }\n\n              if (j === 0) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'h':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.x += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'v':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j++) {\n              point.y += numbers[j];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'l':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              point.x += numbers[j + 0];\n              point.y += numbers[j + 1];\n              control.x = point.x;\n              control.y = point.y;\n              path.lineTo(point.x, point.y);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'c':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 6) {\n              path.bezierCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3], point.x + numbers[j + 4], point.y + numbers[j + 5]);\n              control.x = point.x + numbers[j + 2];\n              control.y = point.y + numbers[j + 3];\n              point.x += numbers[j + 4];\n              point.y += numbers[j + 5];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 's':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.bezierCurveTo(getReflection(point.x, control.x), getReflection(point.y, control.y), point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'q':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 4) {\n              path.quadraticCurveTo(point.x + numbers[j + 0], point.y + numbers[j + 1], point.x + numbers[j + 2], point.y + numbers[j + 3]);\n              control.x = point.x + numbers[j + 0];\n              control.y = point.y + numbers[j + 1];\n              point.x += numbers[j + 2];\n              point.y += numbers[j + 3];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 't':\n            numbers = parseFloats(data);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 2) {\n              const rx = getReflection(point.x, control.x);\n              const ry = getReflection(point.y, control.y);\n              path.quadraticCurveTo(rx, ry, point.x + numbers[j + 0], point.y + numbers[j + 1]);\n              control.x = rx;\n              control.y = ry;\n              point.x = point.x + numbers[j + 0];\n              point.y = point.y + numbers[j + 1];\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'a':\n            numbers = parseFloats(data, [3, 4], 7);\n\n            for (let j = 0, jl = numbers.length; j < jl; j += 7) {\n              // skip command if no displacement\n              if (numbers[j + 5] == 0 && numbers[j + 6] == 0) continue;\n              const start = point.clone();\n              point.x += numbers[j + 5];\n              point.y += numbers[j + 6];\n              control.x = point.x;\n              control.y = point.y;\n              parseArcCommand(path, numbers[j], numbers[j + 1], numbers[j + 2], numbers[j + 3], numbers[j + 4], start, point);\n              if (j === 0 && doSetFirstPoint === true) firstPoint.copy(point);\n            }\n\n            break;\n\n          case 'Z':\n          case 'z':\n            path.currentPath.autoClose = true;\n\n            if (path.currentPath.curves.length > 0) {\n              // Reset point to beginning of Path\n              point.copy(firstPoint);\n              path.currentPath.currentPoint.copy(point);\n              isFirstPoint = true;\n            }\n\n            break;\n\n          default:\n            console.warn(command);\n        } // console.log( type, parseFloats( data ), parseFloats( data ).length  )\n\n\n        doSetFirstPoint = false;\n      }\n\n      return path;\n    }\n\n    function parseCSSStylesheet(node) {\n      if (!node.sheet || !node.sheet.cssRules || !node.sheet.cssRules.length) return;\n\n      for (let i = 0; i < node.sheet.cssRules.length; i++) {\n        const stylesheet = node.sheet.cssRules[i];\n        if (stylesheet.type !== 1) continue;\n        const selectorList = stylesheet.selectorText.split(/,/gm).filter(Boolean).map(i => i.trim());\n\n        for (let j = 0; j < selectorList.length; j++) {\n          stylesheets[selectorList[j]] = Object.assign(stylesheets[selectorList[j]] || {}, stylesheet.style);\n        }\n      }\n    }\n    /**\n     * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n     * https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/ Appendix: Endpoint to center arc conversion\n     * From\n     * rx ry x-axis-rotation large-arc-flag sweep-flag x y\n     * To\n     * aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation\n     */\n\n\n    function parseArcCommand(path, rx, ry, x_axis_rotation, large_arc_flag, sweep_flag, start, end) {\n      if (rx == 0 || ry == 0) {\n        // draw a line if either of the radii == 0\n        path.lineTo(end.x, end.y);\n        return;\n      }\n\n      x_axis_rotation = x_axis_rotation * Math.PI / 180; // Ensure radii are positive\n\n      rx = Math.abs(rx);\n      ry = Math.abs(ry); // Compute (x1', y1')\n\n      const dx2 = (start.x - end.x) / 2.0;\n      const dy2 = (start.y - end.y) / 2.0;\n      const x1p = Math.cos(x_axis_rotation) * dx2 + Math.sin(x_axis_rotation) * dy2;\n      const y1p = -Math.sin(x_axis_rotation) * dx2 + Math.cos(x_axis_rotation) * dy2; // Compute (cx', cy')\n\n      let rxs = rx * rx;\n      let rys = ry * ry;\n      const x1ps = x1p * x1p;\n      const y1ps = y1p * y1p; // Ensure radii are large enough\n\n      const cr = x1ps / rxs + y1ps / rys;\n\n      if (cr > 1) {\n        // scale up rx,ry equally so cr == 1\n        const s = Math.sqrt(cr);\n        rx = s * rx;\n        ry = s * ry;\n        rxs = rx * rx;\n        rys = ry * ry;\n      }\n\n      const dq = rxs * y1ps + rys * x1ps;\n      const pq = (rxs * rys - dq) / dq;\n      let q = Math.sqrt(Math.max(0, pq));\n      if (large_arc_flag === sweep_flag) q = -q;\n      const cxp = q * rx * y1p / ry;\n      const cyp = -q * ry * x1p / rx; // Step 3: Compute (cx, cy) from (cx', cy')\n\n      const cx = Math.cos(x_axis_rotation) * cxp - Math.sin(x_axis_rotation) * cyp + (start.x + end.x) / 2;\n      const cy = Math.sin(x_axis_rotation) * cxp + Math.cos(x_axis_rotation) * cyp + (start.y + end.y) / 2; // Step 4: Compute θ1 and Δθ\n\n      const theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n      const delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n      path.currentPath.absellipse(cx, cy, rx, ry, theta, theta + delta, sweep_flag === 0, x_axis_rotation);\n    }\n\n    function svgAngle(ux, uy, vx, vy) {\n      const dot = ux * vx + uy * vy;\n      const len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n      let ang = Math.acos(Math.max(-1, Math.min(1, dot / len))); // floating point precision, slightly over values appear\n\n      if (ux * vy - uy * vx < 0) ang = -ang;\n      return ang;\n    }\n    /*\n     * According to https://www.w3.org/TR/SVG/shapes.html#RectElementRXAttribute\n     * rounded corner should be rendered to elliptical arc, but bezier curve does the job well enough\n     */\n\n\n    function parseRectNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('x') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('y') || 0);\n      const rx = parseFloatWithUnits(node.getAttribute('rx') || node.getAttribute('ry') || 0);\n      const ry = parseFloatWithUnits(node.getAttribute('ry') || node.getAttribute('rx') || 0);\n      const w = parseFloatWithUnits(node.getAttribute('width'));\n      const h = parseFloatWithUnits(node.getAttribute('height')); // Ellipse arc to Bezier approximation Coefficient (Inversed). See:\n      // https://spencermortensen.com/articles/bezier-circle/\n\n      const bci = 1 - 0.551915024494;\n      const path = new ShapePath(); // top left\n\n      path.moveTo(x + rx, y); // top right\n\n      path.lineTo(x + w - rx, y);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w - rx * bci, y, x + w, y + ry * bci, x + w, y + ry);\n      } // bottom right\n\n\n      path.lineTo(x + w, y + h - ry);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + w, y + h - ry * bci, x + w - rx * bci, y + h, x + w - rx, y + h);\n      } // bottom left\n\n\n      path.lineTo(x + rx, y + h);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x + rx * bci, y + h, x, y + h - ry * bci, x, y + h - ry);\n      } // back to top left\n\n\n      path.lineTo(x, y + ry);\n\n      if (rx !== 0 || ry !== 0) {\n        path.bezierCurveTo(x, y + ry * bci, x + rx * bci, y, x + rx, y);\n      }\n\n      return path;\n    }\n\n    function parsePolygonNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n\n        index++;\n      }\n\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute('points').replace(regex, iterator);\n      path.currentPath.autoClose = true;\n      return path;\n    }\n\n    function parsePolylineNode(node) {\n      function iterator(match, a, b) {\n        const x = parseFloatWithUnits(a);\n        const y = parseFloatWithUnits(b);\n\n        if (index === 0) {\n          path.moveTo(x, y);\n        } else {\n          path.lineTo(x, y);\n        }\n\n        index++;\n      }\n\n      const regex = /(-?[\\d\\.?]+)[,|\\s](-?[\\d\\.?]+)/g;\n      const path = new ShapePath();\n      let index = 0;\n      node.getAttribute('points').replace(regex, iterator);\n      path.currentPath.autoClose = false;\n      return path;\n    }\n\n    function parseCircleNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('cx') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('cy') || 0);\n      const r = parseFloatWithUnits(node.getAttribute('r') || 0);\n      const subpath = new Path();\n      subpath.absarc(x, y, r, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n\n    function parseEllipseNode(node) {\n      const x = parseFloatWithUnits(node.getAttribute('cx') || 0);\n      const y = parseFloatWithUnits(node.getAttribute('cy') || 0);\n      const rx = parseFloatWithUnits(node.getAttribute('rx') || 0);\n      const ry = parseFloatWithUnits(node.getAttribute('ry') || 0);\n      const subpath = new Path();\n      subpath.absellipse(x, y, rx, ry, 0, Math.PI * 2);\n      const path = new ShapePath();\n      path.subPaths.push(subpath);\n      return path;\n    }\n\n    function parseLineNode(node) {\n      const x1 = parseFloatWithUnits(node.getAttribute('x1') || 0);\n      const y1 = parseFloatWithUnits(node.getAttribute('y1') || 0);\n      const x2 = parseFloatWithUnits(node.getAttribute('x2') || 0);\n      const y2 = parseFloatWithUnits(node.getAttribute('y2') || 0);\n      const path = new ShapePath();\n      path.moveTo(x1, y1);\n      path.lineTo(x2, y2);\n      path.currentPath.autoClose = false;\n      return path;\n    } //\n\n\n    function parseStyle(node, style) {\n      style = Object.assign({}, style); // clone style\n\n      let stylesheetStyles = {};\n\n      if (node.hasAttribute('class')) {\n        const classSelectors = node.getAttribute('class').split(/\\s/).filter(Boolean).map(i => i.trim());\n\n        for (let i = 0; i < classSelectors.length; i++) {\n          stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['.' + classSelectors[i]]);\n        }\n      }\n\n      if (node.hasAttribute('id')) {\n        stylesheetStyles = Object.assign(stylesheetStyles, stylesheets['#' + node.getAttribute('id')]);\n      }\n\n      function addStyle(svgName, jsName, adjustFunction) {\n        if (adjustFunction === undefined) {\n          adjustFunction = function copy(v) {\n            if (v.startsWith('url')) console.warn('SVGLoader: url access in attributes is not implemented.');\n            return v;\n          };\n        }\n\n        if (node.hasAttribute(svgName)) style[jsName] = adjustFunction(node.getAttribute(svgName));\n        if (stylesheetStyles[svgName]) style[jsName] = adjustFunction(stylesheetStyles[svgName]);\n        if (node.style && node.style[svgName] !== '') style[jsName] = adjustFunction(node.style[svgName]);\n      }\n\n      function clamp(v) {\n        return Math.max(0, Math.min(1, parseFloatWithUnits(v)));\n      }\n\n      function positive(v) {\n        return Math.max(0, parseFloatWithUnits(v));\n      }\n\n      addStyle('fill', 'fill');\n      addStyle('fill-opacity', 'fillOpacity', clamp);\n      addStyle('fill-rule', 'fillRule');\n      addStyle('opacity', 'opacity', clamp);\n      addStyle('stroke', 'stroke');\n      addStyle('stroke-opacity', 'strokeOpacity', clamp);\n      addStyle('stroke-width', 'strokeWidth', positive);\n      addStyle('stroke-linejoin', 'strokeLineJoin');\n      addStyle('stroke-linecap', 'strokeLineCap');\n      addStyle('stroke-miterlimit', 'strokeMiterLimit', positive);\n      addStyle('visibility', 'visibility');\n      return style;\n    } // http://www.w3.org/TR/SVG11/implnote.html#PathElementImplementationNotes\n\n\n    function getReflection(a, b) {\n      return a - (b - a);\n    } // from https://github.com/ppvg/svg-numbers (MIT License)\n\n\n    function parseFloats(input, flags, stride) {\n      if (typeof input !== 'string') {\n        throw new TypeError('Invalid input: ' + typeof input);\n      } // Character groups\n\n\n      const RE = {\n        SEPARATOR: /[ \\t\\r\\n\\,.\\-+]/,\n        WHITESPACE: /[ \\t\\r\\n]/,\n        DIGIT: /[\\d]/,\n        SIGN: /[-+]/,\n        POINT: /\\./,\n        COMMA: /,/,\n        EXP: /e/i,\n        FLAGS: /[01]/\n      }; // States\n\n      const SEP = 0;\n      const INT = 1;\n      const FLOAT = 2;\n      const EXP = 3;\n      let state = SEP;\n      let seenComma = true;\n      let number = '',\n          exponent = '';\n      const result = [];\n\n      function throwSyntaxError(current, i, partial) {\n        const error = new SyntaxError('Unexpected character \"' + current + '\" at index ' + i + '.');\n        error.partial = partial;\n        throw error;\n      }\n\n      function newNumber() {\n        if (number !== '') {\n          if (exponent === '') result.push(Number(number));else result.push(Number(number) * Math.pow(10, Number(exponent)));\n        }\n\n        number = '';\n        exponent = '';\n      }\n\n      let current;\n      const length = input.length;\n\n      for (let i = 0; i < length; i++) {\n        current = input[i]; // check for flags\n\n        if (Array.isArray(flags) && flags.includes(result.length % stride) && RE.FLAGS.test(current)) {\n          state = INT;\n          number = current;\n          newNumber();\n          continue;\n        } // parse until next number\n\n\n        if (state === SEP) {\n          // eat whitespace\n          if (RE.WHITESPACE.test(current)) {\n            continue;\n          } // start new number\n\n\n          if (RE.DIGIT.test(current) || RE.SIGN.test(current)) {\n            state = INT;\n            number = current;\n            continue;\n          }\n\n          if (RE.POINT.test(current)) {\n            state = FLOAT;\n            number = current;\n            continue;\n          } // throw on double commas (e.g. \"1, , 2\")\n\n\n          if (RE.COMMA.test(current)) {\n            if (seenComma) {\n              throwSyntaxError(current, i, result);\n            }\n\n            seenComma = true;\n          }\n        } // parse integer part\n\n\n        if (state === INT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n\n          if (RE.POINT.test(current)) {\n            number += current;\n            state = FLOAT;\n            continue;\n          }\n\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          } // throw on double signs (\"-+1\"), but not on sign as separator (\"-1-2\")\n\n\n          if (RE.SIGN.test(current) && number.length === 1 && RE.SIGN.test(number[0])) {\n            throwSyntaxError(current, i, result);\n          }\n        } // parse decimal part\n\n\n        if (state === FLOAT) {\n          if (RE.DIGIT.test(current)) {\n            number += current;\n            continue;\n          }\n\n          if (RE.EXP.test(current)) {\n            state = EXP;\n            continue;\n          } // throw on double decimal points (e.g. \"1..2\")\n\n\n          if (RE.POINT.test(current) && number[number.length - 1] === '.') {\n            throwSyntaxError(current, i, result);\n          }\n        } // parse exponent part\n\n\n        if (state === EXP) {\n          if (RE.DIGIT.test(current)) {\n            exponent += current;\n            continue;\n          }\n\n          if (RE.SIGN.test(current)) {\n            if (exponent === '') {\n              exponent += current;\n              continue;\n            }\n\n            if (exponent.length === 1 && RE.SIGN.test(exponent)) {\n              throwSyntaxError(current, i, result);\n            }\n          }\n        } // end of number\n\n\n        if (RE.WHITESPACE.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = false;\n        } else if (RE.COMMA.test(current)) {\n          newNumber();\n          state = SEP;\n          seenComma = true;\n        } else if (RE.SIGN.test(current)) {\n          newNumber();\n          state = INT;\n          number = current;\n        } else if (RE.POINT.test(current)) {\n          newNumber();\n          state = FLOAT;\n          number = current;\n        } else {\n          throwSyntaxError(current, i, result);\n        }\n      } // add the last number found (if any)\n\n\n      newNumber();\n      return result;\n    } // Units\n\n\n    const units = ['mm', 'cm', 'in', 'pt', 'pc', 'px']; // Conversion: [ fromUnit ][ toUnit ] (-1 means dpi dependent)\n\n    const unitConversion = {\n      mm: {\n        mm: 1,\n        cm: 0.1,\n        in: 1 / 25.4,\n        pt: 72 / 25.4,\n        pc: 6 / 25.4,\n        px: -1\n      },\n      cm: {\n        mm: 10,\n        cm: 1,\n        in: 1 / 2.54,\n        pt: 72 / 2.54,\n        pc: 6 / 2.54,\n        px: -1\n      },\n      in: {\n        mm: 25.4,\n        cm: 2.54,\n        in: 1,\n        pt: 72,\n        pc: 6,\n        px: -1\n      },\n      pt: {\n        mm: 25.4 / 72,\n        cm: 2.54 / 72,\n        in: 1 / 72,\n        pt: 1,\n        pc: 6 / 72,\n        px: -1\n      },\n      pc: {\n        mm: 25.4 / 6,\n        cm: 2.54 / 6,\n        in: 1 / 6,\n        pt: 72 / 6,\n        pc: 1,\n        px: -1\n      },\n      px: {\n        px: 1\n      }\n    };\n\n    function parseFloatWithUnits(string) {\n      let theUnit = 'px';\n\n      if (typeof string === 'string' || string instanceof String) {\n        for (let i = 0, n = units.length; i < n; i++) {\n          const u = units[i];\n\n          if (string.endsWith(u)) {\n            theUnit = u;\n            string = string.substring(0, string.length - u.length);\n            break;\n          }\n        }\n      }\n\n      let scale = undefined;\n\n      if (theUnit === 'px' && scope.defaultUnit !== 'px') {\n        // Conversion scale from  pixels to inches, then to default units\n        scale = unitConversion['in'][scope.defaultUnit] / scope.defaultDPI;\n      } else {\n        scale = unitConversion[theUnit][scope.defaultUnit];\n\n        if (scale < 0) {\n          // Conversion scale to pixels\n          scale = unitConversion[theUnit]['in'] * scope.defaultDPI;\n        }\n      }\n\n      return scale * parseFloat(string);\n    } // Transforms\n\n\n    function getNodeTransform(node) {\n      if (!(node.hasAttribute('transform') || node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y')))) {\n        return null;\n      }\n\n      const transform = parseNodeTransform(node);\n\n      if (transformStack.length > 0) {\n        transform.premultiply(transformStack[transformStack.length - 1]);\n      }\n\n      currentTransform.copy(transform);\n      transformStack.push(transform);\n      return transform;\n    }\n\n    function parseNodeTransform(node) {\n      const transform = new Matrix3();\n      const currentTransform = tempTransform0;\n\n      if (node.nodeName === 'use' && (node.hasAttribute('x') || node.hasAttribute('y'))) {\n        const tx = parseFloatWithUnits(node.getAttribute('x'));\n        const ty = parseFloatWithUnits(node.getAttribute('y'));\n        transform.translate(tx, ty);\n      }\n\n      if (node.hasAttribute('transform')) {\n        const transformsTexts = node.getAttribute('transform').split(')');\n\n        for (let tIndex = transformsTexts.length - 1; tIndex >= 0; tIndex--) {\n          const transformText = transformsTexts[tIndex].trim();\n          if (transformText === '') continue;\n          const openParPos = transformText.indexOf('(');\n          const closeParPos = transformText.length;\n\n          if (openParPos > 0 && openParPos < closeParPos) {\n            const transformType = transformText.substr(0, openParPos);\n            const array = parseFloats(transformText.substr(openParPos + 1, closeParPos - openParPos - 1));\n            currentTransform.identity();\n\n            switch (transformType) {\n              case 'translate':\n                if (array.length >= 1) {\n                  const tx = array[0];\n                  let ty = tx;\n\n                  if (array.length >= 2) {\n                    ty = array[1];\n                  }\n\n                  currentTransform.translate(tx, ty);\n                }\n\n                break;\n\n              case 'rotate':\n                if (array.length >= 1) {\n                  let angle = 0;\n                  let cx = 0;\n                  let cy = 0; // Angle\n\n                  angle = -array[0] * Math.PI / 180;\n\n                  if (array.length >= 3) {\n                    // Center x, y\n                    cx = array[1];\n                    cy = array[2];\n                  } // Rotate around center (cx, cy)\n\n\n                  tempTransform1.identity().translate(-cx, -cy);\n                  tempTransform2.identity().rotate(angle);\n                  tempTransform3.multiplyMatrices(tempTransform2, tempTransform1);\n                  tempTransform1.identity().translate(cx, cy);\n                  currentTransform.multiplyMatrices(tempTransform1, tempTransform3);\n                }\n\n                break;\n\n              case 'scale':\n                if (array.length >= 1) {\n                  const scaleX = array[0];\n                  let scaleY = scaleX;\n\n                  if (array.length >= 2) {\n                    scaleY = array[1];\n                  }\n\n                  currentTransform.scale(scaleX, scaleY);\n                }\n\n                break;\n\n              case 'skewX':\n                if (array.length === 1) {\n                  currentTransform.set(1, Math.tan(array[0] * Math.PI / 180), 0, 0, 1, 0, 0, 0, 1);\n                }\n\n                break;\n\n              case 'skewY':\n                if (array.length === 1) {\n                  currentTransform.set(1, 0, 0, Math.tan(array[0] * Math.PI / 180), 1, 0, 0, 0, 1);\n                }\n\n                break;\n\n              case 'matrix':\n                if (array.length === 6) {\n                  currentTransform.set(array[0], array[2], array[4], array[1], array[3], array[5], 0, 0, 1);\n                }\n\n                break;\n            }\n          }\n\n          transform.premultiply(currentTransform);\n        }\n      }\n\n      return transform;\n    }\n\n    function transformPath(path, m) {\n      function transfVec2(v2) {\n        tempV3.set(v2.x, v2.y, 1).applyMatrix3(m);\n        v2.set(tempV3.x, tempV3.y);\n      }\n\n      const isRotated = isTransformRotated(m);\n      const subPaths = path.subPaths;\n\n      for (let i = 0, n = subPaths.length; i < n; i++) {\n        const subPath = subPaths[i];\n        const curves = subPath.curves;\n\n        for (let j = 0; j < curves.length; j++) {\n          const curve = curves[j];\n\n          if (curve.isLineCurve) {\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isCubicBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n            transfVec2(curve.v3);\n          } else if (curve.isQuadraticBezierCurve) {\n            transfVec2(curve.v0);\n            transfVec2(curve.v1);\n            transfVec2(curve.v2);\n          } else if (curve.isEllipseCurve) {\n            if (isRotated) {\n              console.warn('SVGLoader: Elliptic arc or ellipse rotation or skewing is not implemented.');\n            }\n\n            tempV2.set(curve.aX, curve.aY);\n            transfVec2(tempV2);\n            curve.aX = tempV2.x;\n            curve.aY = tempV2.y;\n            curve.xRadius *= getTransformScaleX(m);\n            curve.yRadius *= getTransformScaleY(m);\n          }\n        }\n      }\n    }\n\n    function isTransformRotated(m) {\n      return m.elements[1] !== 0 || m.elements[3] !== 0;\n    }\n\n    function getTransformScaleX(m) {\n      const te = m.elements;\n      return Math.sqrt(te[0] * te[0] + te[1] * te[1]);\n    }\n\n    function getTransformScaleY(m) {\n      const te = m.elements;\n      return Math.sqrt(te[3] * te[3] + te[4] * te[4]);\n    } //\n\n\n    const paths = [];\n    const stylesheets = {};\n    const transformStack = [];\n    const tempTransform0 = new Matrix3();\n    const tempTransform1 = new Matrix3();\n    const tempTransform2 = new Matrix3();\n    const tempTransform3 = new Matrix3();\n    const tempV2 = new Vector2();\n    const tempV3 = new Vector3();\n    const currentTransform = new Matrix3();\n    const xml = new DOMParser().parseFromString(text, 'image/svg+xml'); // application/xml\n\n    parseNode(xml.documentElement, {\n      fill: '#000',\n      fillOpacity: 1,\n      strokeOpacity: 1,\n      strokeWidth: 1,\n      strokeLineJoin: 'miter',\n      strokeLineCap: 'butt',\n      strokeMiterLimit: 4\n    });\n    const data = {\n      paths: paths,\n      xml: xml.documentElement\n    }; // console.log( paths );\n\n    return data;\n  }\n\n  static createShapes(shapePath) {\n    // Param shapePath: a shapepath as returned by the parse function of this class\n    // Returns Shape object\n    const BIGNUMBER = 999999999;\n    const IntersectionLocationType = {\n      ORIGIN: 0,\n      DESTINATION: 1,\n      BETWEEN: 2,\n      LEFT: 3,\n      RIGHT: 4,\n      BEHIND: 5,\n      BEYOND: 6\n    };\n    const classifyResult = {\n      loc: IntersectionLocationType.ORIGIN,\n      t: 0\n    };\n\n    function findEdgeIntersection(a0, a1, b0, b1) {\n      const x1 = a0.x;\n      const x2 = a1.x;\n      const x3 = b0.x;\n      const x4 = b1.x;\n      const y1 = a0.y;\n      const y2 = a1.y;\n      const y3 = b0.y;\n      const y4 = b1.y;\n      const nom1 = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n      const nom2 = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n      const denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n      const t1 = nom1 / denom;\n      const t2 = nom2 / denom;\n\n      if (denom === 0 && nom1 !== 0 || t1 <= 0 || t1 >= 1 || t2 < 0 || t2 > 1) {\n        //1. lines are parallel or edges don't intersect\n        return null;\n      } else if (nom1 === 0 && denom === 0) {\n        //2. lines are colinear\n        //check if endpoints of edge2 (b0-b1) lies on edge1 (a0-a1)\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1); //find position of this endpoints relatively to edge1\n\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          } else if (classifyResult.loc == IntersectionLocationType.BETWEEN) {\n            const x = +(x1 + classifyResult.t * (x2 - x1)).toPrecision(10);\n            const y = +(y1 + classifyResult.t * (y2 - y1)).toPrecision(10);\n            return {\n              x: x,\n              y: y,\n              t: classifyResult.t\n            };\n          }\n        }\n\n        return null;\n      } else {\n        //3. edges intersect\n        for (let i = 0; i < 2; i++) {\n          classifyPoint(i === 0 ? b0 : b1, a0, a1);\n\n          if (classifyResult.loc == IntersectionLocationType.ORIGIN) {\n            const point = i === 0 ? b0 : b1;\n            return {\n              x: point.x,\n              y: point.y,\n              t: classifyResult.t\n            };\n          }\n        }\n\n        const x = +(x1 + t1 * (x2 - x1)).toPrecision(10);\n        const y = +(y1 + t1 * (y2 - y1)).toPrecision(10);\n        return {\n          x: x,\n          y: y,\n          t: t1\n        };\n      }\n    }\n\n    function classifyPoint(p, edgeStart, edgeEnd) {\n      const ax = edgeEnd.x - edgeStart.x;\n      const ay = edgeEnd.y - edgeStart.y;\n      const bx = p.x - edgeStart.x;\n      const by = p.y - edgeStart.y;\n      const sa = ax * by - bx * ay;\n\n      if (p.x === edgeStart.x && p.y === edgeStart.y) {\n        classifyResult.loc = IntersectionLocationType.ORIGIN;\n        classifyResult.t = 0;\n        return;\n      }\n\n      if (p.x === edgeEnd.x && p.y === edgeEnd.y) {\n        classifyResult.loc = IntersectionLocationType.DESTINATION;\n        classifyResult.t = 1;\n        return;\n      }\n\n      if (sa < -Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.LEFT;\n        return;\n      }\n\n      if (sa > Number.EPSILON) {\n        classifyResult.loc = IntersectionLocationType.RIGHT;\n        return;\n      }\n\n      if (ax * bx < 0 || ay * by < 0) {\n        classifyResult.loc = IntersectionLocationType.BEHIND;\n        return;\n      }\n\n      if (Math.sqrt(ax * ax + ay * ay) < Math.sqrt(bx * bx + by * by)) {\n        classifyResult.loc = IntersectionLocationType.BEYOND;\n        return;\n      }\n\n      let t;\n\n      if (ax !== 0) {\n        t = bx / ax;\n      } else {\n        t = by / ay;\n      }\n\n      classifyResult.loc = IntersectionLocationType.BETWEEN;\n      classifyResult.t = t;\n    }\n\n    function getIntersections(path1, path2) {\n      const intersectionsRaw = [];\n      const intersections = [];\n\n      for (let index = 1; index < path1.length; index++) {\n        const path1EdgeStart = path1[index - 1];\n        const path1EdgeEnd = path1[index];\n\n        for (let index2 = 1; index2 < path2.length; index2++) {\n          const path2EdgeStart = path2[index2 - 1];\n          const path2EdgeEnd = path2[index2];\n          const intersection = findEdgeIntersection(path1EdgeStart, path1EdgeEnd, path2EdgeStart, path2EdgeEnd);\n\n          if (intersection !== null && intersectionsRaw.find(i => i.t <= intersection.t + Number.EPSILON && i.t >= intersection.t - Number.EPSILON) === undefined) {\n            intersectionsRaw.push(intersection);\n            intersections.push(new Vector2(intersection.x, intersection.y));\n          }\n        }\n      }\n\n      return intersections;\n    }\n\n    function getScanlineIntersections(scanline, boundingBox, paths) {\n      const center = new Vector2();\n      boundingBox.getCenter(center);\n      const allIntersections = [];\n      paths.forEach(path => {\n        // check if the center of the bounding box is in the bounding box of the paths.\n        // this is a pruning method to limit the search of intersections in paths that can't envelop of the current path.\n        // if a path envelops another path. The center of that oter path, has to be inside the bounding box of the enveloping path.\n        if (path.boundingBox.containsPoint(center)) {\n          const intersections = getIntersections(scanline, path.points);\n          intersections.forEach(p => {\n            allIntersections.push({\n              identifier: path.identifier,\n              isCW: path.isCW,\n              point: p\n            });\n          });\n        }\n      });\n      allIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      return allIntersections;\n    }\n\n    function isHoleTo(simplePath, allPaths, scanlineMinX, scanlineMaxX, _fillRule) {\n      if (_fillRule === null || _fillRule === undefined || _fillRule === '') {\n        _fillRule = 'nonzero';\n      }\n\n      const centerBoundingBox = new Vector2();\n      simplePath.boundingBox.getCenter(centerBoundingBox);\n      const scanline = [new Vector2(scanlineMinX, centerBoundingBox.y), new Vector2(scanlineMaxX, centerBoundingBox.y)];\n      const scanlineIntersections = getScanlineIntersections(scanline, simplePath.boundingBox, allPaths);\n      scanlineIntersections.sort((i1, i2) => {\n        return i1.point.x - i2.point.x;\n      });\n      const baseIntersections = [];\n      const otherIntersections = [];\n      scanlineIntersections.forEach(i => {\n        if (i.identifier === simplePath.identifier) {\n          baseIntersections.push(i);\n        } else {\n          otherIntersections.push(i);\n        }\n      });\n      const firstXOfPath = baseIntersections[0].point.x; // build up the path hierarchy\n\n      const stack = [];\n      let i = 0;\n\n      while (i < otherIntersections.length && otherIntersections[i].point.x < firstXOfPath) {\n        if (stack.length > 0 && stack[stack.length - 1] === otherIntersections[i].identifier) {\n          stack.pop();\n        } else {\n          stack.push(otherIntersections[i].identifier);\n        }\n\n        i++;\n      }\n\n      stack.push(simplePath.identifier);\n\n      if (_fillRule === 'evenodd') {\n        const isHole = stack.length % 2 === 0 ? true : false;\n        const isHoleFor = stack[stack.length - 2];\n        return {\n          identifier: simplePath.identifier,\n          isHole: isHole,\n          for: isHoleFor\n        };\n      } else if (_fillRule === 'nonzero') {\n        // check if path is a hole by counting the amount of paths with alternating rotations it has to cross.\n        let isHole = true;\n        let isHoleFor = null;\n        let lastCWValue = null;\n\n        for (let i = 0; i < stack.length; i++) {\n          const identifier = stack[i];\n\n          if (isHole) {\n            lastCWValue = allPaths[identifier].isCW;\n            isHole = false;\n            isHoleFor = identifier;\n          } else if (lastCWValue !== allPaths[identifier].isCW) {\n            lastCWValue = allPaths[identifier].isCW;\n            isHole = true;\n          }\n        }\n\n        return {\n          identifier: simplePath.identifier,\n          isHole: isHole,\n          for: isHoleFor\n        };\n      } else {\n        console.warn('fill-rule: \"' + _fillRule + '\" is currently not implemented.');\n      }\n    } // check for self intersecting paths\n    // TODO\n    // check intersecting paths\n    // TODO\n    // prepare paths for hole detection\n\n\n    let identifier = 0;\n    let scanlineMinX = BIGNUMBER;\n    let scanlineMaxX = -BIGNUMBER;\n    let simplePaths = shapePath.subPaths.map(p => {\n      const points = p.getPoints();\n      let maxY = -BIGNUMBER;\n      let minY = BIGNUMBER;\n      let maxX = -BIGNUMBER;\n      let minX = BIGNUMBER; //points.forEach(p => p.y *= -1);\n\n      for (let i = 0; i < points.length; i++) {\n        const p = points[i];\n\n        if (p.y > maxY) {\n          maxY = p.y;\n        }\n\n        if (p.y < minY) {\n          minY = p.y;\n        }\n\n        if (p.x > maxX) {\n          maxX = p.x;\n        }\n\n        if (p.x < minX) {\n          minX = p.x;\n        }\n      } //\n\n\n      if (scanlineMaxX <= maxX) {\n        scanlineMaxX = maxX + 1;\n      }\n\n      if (scanlineMinX >= minX) {\n        scanlineMinX = minX - 1;\n      }\n\n      return {\n        curves: p.curves,\n        points: points,\n        isCW: ShapeUtils.isClockWise(points),\n        identifier: identifier++,\n        boundingBox: new Box2(new Vector2(minX, minY), new Vector2(maxX, maxY))\n      };\n    });\n    simplePaths = simplePaths.filter(sp => sp.points.length > 1); // check if path is solid or a hole\n\n    const isAHole = simplePaths.map(p => isHoleTo(p, simplePaths, scanlineMinX, scanlineMaxX, shapePath.userData.style.fillRule));\n    const shapesToReturn = [];\n    simplePaths.forEach(p => {\n      const amIAHole = isAHole[p.identifier];\n\n      if (!amIAHole.isHole) {\n        const shape = new Shape();\n        shape.curves = p.curves;\n        const holes = isAHole.filter(h => h.isHole && h.for === p.identifier);\n        holes.forEach(h => {\n          const hole = simplePaths[h.identifier];\n          const path = new Path();\n          path.curves = hole.curves;\n          shape.holes.push(path);\n        });\n        shapesToReturn.push(shape);\n      }\n    });\n    return shapesToReturn;\n  }\n\n  static getStrokeStyle(width, color, lineJoin, lineCap, miterLimit) {\n    // Param width: Stroke width\n    // Param color: As returned by THREE.Color.getStyle()\n    // Param lineJoin: One of \"round\", \"bevel\", \"miter\" or \"miter-limit\"\n    // Param lineCap: One of \"round\", \"square\" or \"butt\"\n    // Param miterLimit: Maximum join length, in multiples of the \"width\" parameter (join is truncated if it exceeds that distance)\n    // Returns style object\n    width = width !== undefined ? width : 1;\n    color = color !== undefined ? color : '#000';\n    lineJoin = lineJoin !== undefined ? lineJoin : 'miter';\n    lineCap = lineCap !== undefined ? lineCap : 'butt';\n    miterLimit = miterLimit !== undefined ? miterLimit : 4;\n    return {\n      strokeColor: color,\n      strokeWidth: width,\n      strokeLineJoin: lineJoin,\n      strokeLineCap: lineCap,\n      strokeMiterLimit: miterLimit\n    };\n  }\n\n  static pointsToStroke(points, style, arcDivisions, minDistance) {\n    // Generates a stroke with some witdh around the given path.\n    // The path can be open or closed (last point equals to first point)\n    // Param points: Array of Vector2D (the path). Minimum 2 points.\n    // Param style: Object with SVG properties as returned by SVGLoader.getStrokeStyle(), or SVGLoader.parse() in the path.userData.style object\n    // Params arcDivisions: Arc divisions for round joins and endcaps. (Optional)\n    // Param minDistance: Points closer to this distance will be merged. (Optional)\n    // Returns BufferGeometry with stroke triangles (In plane z = 0). UV coordinates are generated ('u' along path. 'v' across it, from left to right)\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n\n    if (SVGLoader.pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs) === 0) {\n      return null;\n    }\n\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n    return geometry;\n  }\n\n  static pointsToStrokeWithBuffers(points, style, arcDivisions, minDistance, vertices, normals, uvs, vertexOffset) {\n    // This function can be called to update existing arrays or buffers.\n    // Accepts same parameters as pointsToStroke, plus the buffers and optional offset.\n    // Param vertexOffset: Offset vertices to start writing in the buffers (3 elements/vertex for vertices and normals, and 2 elements/vertex for uvs)\n    // Returns number of written vertices / normals / uvs pairs\n    // if 'vertices' parameter is undefined no triangles will be generated, but the returned vertices count will still be valid (useful to preallocate the buffers)\n    // 'normals' and 'uvs' buffers are optional\n    const tempV2_1 = new Vector2();\n    const tempV2_2 = new Vector2();\n    const tempV2_3 = new Vector2();\n    const tempV2_4 = new Vector2();\n    const tempV2_5 = new Vector2();\n    const tempV2_6 = new Vector2();\n    const tempV2_7 = new Vector2();\n    const lastPointL = new Vector2();\n    const lastPointR = new Vector2();\n    const point0L = new Vector2();\n    const point0R = new Vector2();\n    const currentPointL = new Vector2();\n    const currentPointR = new Vector2();\n    const nextPointL = new Vector2();\n    const nextPointR = new Vector2();\n    const innerPoint = new Vector2();\n    const outerPoint = new Vector2();\n    arcDivisions = arcDivisions !== undefined ? arcDivisions : 12;\n    minDistance = minDistance !== undefined ? minDistance : 0.001;\n    vertexOffset = vertexOffset !== undefined ? vertexOffset : 0; // First ensure there are no duplicated points\n\n    points = removeDuplicatedPoints(points);\n    const numPoints = points.length;\n    if (numPoints < 2) return 0;\n    const isClosed = points[0].equals(points[numPoints - 1]);\n    let currentPoint;\n    let previousPoint = points[0];\n    let nextPoint;\n    const strokeWidth2 = style.strokeWidth / 2;\n    const deltaU = 1 / (numPoints - 1);\n    let u0 = 0,\n        u1;\n    let innerSideModified;\n    let joinIsOnLeftSide;\n    let isMiter;\n    let initialJoinIsOnLeftSide = false;\n    let numVertices = 0;\n    let currentCoordinate = vertexOffset * 3;\n    let currentCoordinateUV = vertexOffset * 2; // Get initial left and right stroke points\n\n    getNormal(points[0], points[1], tempV2_1).multiplyScalar(strokeWidth2);\n    lastPointL.copy(points[0]).sub(tempV2_1);\n    lastPointR.copy(points[0]).add(tempV2_1);\n    point0L.copy(lastPointL);\n    point0R.copy(lastPointR);\n\n    for (let iPoint = 1; iPoint < numPoints; iPoint++) {\n      currentPoint = points[iPoint]; // Get next point\n\n      if (iPoint === numPoints - 1) {\n        if (isClosed) {\n          // Skip duplicated initial point\n          nextPoint = points[1];\n        } else {\n          nextPoint = undefined;\n        }\n      } else {\n        nextPoint = points[iPoint + 1];\n      } // Normal of previous segment in tempV2_1\n\n\n      const normal1 = tempV2_1;\n      getNormal(previousPoint, currentPoint, normal1);\n      tempV2_3.copy(normal1).multiplyScalar(strokeWidth2);\n      currentPointL.copy(currentPoint).sub(tempV2_3);\n      currentPointR.copy(currentPoint).add(tempV2_3);\n      u1 = u0 + deltaU;\n      innerSideModified = false;\n\n      if (nextPoint !== undefined) {\n        // Normal of next segment in tempV2_2\n        getNormal(currentPoint, nextPoint, tempV2_2);\n        tempV2_3.copy(tempV2_2).multiplyScalar(strokeWidth2);\n        nextPointL.copy(currentPoint).sub(tempV2_3);\n        nextPointR.copy(currentPoint).add(tempV2_3);\n        joinIsOnLeftSide = true;\n        tempV2_3.subVectors(nextPoint, previousPoint);\n\n        if (normal1.dot(tempV2_3) < 0) {\n          joinIsOnLeftSide = false;\n        }\n\n        if (iPoint === 1) initialJoinIsOnLeftSide = joinIsOnLeftSide;\n        tempV2_3.subVectors(nextPoint, currentPoint);\n        tempV2_3.normalize();\n        const dot = Math.abs(normal1.dot(tempV2_3)); // If path is straight, don't create join\n\n        if (dot !== 0) {\n          // Compute inner and outer segment intersections\n          const miterSide = strokeWidth2 / dot;\n          tempV2_3.multiplyScalar(-miterSide);\n          tempV2_4.subVectors(currentPoint, previousPoint);\n          tempV2_5.copy(tempV2_4).setLength(miterSide).add(tempV2_3);\n          innerPoint.copy(tempV2_5).negate();\n          const miterLength2 = tempV2_5.length();\n          const segmentLengthPrev = tempV2_4.length();\n          tempV2_4.divideScalar(segmentLengthPrev);\n          tempV2_6.subVectors(nextPoint, currentPoint);\n          const segmentLengthNext = tempV2_6.length();\n          tempV2_6.divideScalar(segmentLengthNext); // Check that previous and next segments doesn't overlap with the innerPoint of intersection\n\n          if (tempV2_4.dot(innerPoint) < segmentLengthPrev && tempV2_6.dot(innerPoint) < segmentLengthNext) {\n            innerSideModified = true;\n          }\n\n          outerPoint.copy(tempV2_5).add(currentPoint);\n          innerPoint.add(currentPoint);\n          isMiter = false;\n\n          if (innerSideModified) {\n            if (joinIsOnLeftSide) {\n              nextPointR.copy(innerPoint);\n              currentPointR.copy(innerPoint);\n            } else {\n              nextPointL.copy(innerPoint);\n              currentPointL.copy(innerPoint);\n            }\n          } else {\n            // The segment triangles are generated here if there was overlapping\n            makeSegmentTriangles();\n          }\n\n          switch (style.strokeLineJoin) {\n            case 'bevel':\n              makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n              break;\n\n            case 'round':\n              // Segment triangles\n              createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified); // Join triangles\n\n              if (joinIsOnLeftSide) {\n                makeCircularSector(currentPoint, currentPointL, nextPointL, u1, 0);\n              } else {\n                makeCircularSector(currentPoint, nextPointR, currentPointR, u1, 1);\n              }\n\n              break;\n\n            case 'miter':\n            case 'miter-clip':\n            default:\n              const miterFraction = strokeWidth2 * style.strokeMiterLimit / miterLength2;\n\n              if (miterFraction < 1) {\n                // The join miter length exceeds the miter limit\n                if (style.strokeLineJoin !== 'miter-clip') {\n                  makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u1);\n                  break;\n                } else {\n                  // Segment triangles\n                  createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified); // Miter-clip join triangles\n\n                  if (joinIsOnLeftSide) {\n                    tempV2_6.subVectors(outerPoint, currentPointL).multiplyScalar(miterFraction).add(currentPointL);\n                    tempV2_7.subVectors(outerPoint, nextPointL).multiplyScalar(miterFraction).add(nextPointL);\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 0);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    tempV2_6.subVectors(outerPoint, currentPointR).multiplyScalar(miterFraction).add(currentPointR);\n                    tempV2_7.subVectors(outerPoint, nextPointR).multiplyScalar(miterFraction).add(nextPointR);\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_6, u1, 1);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(tempV2_7, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n              } else {\n                // Miter join segment triangles\n                if (innerSideModified) {\n                  // Optimized segment + join triangles\n                  if (joinIsOnLeftSide) {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(innerPoint, u1, 1);\n                  } else {\n                    addVertex(lastPointR, u0, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(lastPointL, u0, 0);\n                    addVertex(innerPoint, u1, 0);\n                    addVertex(outerPoint, u1, 1);\n                  }\n\n                  if (joinIsOnLeftSide) {\n                    nextPointL.copy(outerPoint);\n                  } else {\n                    nextPointR.copy(outerPoint);\n                  }\n                } else {\n                  // Add extra miter join triangles\n                  if (joinIsOnLeftSide) {\n                    addVertex(currentPointL, u1, 0);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 0);\n                    addVertex(nextPointL, u1, 0);\n                  } else {\n                    addVertex(currentPointR, u1, 1);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(currentPoint, u1, 0.5);\n                    addVertex(outerPoint, u1, 1);\n                    addVertex(nextPointR, u1, 1);\n                  }\n                }\n\n                isMiter = true;\n              }\n\n              break;\n          }\n        } else {\n          // The segment triangles are generated here when two consecutive points are collinear\n          makeSegmentTriangles();\n        }\n      } else {\n        // The segment triangles are generated here if it is the ending segment\n        makeSegmentTriangles();\n      }\n\n      if (!isClosed && iPoint === numPoints - 1) {\n        // Start line endcap\n        addCapGeometry(points[0], point0L, point0R, joinIsOnLeftSide, true, u0);\n      } // Increment loop variables\n\n\n      u0 = u1;\n      previousPoint = currentPoint;\n      lastPointL.copy(nextPointL);\n      lastPointR.copy(nextPointR);\n    }\n\n    if (!isClosed) {\n      // Ending line endcap\n      addCapGeometry(currentPoint, currentPointL, currentPointR, joinIsOnLeftSide, false, u1);\n    } else if (innerSideModified && vertices) {\n      // Modify path first segment vertices to adjust to the segments inner and outer intersections\n      let lastOuter = outerPoint;\n      let lastInner = innerPoint;\n\n      if (initialJoinIsOnLeftSide !== joinIsOnLeftSide) {\n        lastOuter = innerPoint;\n        lastInner = outerPoint;\n      }\n\n      if (joinIsOnLeftSide) {\n        if (isMiter || initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 0 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n\n          if (isMiter) {\n            lastOuter.toArray(vertices, 1 * 3);\n          }\n        }\n      } else {\n        if (isMiter || !initialJoinIsOnLeftSide) {\n          lastInner.toArray(vertices, 1 * 3);\n          lastInner.toArray(vertices, 3 * 3);\n\n          if (isMiter) {\n            lastOuter.toArray(vertices, 0 * 3);\n          }\n        }\n      }\n    }\n\n    return numVertices; // -- End of algorithm\n    // -- Functions\n\n    function getNormal(p1, p2, result) {\n      result.subVectors(p2, p1);\n      return result.set(-result.y, result.x).normalize();\n    }\n\n    function addVertex(position, u, v) {\n      if (vertices) {\n        vertices[currentCoordinate] = position.x;\n        vertices[currentCoordinate + 1] = position.y;\n        vertices[currentCoordinate + 2] = 0;\n\n        if (normals) {\n          normals[currentCoordinate] = 0;\n          normals[currentCoordinate + 1] = 0;\n          normals[currentCoordinate + 2] = 1;\n        }\n\n        currentCoordinate += 3;\n\n        if (uvs) {\n          uvs[currentCoordinateUV] = u;\n          uvs[currentCoordinateUV + 1] = v;\n          currentCoordinateUV += 2;\n        }\n      }\n\n      numVertices += 3;\n    }\n\n    function makeCircularSector(center, p1, p2, u, v) {\n      // param p1, p2: Points in the circle arc.\n      // p1 and p2 are in clockwise direction.\n      tempV2_1.copy(p1).sub(center).normalize();\n      tempV2_2.copy(p2).sub(center).normalize();\n      let angle = Math.PI;\n      const dot = tempV2_1.dot(tempV2_2);\n      if (Math.abs(dot) < 1) angle = Math.abs(Math.acos(dot));\n      angle /= arcDivisions;\n      tempV2_3.copy(p1);\n\n      for (let i = 0, il = arcDivisions - 1; i < il; i++) {\n        tempV2_4.copy(tempV2_3).rotateAround(center, angle);\n        addVertex(tempV2_3, u, v);\n        addVertex(tempV2_4, u, v);\n        addVertex(center, u, 0.5);\n        tempV2_3.copy(tempV2_4);\n      }\n\n      addVertex(tempV2_4, u, v);\n      addVertex(p2, u, v);\n      addVertex(center, u, 0.5);\n    }\n\n    function makeSegmentTriangles() {\n      addVertex(lastPointR, u0, 1);\n      addVertex(lastPointL, u0, 0);\n      addVertex(currentPointL, u1, 0);\n      addVertex(lastPointR, u0, 1);\n      addVertex(currentPointL, u1, 1);\n      addVertex(currentPointR, u1, 0);\n    }\n\n    function makeSegmentWithBevelJoin(joinIsOnLeftSide, innerSideModified, u) {\n      if (innerSideModified) {\n        // Optimized segment + bevel triangles\n        if (joinIsOnLeftSide) {\n          // Path segments triangles\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1); // Bevel join triangle\n\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        } else {\n          // Path segments triangles\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1); // Bevel join triangle\n\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(innerPoint, u, 0.5);\n        }\n      } else {\n        // Bevel join triangle. The segment triangles are done in the main loop\n        if (joinIsOnLeftSide) {\n          addVertex(currentPointL, u, 0);\n          addVertex(nextPointL, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        } else {\n          addVertex(currentPointR, u, 1);\n          addVertex(nextPointR, u, 0);\n          addVertex(currentPoint, u, 0.5);\n        }\n      }\n    }\n\n    function createSegmentTrianglesWithMiddleSection(joinIsOnLeftSide, innerSideModified) {\n      if (innerSideModified) {\n        if (joinIsOnLeftSide) {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointL, u1, 0);\n          addVertex(lastPointR, u0, 1);\n          addVertex(currentPointL, u1, 0);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPointL, u0, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 1);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(nextPointL, u0, 0);\n          addVertex(innerPoint, u1, 1);\n        } else {\n          addVertex(lastPointR, u0, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(lastPointL, u0, 0);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPointR, u1, 1);\n          addVertex(currentPointR, u0, 1);\n          addVertex(innerPoint, u1, 0);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(currentPoint, u1, 0.5);\n          addVertex(innerPoint, u1, 0);\n          addVertex(nextPointR, u0, 1);\n        }\n      }\n    }\n\n    function addCapGeometry(center, p1, p2, joinIsOnLeftSide, start, u) {\n      // param center: End point of the path\n      // param p1, p2: Left and right cap points\n      switch (style.strokeLineCap) {\n        case 'round':\n          if (start) {\n            makeCircularSector(center, p2, p1, u, 0.5);\n          } else {\n            makeCircularSector(center, p1, p2, u, 0.5);\n          }\n\n          break;\n\n        case 'square':\n          if (start) {\n            tempV2_1.subVectors(p1, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center); // Modify already existing vertices\n\n            if (joinIsOnLeftSide) {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n              tempV2_4.toArray(vertices, 3 * 3);\n            } else {\n              tempV2_3.toArray(vertices, 1 * 3);\n              tempV2_3.toArray(vertices, 3 * 3);\n              tempV2_4.toArray(vertices, 0 * 3);\n            }\n          } else {\n            tempV2_1.subVectors(p2, center);\n            tempV2_2.set(tempV2_1.y, -tempV2_1.x);\n            tempV2_3.addVectors(tempV2_1, tempV2_2).add(center);\n            tempV2_4.subVectors(tempV2_2, tempV2_1).add(center);\n            const vl = vertices.length; // Modify already existing vertices\n\n            if (joinIsOnLeftSide) {\n              tempV2_3.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            } else {\n              tempV2_3.toArray(vertices, vl - 2 * 3);\n              tempV2_4.toArray(vertices, vl - 1 * 3);\n              tempV2_4.toArray(vertices, vl - 4 * 3);\n            }\n          }\n\n          break;\n      }\n    }\n\n    function removeDuplicatedPoints(points) {\n      // Creates a new array if necessary with duplicated points removed.\n      // This does not remove duplicated initial and ending points of a closed path.\n      let dupPoints = false;\n\n      for (let i = 1, n = points.length - 1; i < n; i++) {\n        if (points[i].distanceTo(points[i + 1]) < minDistance) {\n          dupPoints = true;\n          break;\n        }\n      }\n\n      if (!dupPoints) return points;\n      const newPoints = [];\n      newPoints.push(points[0]);\n\n      for (let i = 1, n = points.length - 1; i < n; i++) {\n        if (points[i].distanceTo(points[i + 1]) >= minDistance) {\n          newPoints.push(points[i]);\n        }\n      }\n\n      newPoints.push(points[points.length - 1]);\n      return newPoints;\n    }\n  }\n\n}\n\nexport { SVGLoader };\n"]},"metadata":{},"sourceType":"module"}