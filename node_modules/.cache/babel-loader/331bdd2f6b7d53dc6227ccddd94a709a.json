{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport { applyProps } from '@react-three/fiber';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport mergeRefs from 'react-merge-refs';\nconst Lightformer = /*#__PURE__*/React.forwardRef(({\n  args,\n  map,\n  toneMapped = false,\n  color = 'white',\n  form: Form = 'rect',\n  intensity = 1,\n  scale = 1,\n  target,\n  children,\n  ...props\n}, forwardRef) => {\n  // Apply emissive power\n  const ref = React.useRef(null);\n  React.useLayoutEffect(() => {\n    if (!children && !props.material) {\n      applyProps(ref.current.material, {\n        color\n      });\n      ref.current.material.color.multiplyScalar(intensity);\n    }\n  }, [color, intensity, children, props.material]); // Target light\n\n  React.useLayoutEffect(() => {\n    if (target) ref.current.lookAt(Array.isArray(target) ? new THREE.Vector3(...target) : target);\n  }, [target]); // Fix 2-dimensional scale\n\n  scale = Array.isArray(scale) && scale.length === 2 ? [scale[0], scale[1], 1] : scale;\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: mergeRefs([ref, forwardRef]),\n    scale: scale\n  }, props), Form === 'circle' ? /*#__PURE__*/React.createElement(\"ringGeometry\", {\n    args: [0, 1, 64]\n  }) : Form === 'ring' ? /*#__PURE__*/React.createElement(\"ringGeometry\", {\n    args: [0.5, 1, 64]\n  }) : Form === 'rect' ? /*#__PURE__*/React.createElement(\"planeGeometry\", null) : /*#__PURE__*/React.createElement(Form, {\n    args: args\n  }), children ? children : !props.material ? /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    toneMapped: toneMapped,\n    map: map,\n    side: THREE.DoubleSide\n  }) : null);\n});\nexport { Lightformer };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/@react-three/drei/core/Lightformer.js"],"names":["_extends","applyProps","React","THREE","mergeRefs","Lightformer","forwardRef","args","map","toneMapped","color","form","Form","intensity","scale","target","children","props","ref","useRef","useLayoutEffect","material","current","multiplyScalar","lookAt","Array","isArray","Vector3","length","createElement","side","DoubleSide"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport { applyProps } from '@react-three/fiber';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport mergeRefs from 'react-merge-refs';\n\nconst Lightformer = /*#__PURE__*/React.forwardRef(({\n  args,\n  map,\n  toneMapped = false,\n  color = 'white',\n  form: Form = 'rect',\n  intensity = 1,\n  scale = 1,\n  target,\n  children,\n  ...props\n}, forwardRef) => {\n  // Apply emissive power\n  const ref = React.useRef(null);\n  React.useLayoutEffect(() => {\n    if (!children && !props.material) {\n      applyProps(ref.current.material, {\n        color\n      });\n      ref.current.material.color.multiplyScalar(intensity);\n    }\n  }, [color, intensity, children, props.material]); // Target light\n\n  React.useLayoutEffect(() => {\n    if (target) ref.current.lookAt(Array.isArray(target) ? new THREE.Vector3(...target) : target);\n  }, [target]); // Fix 2-dimensional scale\n\n  scale = Array.isArray(scale) && scale.length === 2 ? [scale[0], scale[1], 1] : scale;\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: mergeRefs([ref, forwardRef]),\n    scale: scale\n  }, props), Form === 'circle' ? /*#__PURE__*/React.createElement(\"ringGeometry\", {\n    args: [0, 1, 64]\n  }) : Form === 'ring' ? /*#__PURE__*/React.createElement(\"ringGeometry\", {\n    args: [0.5, 1, 64]\n  }) : Form === 'rect' ? /*#__PURE__*/React.createElement(\"planeGeometry\", null) : /*#__PURE__*/React.createElement(Form, {\n    args: args\n  }), children ? children : !props.material ? /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    toneMapped: toneMapped,\n    map: map,\n    side: THREE.DoubleSide\n  }) : null);\n});\n\nexport { Lightformer };\n"]},"metadata":{},"sourceType":"module"}