{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale = 10,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 512,\n  smooth = true,\n  color = '#000000',\n  depthWrite = false,\n  renderOrder,\n  ...props\n}, ref) => {\n  const scene = useThree(state => state.scene);\n  const gl = useThree(state => state.gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color)\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', // Colorize the shadow, multiply by the falloff so that the center can remain darker\n      'vec4( ucolor * fragCoordZ * 2.0, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale, color]);\n\n  const blurShadows = blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  };\n\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: renderOrder,\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    \"map-encoding\": gl.outputEncoding,\n    transparent: true,\n    opacity: opacity,\n    depthWrite: depthWrite\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\nexport { ContactShadows };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/@react-three/drei/core/ContactShadows.js"],"names":["_extends","React","THREE","useThree","useFrame","HorizontalBlurShader","VerticalBlurShader","ContactShadows","forwardRef","scale","frames","Infinity","opacity","width","height","blur","far","resolution","smooth","color","depthWrite","renderOrder","props","ref","scene","state","gl","shadowCamera","useRef","Array","isArray","renderTarget","planeGeometry","depthMaterial","blurPlane","horizontalBlurMaterial","verticalBlurMaterial","renderTargetBlur","useMemo","WebGLRenderTarget","texture","generateMipmaps","PlaneGeometry","rotateX","Math","PI","Mesh","MeshDepthMaterial","depthTest","onBeforeCompile","shader","uniforms","ucolor","value","Color","fragmentShader","replace","ShaderMaterial","blurShadows","visible","material","tDiffuse","h","setRenderTarget","render","current","v","count","initialBackground","background","initialOverrideMaterial","overrideMaterial","createElement","geometry","rotation","map","outputEncoding","transparent","args"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale = 10,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 512,\n  smooth = true,\n  color = '#000000',\n  depthWrite = false,\n  renderOrder,\n  ...props\n}, ref) => {\n  const scene = useThree(state => state.scene);\n  const gl = useThree(state => state.gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color)\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', // Colorize the shadow, multiply by the falloff so that the center can remain darker\n      'vec4( ucolor * fragCoordZ * 2.0, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale, color]);\n\n  const blurShadows = blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  };\n\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: renderOrder,\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    \"map-encoding\": gl.outputEncoding,\n    transparent: true,\n    opacity: opacity,\n    depthWrite: depthWrite\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n"]},"metadata":{},"sourceType":"module"}