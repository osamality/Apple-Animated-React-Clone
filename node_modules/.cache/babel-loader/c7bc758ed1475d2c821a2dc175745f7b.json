{"ast":null,"code":"import { UniformsUtils, ShaderMaterial, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass SavePass extends Pass {\n  constructor(renderTarget) {\n    super();\n    if (CopyShader === undefined) console.error('THREE.SavePass relies on CopyShader');\n    const shader = CopyShader;\n    this.textureID = 'tDiffuse';\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.renderTarget = renderTarget;\n\n    if (this.renderTarget === undefined) {\n      this.renderTarget = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      this.renderTarget.texture.name = 'SavePass.rt';\n    }\n\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    renderer.setRenderTarget(this.renderTarget);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n\n}\n\nexport { SavePass };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/postprocessing/SavePass.js"],"names":["UniformsUtils","ShaderMaterial","WebGLRenderTarget","Pass","FullScreenQuad","CopyShader","SavePass","constructor","renderTarget","undefined","console","error","shader","textureID","uniforms","clone","material","vertexShader","fragmentShader","window","innerWidth","innerHeight","texture","name","needsSwap","fsQuad","render","renderer","writeBuffer","readBuffer","value","setRenderTarget","clear"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,cAAxB,EAAwCC,iBAAxC,QAAiE,OAAjE;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,WAArC;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,MAAMC,QAAN,SAAuBH,IAAvB,CAA4B;AAC1BI,EAAAA,WAAW,CAACC,YAAD,EAAe;AACxB;AACA,QAAIH,UAAU,KAAKI,SAAnB,EAA8BC,OAAO,CAACC,KAAR,CAAc,qCAAd;AAC9B,UAAMC,MAAM,GAAGP,UAAf;AACA,SAAKQ,SAAL,GAAiB,UAAjB;AACA,SAAKC,QAAL,GAAgBd,aAAa,CAACe,KAAd,CAAoBH,MAAM,CAACE,QAA3B,CAAhB;AACA,SAAKE,QAAL,GAAgB,IAAIf,cAAJ,CAAmB;AACjCa,MAAAA,QAAQ,EAAE,KAAKA,QADkB;AAEjCG,MAAAA,YAAY,EAAEL,MAAM,CAACK,YAFY;AAGjCC,MAAAA,cAAc,EAAEN,MAAM,CAACM;AAHU,KAAnB,CAAhB;AAKA,SAAKV,YAAL,GAAoBA,YAApB;;AAEA,QAAI,KAAKA,YAAL,KAAsBC,SAA1B,EAAqC;AACnC,WAAKD,YAAL,GAAoB,IAAIN,iBAAJ,CAAsBiB,MAAM,CAACC,UAA7B,EAAyCD,MAAM,CAACE,WAAhD,CAApB;AACA,WAAKb,YAAL,CAAkBc,OAAlB,CAA0BC,IAA1B,GAAiC,aAAjC;AACD;;AAED,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,MAAL,GAAc,IAAIrB,cAAJ,CAAmB,KAAKY,QAAxB,CAAd;AACD;;AAEDU,EAAAA,MAAM,CAACC,QAAD,EAAWC,WAAX,EAAwBC;AAC9B;AADM,IAEJ;AACA,QAAI,KAAKf,QAAL,CAAc,KAAKD,SAAnB,CAAJ,EAAmC;AACjC,WAAKC,QAAL,CAAc,KAAKD,SAAnB,EAA8BiB,KAA9B,GAAsCD,UAAU,CAACP,OAAjD;AACD;;AAEDK,IAAAA,QAAQ,CAACI,eAAT,CAAyB,KAAKvB,YAA9B;AACA,QAAI,KAAKwB,KAAT,EAAgBL,QAAQ,CAACK,KAAT;AAChB,SAAKP,MAAL,CAAYC,MAAZ,CAAmBC,QAAnB;AACD;;AAjCyB;;AAqC5B,SAASrB,QAAT","sourcesContent":["import { UniformsUtils, ShaderMaterial, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass SavePass extends Pass {\n  constructor(renderTarget) {\n    super();\n    if (CopyShader === undefined) console.error('THREE.SavePass relies on CopyShader');\n    const shader = CopyShader;\n    this.textureID = 'tDiffuse';\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.renderTarget = renderTarget;\n\n    if (this.renderTarget === undefined) {\n      this.renderTarget = new WebGLRenderTarget(window.innerWidth, window.innerHeight);\n      this.renderTarget.texture.name = 'SavePass.rt';\n    }\n\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    renderer.setRenderTarget(this.renderTarget);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n\n}\n\nexport { SavePass };\n"]},"metadata":{},"sourceType":"module"}