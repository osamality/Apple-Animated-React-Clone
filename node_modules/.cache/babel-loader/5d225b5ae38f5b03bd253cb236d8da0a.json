{"ast":null,"code":"import CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\n\nclass FunctionNode extends CodeNode {\n  constructor(code = '') {\n    super(code);\n    this.keywords = {};\n  }\n\n  getNodeType(builder) {\n    return this.getNodeFunction(builder).type;\n  }\n\n  getInputs(builder) {\n    return this.getNodeFunction(builder).inputs;\n  }\n\n  getNodeFunction(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    let nodeFunction = nodeData.nodeFunction;\n\n    if (nodeFunction === undefined) {\n      nodeFunction = builder.parser.parseFunction(this.code);\n      nodeData.nodeFunction = nodeFunction;\n    }\n\n    return nodeFunction;\n  }\n\n  call(parameters = {}) {\n    return new FunctionCallNode(this, parameters);\n  }\n\n  generate(builder, output) {\n    super.generate(builder);\n    const nodeFunction = this.getNodeFunction(builder);\n    const name = nodeFunction.name;\n    const type = nodeFunction.type;\n    const nodeCode = builder.getCodeFromNode(this, type);\n\n    if (name !== '') {\n      // use a custom property name\n      nodeCode.name = name;\n    }\n\n    const propertyName = builder.getPropertyName(nodeCode);\n    let code = this.getNodeFunction(builder).getCode(propertyName);\n    const keywords = this.keywords;\n    const keywordsProperties = Object.keys(keywords);\n\n    if (keywordsProperties.length > 0) {\n      for (const property of keywordsProperties) {\n        const propertyRegExp = new RegExp(`\\\\b${property}\\\\b`, 'g');\n        const nodeProperty = keywords[property].build(builder, 'property');\n        code = code.replace(propertyRegExp, nodeProperty);\n      }\n    }\n\n    nodeCode.code = code;\n\n    if (output === 'property') {\n      return propertyName;\n    } else {\n      return builder.format(`${propertyName}()`, type, output);\n    }\n  }\n\n}\n\nexport default FunctionNode;","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/nodes/core/FunctionNode.js"],"names":["CodeNode","FunctionCallNode","FunctionNode","constructor","code","keywords","getNodeType","builder","getNodeFunction","type","getInputs","inputs","nodeData","getDataFromNode","nodeFunction","undefined","parser","parseFunction","call","parameters","generate","output","name","nodeCode","getCodeFromNode","propertyName","getPropertyName","getCode","keywordsProperties","Object","keys","length","property","propertyRegExp","RegExp","nodeProperty","build","replace","format"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,eAArB;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;;AAEA,MAAMC,YAAN,SAA2BF,QAA3B,CAAoC;AAClCG,EAAAA,WAAW,CAACC,IAAI,GAAG,EAAR,EAAY;AACrB,UAAMA,IAAN;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACD;;AAEDC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,WAAO,KAAKC,eAAL,CAAqBD,OAArB,EAA8BE,IAArC;AACD;;AAEDC,EAAAA,SAAS,CAACH,OAAD,EAAU;AACjB,WAAO,KAAKC,eAAL,CAAqBD,OAArB,EAA8BI,MAArC;AACD;;AAEDH,EAAAA,eAAe,CAACD,OAAD,EAAU;AACvB,UAAMK,QAAQ,GAAGL,OAAO,CAACM,eAAR,CAAwB,IAAxB,CAAjB;AACA,QAAIC,YAAY,GAAGF,QAAQ,CAACE,YAA5B;;AAEA,QAAIA,YAAY,KAAKC,SAArB,EAAgC;AAC9BD,MAAAA,YAAY,GAAGP,OAAO,CAACS,MAAR,CAAeC,aAAf,CAA6B,KAAKb,IAAlC,CAAf;AACAQ,MAAAA,QAAQ,CAACE,YAAT,GAAwBA,YAAxB;AACD;;AAED,WAAOA,YAAP;AACD;;AAEDI,EAAAA,IAAI,CAACC,UAAU,GAAG,EAAd,EAAkB;AACpB,WAAO,IAAIlB,gBAAJ,CAAqB,IAArB,EAA2BkB,UAA3B,CAAP;AACD;;AAEDC,EAAAA,QAAQ,CAACb,OAAD,EAAUc,MAAV,EAAkB;AACxB,UAAMD,QAAN,CAAeb,OAAf;AACA,UAAMO,YAAY,GAAG,KAAKN,eAAL,CAAqBD,OAArB,CAArB;AACA,UAAMe,IAAI,GAAGR,YAAY,CAACQ,IAA1B;AACA,UAAMb,IAAI,GAAGK,YAAY,CAACL,IAA1B;AACA,UAAMc,QAAQ,GAAGhB,OAAO,CAACiB,eAAR,CAAwB,IAAxB,EAA8Bf,IAA9B,CAAjB;;AAEA,QAAIa,IAAI,KAAK,EAAb,EAAiB;AACf;AACAC,MAAAA,QAAQ,CAACD,IAAT,GAAgBA,IAAhB;AACD;;AAED,UAAMG,YAAY,GAAGlB,OAAO,CAACmB,eAAR,CAAwBH,QAAxB,CAArB;AACA,QAAInB,IAAI,GAAG,KAAKI,eAAL,CAAqBD,OAArB,EAA8BoB,OAA9B,CAAsCF,YAAtC,CAAX;AACA,UAAMpB,QAAQ,GAAG,KAAKA,QAAtB;AACA,UAAMuB,kBAAkB,GAAGC,MAAM,CAACC,IAAP,CAAYzB,QAAZ,CAA3B;;AAEA,QAAIuB,kBAAkB,CAACG,MAAnB,GAA4B,CAAhC,EAAmC;AACjC,WAAK,MAAMC,QAAX,IAAuBJ,kBAAvB,EAA2C;AACzC,cAAMK,cAAc,GAAG,IAAIC,MAAJ,CAAY,MAAKF,QAAS,KAA1B,EAAgC,GAAhC,CAAvB;AACA,cAAMG,YAAY,GAAG9B,QAAQ,CAAC2B,QAAD,CAAR,CAAmBI,KAAnB,CAAyB7B,OAAzB,EAAkC,UAAlC,CAArB;AACAH,QAAAA,IAAI,GAAGA,IAAI,CAACiC,OAAL,CAAaJ,cAAb,EAA6BE,YAA7B,CAAP;AACD;AACF;;AAEDZ,IAAAA,QAAQ,CAACnB,IAAT,GAAgBA,IAAhB;;AAEA,QAAIiB,MAAM,KAAK,UAAf,EAA2B;AACzB,aAAOI,YAAP;AACD,KAFD,MAEO;AACL,aAAOlB,OAAO,CAAC+B,MAAR,CAAgB,GAAEb,YAAa,IAA/B,EAAoChB,IAApC,EAA0CY,MAA1C,CAAP;AACD;AACF;;AA9DiC;;AAkEpC,eAAenB,YAAf","sourcesContent":["import CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\n\nclass FunctionNode extends CodeNode {\n  constructor(code = '') {\n    super(code);\n    this.keywords = {};\n  }\n\n  getNodeType(builder) {\n    return this.getNodeFunction(builder).type;\n  }\n\n  getInputs(builder) {\n    return this.getNodeFunction(builder).inputs;\n  }\n\n  getNodeFunction(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    let nodeFunction = nodeData.nodeFunction;\n\n    if (nodeFunction === undefined) {\n      nodeFunction = builder.parser.parseFunction(this.code);\n      nodeData.nodeFunction = nodeFunction;\n    }\n\n    return nodeFunction;\n  }\n\n  call(parameters = {}) {\n    return new FunctionCallNode(this, parameters);\n  }\n\n  generate(builder, output) {\n    super.generate(builder);\n    const nodeFunction = this.getNodeFunction(builder);\n    const name = nodeFunction.name;\n    const type = nodeFunction.type;\n    const nodeCode = builder.getCodeFromNode(this, type);\n\n    if (name !== '') {\n      // use a custom property name\n      nodeCode.name = name;\n    }\n\n    const propertyName = builder.getPropertyName(nodeCode);\n    let code = this.getNodeFunction(builder).getCode(propertyName);\n    const keywords = this.keywords;\n    const keywordsProperties = Object.keys(keywords);\n\n    if (keywordsProperties.length > 0) {\n      for (const property of keywordsProperties) {\n        const propertyRegExp = new RegExp(`\\\\b${property}\\\\b`, 'g');\n        const nodeProperty = keywords[property].build(builder, 'property');\n        code = code.replace(propertyRegExp, nodeProperty);\n      }\n    }\n\n    nodeCode.code = code;\n\n    if (output === 'property') {\n      return propertyName;\n    } else {\n      return builder.format(`${propertyName}()`, type, output);\n    }\n  }\n\n}\n\nexport default FunctionNode;\n"]},"metadata":{},"sourceType":"module"}