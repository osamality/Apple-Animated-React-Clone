{"ast":null,"code":"import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Line } from '../../core/Line.js';\nimport { Html } from '../Html.js';\nimport clamp from 'lodash.clamp';\nimport { context } from './context.js';\nconst clickDir = new THREE.Vector3();\nconst intersectionDir = new THREE.Vector3();\n\nconst toDegrees = radians => radians * 180 / Math.PI;\n\nconst toRadians = degrees => degrees * Math.PI / 180;\n\nconst calculateAngle = (clickPoint, intersectionPoint, origin, e1, e2) => {\n  clickDir.copy(clickPoint).sub(origin);\n  intersectionDir.copy(intersectionPoint).sub(origin);\n  const dote1e1 = e1.dot(e1);\n  const dote2e2 = e2.dot(e2);\n  const uClick = clickDir.dot(e1) / dote1e1;\n  const vClick = clickDir.dot(e2) / dote2e2;\n  const uIntersection = intersectionDir.dot(e1) / dote1e1;\n  const vIntersection = intersectionDir.dot(e2) / dote2e2;\n  const angleClick = Math.atan2(vClick, uClick);\n  const angleIntersection = Math.atan2(vIntersection, uIntersection);\n  return angleIntersection - angleClick;\n};\n\nconst fmod = (num, denom) => {\n  let k = Math.floor(num / denom);\n  k = k < 0 ? k + 1 : k;\n  return num - k * denom;\n};\n\nconst minimizeAngle = angle => {\n  let result = fmod(angle, 2 * Math.PI);\n\n  if (Math.abs(result) < 1e-6) {\n    return 0.0;\n  }\n\n  if (result < 0.0) {\n    result += 2 * Math.PI;\n  }\n\n  return result;\n};\n\nconst rotMatrix = new THREE.Matrix4();\nconst posNew = new THREE.Vector3();\nconst ray = new THREE.Ray();\nconst intersection = new THREE.Vector3();\n\nconst AxisRotator = ({\n  dir1,\n  dir2,\n  axis\n}) => {\n  const {\n    rotationLimits,\n    annotations,\n    annotationsClass,\n    depthTest,\n    scale,\n    lineWidth,\n    fixed,\n    axisColors,\n    hoveredColor,\n    opacity,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    userData\n  } = React.useContext(context); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const camControls = useThree(state => state.controls);\n  const divRef = React.useRef(null);\n  const objRef = React.useRef(null);\n  const angle0 = React.useRef(0);\n  const angle = React.useRef(0);\n  const clickInfo = React.useRef(null);\n  const [isHovered, setIsHovered] = React.useState(false);\n  const onPointerDown = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.innerText = `${toDegrees(angle.current).toFixed(0)}ยบ`;\n      divRef.current.style.display = 'block';\n    }\n\n    e.stopPropagation();\n    const clickPoint = e.point.clone();\n    const origin = new THREE.Vector3().setFromMatrixPosition(objRef.current.matrixWorld);\n    const e1 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 0).normalize();\n    const e2 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 1).normalize();\n    const normal = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 2).normalize();\n    const plane = new THREE.Plane().setFromNormalAndCoplanarPoint(normal, origin);\n    clickInfo.current = {\n      clickPoint,\n      origin,\n      e1,\n      e2,\n      normal,\n      plane\n    };\n    onDragStart({\n      component: 'Rotator',\n      axis,\n      origin,\n      directions: [e1, e2, normal]\n    });\n    camControls && (camControls.enabled = false); // @ts-ignore\n\n    e.target.setPointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragStart, axis]);\n  const onPointerMove = React.useCallback(e => {\n    e.stopPropagation();\n    if (!isHovered) setIsHovered(true);\n\n    if (clickInfo.current) {\n      const {\n        clickPoint,\n        origin,\n        e1,\n        e2,\n        normal,\n        plane\n      } = clickInfo.current;\n      const [min, max] = (rotationLimits == null ? void 0 : rotationLimits[axis]) || [undefined, undefined];\n      ray.copy(e.ray);\n      ray.intersectPlane(plane, intersection);\n      ray.direction.negate();\n      ray.intersectPlane(plane, intersection);\n      let deltaAngle = calculateAngle(clickPoint, intersection, origin, e1, e2);\n      let degrees = toDegrees(deltaAngle); // @ts-ignore\n\n      if (e.shiftKey) {\n        degrees = Math.round(degrees / 10) * 10;\n        deltaAngle = toRadians(degrees);\n      }\n\n      if (min !== undefined && max !== undefined && max - min < 2 * Math.PI) {\n        deltaAngle = minimizeAngle(deltaAngle);\n        deltaAngle = deltaAngle > Math.PI ? deltaAngle - 2 * Math.PI : deltaAngle;\n        deltaAngle = clamp(deltaAngle, min - angle0.current, max - angle0.current);\n        angle.current = angle0.current + deltaAngle;\n      } else {\n        angle.current = minimizeAngle(angle0.current + deltaAngle);\n        angle.current = angle.current > Math.PI ? angle.current - 2 * Math.PI : angle.current;\n      }\n\n      if (annotations) {\n        degrees = toDegrees(angle.current);\n        divRef.current.innerText = `${degrees.toFixed(0)}ยบ`;\n      }\n\n      rotMatrix.makeRotationAxis(normal, deltaAngle);\n      posNew.copy(origin).applyMatrix4(rotMatrix).sub(origin).negate();\n      rotMatrix.setPosition(posNew);\n      onDrag(rotMatrix);\n    }\n  }, [annotations, onDrag, isHovered, rotationLimits, axis]);\n  const onPointerUp = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.style.display = 'none';\n    }\n\n    e.stopPropagation();\n    angle0.current = angle.current;\n    clickInfo.current = null;\n    onDragEnd();\n    camControls && (camControls.enabled = true); // @ts-ignore\n\n    e.target.releasePointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragEnd]);\n  const onPointerOut = React.useCallback(e => {\n    e.stopPropagation();\n    setIsHovered(false);\n  }, []);\n  const matrixL = React.useMemo(() => {\n    const dir1N = dir1.clone().normalize();\n    const dir2N = dir2.clone().normalize();\n    return new THREE.Matrix4().makeBasis(dir1N, dir2N, dir1N.clone().cross(dir2N));\n  }, [dir1, dir2]);\n  const r = fixed ? 0.65 : scale * 0.65;\n  const arc = React.useMemo(() => {\n    const segments = 32;\n    const points = [];\n\n    for (let j = 0; j <= segments; j++) {\n      const angle = j * (Math.PI / 2) / segments;\n      points.push(new THREE.Vector3(Math.cos(angle) * r, Math.sin(angle) * r, 0));\n    }\n\n    return points;\n  }, [r]);\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: objRef,\n    onPointerDown: onPointerDown,\n    onPointerMove: onPointerMove,\n    onPointerUp: onPointerUp,\n    onPointerOut: onPointerOut,\n    matrix: matrixL,\n    matrixAutoUpdate: false\n  }, annotations && /*#__PURE__*/React.createElement(Html, {\n    position: [r, r, 0]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'none',\n      background: '#151520',\n      color: 'white',\n      padding: '6px 8px',\n      borderRadius: 7,\n      whiteSpace: 'nowrap'\n    },\n    className: annotationsClass,\n    ref: divRef\n  })), /*#__PURE__*/React.createElement(Line, {\n    points: arc,\n    lineWidth: lineWidth * 4,\n    visible: false,\n    userData: userData\n  }), /*#__PURE__*/React.createElement(Line, {\n    transparent: true,\n    raycast: () => null,\n    depthTest: depthTest,\n    points: arc,\n    lineWidth: lineWidth,\n    color: isHovered ? hoveredColor : axisColors[axis],\n    opacity: opacity,\n    polygonOffset: true,\n    polygonOffsetFactor: -10\n  }));\n};\n\nexport { AxisRotator };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/@react-three/drei/web/pivotControls/AxisRotator.js"],"names":["React","THREE","useThree","Line","Html","clamp","context","clickDir","Vector3","intersectionDir","toDegrees","radians","Math","PI","toRadians","degrees","calculateAngle","clickPoint","intersectionPoint","origin","e1","e2","copy","sub","dote1e1","dot","dote2e2","uClick","vClick","uIntersection","vIntersection","angleClick","atan2","angleIntersection","fmod","num","denom","k","floor","minimizeAngle","angle","result","abs","rotMatrix","Matrix4","posNew","ray","Ray","intersection","AxisRotator","dir1","dir2","axis","rotationLimits","annotations","annotationsClass","depthTest","scale","lineWidth","fixed","axisColors","hoveredColor","opacity","onDragStart","onDrag","onDragEnd","userData","useContext","camControls","state","controls","divRef","useRef","objRef","angle0","clickInfo","isHovered","setIsHovered","useState","onPointerDown","useCallback","e","current","innerText","toFixed","style","display","stopPropagation","point","clone","setFromMatrixPosition","matrixWorld","setFromMatrixColumn","normalize","normal","plane","Plane","setFromNormalAndCoplanarPoint","component","directions","enabled","target","setPointerCapture","pointerId","onPointerMove","min","max","undefined","intersectPlane","direction","negate","deltaAngle","shiftKey","round","makeRotationAxis","applyMatrix4","setPosition","onPointerUp","releasePointerCapture","onPointerOut","matrixL","useMemo","dir1N","dir2N","makeBasis","cross","r","arc","segments","points","j","push","cos","sin","createElement","ref","matrix","matrixAutoUpdate","position","background","color","padding","borderRadius","whiteSpace","className","visible","transparent","raycast","polygonOffset","polygonOffsetFactor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Line } from '../../core/Line.js';\nimport { Html } from '../Html.js';\nimport clamp from 'lodash.clamp';\nimport { context } from './context.js';\n\nconst clickDir = new THREE.Vector3();\nconst intersectionDir = new THREE.Vector3();\n\nconst toDegrees = radians => radians * 180 / Math.PI;\n\nconst toRadians = degrees => degrees * Math.PI / 180;\n\nconst calculateAngle = (clickPoint, intersectionPoint, origin, e1, e2) => {\n  clickDir.copy(clickPoint).sub(origin);\n  intersectionDir.copy(intersectionPoint).sub(origin);\n  const dote1e1 = e1.dot(e1);\n  const dote2e2 = e2.dot(e2);\n  const uClick = clickDir.dot(e1) / dote1e1;\n  const vClick = clickDir.dot(e2) / dote2e2;\n  const uIntersection = intersectionDir.dot(e1) / dote1e1;\n  const vIntersection = intersectionDir.dot(e2) / dote2e2;\n  const angleClick = Math.atan2(vClick, uClick);\n  const angleIntersection = Math.atan2(vIntersection, uIntersection);\n  return angleIntersection - angleClick;\n};\n\nconst fmod = (num, denom) => {\n  let k = Math.floor(num / denom);\n  k = k < 0 ? k + 1 : k;\n  return num - k * denom;\n};\n\nconst minimizeAngle = angle => {\n  let result = fmod(angle, 2 * Math.PI);\n\n  if (Math.abs(result) < 1e-6) {\n    return 0.0;\n  }\n\n  if (result < 0.0) {\n    result += 2 * Math.PI;\n  }\n\n  return result;\n};\n\nconst rotMatrix = new THREE.Matrix4();\nconst posNew = new THREE.Vector3();\nconst ray = new THREE.Ray();\nconst intersection = new THREE.Vector3();\nconst AxisRotator = ({\n  dir1,\n  dir2,\n  axis\n}) => {\n  const {\n    rotationLimits,\n    annotations,\n    annotationsClass,\n    depthTest,\n    scale,\n    lineWidth,\n    fixed,\n    axisColors,\n    hoveredColor,\n    opacity,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    userData\n  } = React.useContext(context); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const camControls = useThree(state => state.controls);\n  const divRef = React.useRef(null);\n  const objRef = React.useRef(null);\n  const angle0 = React.useRef(0);\n  const angle = React.useRef(0);\n  const clickInfo = React.useRef(null);\n  const [isHovered, setIsHovered] = React.useState(false);\n  const onPointerDown = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.innerText = `${toDegrees(angle.current).toFixed(0)}ยบ`;\n      divRef.current.style.display = 'block';\n    }\n\n    e.stopPropagation();\n    const clickPoint = e.point.clone();\n    const origin = new THREE.Vector3().setFromMatrixPosition(objRef.current.matrixWorld);\n    const e1 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 0).normalize();\n    const e2 = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 1).normalize();\n    const normal = new THREE.Vector3().setFromMatrixColumn(objRef.current.matrixWorld, 2).normalize();\n    const plane = new THREE.Plane().setFromNormalAndCoplanarPoint(normal, origin);\n    clickInfo.current = {\n      clickPoint,\n      origin,\n      e1,\n      e2,\n      normal,\n      plane\n    };\n    onDragStart({\n      component: 'Rotator',\n      axis,\n      origin,\n      directions: [e1, e2, normal]\n    });\n    camControls && (camControls.enabled = false); // @ts-ignore\n\n    e.target.setPointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragStart, axis]);\n  const onPointerMove = React.useCallback(e => {\n    e.stopPropagation();\n    if (!isHovered) setIsHovered(true);\n\n    if (clickInfo.current) {\n      const {\n        clickPoint,\n        origin,\n        e1,\n        e2,\n        normal,\n        plane\n      } = clickInfo.current;\n      const [min, max] = (rotationLimits == null ? void 0 : rotationLimits[axis]) || [undefined, undefined];\n      ray.copy(e.ray);\n      ray.intersectPlane(plane, intersection);\n      ray.direction.negate();\n      ray.intersectPlane(plane, intersection);\n      let deltaAngle = calculateAngle(clickPoint, intersection, origin, e1, e2);\n      let degrees = toDegrees(deltaAngle); // @ts-ignore\n\n      if (e.shiftKey) {\n        degrees = Math.round(degrees / 10) * 10;\n        deltaAngle = toRadians(degrees);\n      }\n\n      if (min !== undefined && max !== undefined && max - min < 2 * Math.PI) {\n        deltaAngle = minimizeAngle(deltaAngle);\n        deltaAngle = deltaAngle > Math.PI ? deltaAngle - 2 * Math.PI : deltaAngle;\n        deltaAngle = clamp(deltaAngle, min - angle0.current, max - angle0.current);\n        angle.current = angle0.current + deltaAngle;\n      } else {\n        angle.current = minimizeAngle(angle0.current + deltaAngle);\n        angle.current = angle.current > Math.PI ? angle.current - 2 * Math.PI : angle.current;\n      }\n\n      if (annotations) {\n        degrees = toDegrees(angle.current);\n        divRef.current.innerText = `${degrees.toFixed(0)}ยบ`;\n      }\n\n      rotMatrix.makeRotationAxis(normal, deltaAngle);\n      posNew.copy(origin).applyMatrix4(rotMatrix).sub(origin).negate();\n      rotMatrix.setPosition(posNew);\n      onDrag(rotMatrix);\n    }\n  }, [annotations, onDrag, isHovered, rotationLimits, axis]);\n  const onPointerUp = React.useCallback(e => {\n    if (annotations) {\n      divRef.current.style.display = 'none';\n    }\n\n    e.stopPropagation();\n    angle0.current = angle.current;\n    clickInfo.current = null;\n    onDragEnd();\n    camControls && (camControls.enabled = true); // @ts-ignore\n\n    e.target.releasePointerCapture(e.pointerId);\n  }, [annotations, camControls, onDragEnd]);\n  const onPointerOut = React.useCallback(e => {\n    e.stopPropagation();\n    setIsHovered(false);\n  }, []);\n  const matrixL = React.useMemo(() => {\n    const dir1N = dir1.clone().normalize();\n    const dir2N = dir2.clone().normalize();\n    return new THREE.Matrix4().makeBasis(dir1N, dir2N, dir1N.clone().cross(dir2N));\n  }, [dir1, dir2]);\n  const r = fixed ? 0.65 : scale * 0.65;\n  const arc = React.useMemo(() => {\n    const segments = 32;\n    const points = [];\n\n    for (let j = 0; j <= segments; j++) {\n      const angle = j * (Math.PI / 2) / segments;\n      points.push(new THREE.Vector3(Math.cos(angle) * r, Math.sin(angle) * r, 0));\n    }\n\n    return points;\n  }, [r]);\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: objRef,\n    onPointerDown: onPointerDown,\n    onPointerMove: onPointerMove,\n    onPointerUp: onPointerUp,\n    onPointerOut: onPointerOut,\n    matrix: matrixL,\n    matrixAutoUpdate: false\n  }, annotations && /*#__PURE__*/React.createElement(Html, {\n    position: [r, r, 0]\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'none',\n      background: '#151520',\n      color: 'white',\n      padding: '6px 8px',\n      borderRadius: 7,\n      whiteSpace: 'nowrap'\n    },\n    className: annotationsClass,\n    ref: divRef\n  })), /*#__PURE__*/React.createElement(Line, {\n    points: arc,\n    lineWidth: lineWidth * 4,\n    visible: false,\n    userData: userData\n  }), /*#__PURE__*/React.createElement(Line, {\n    transparent: true,\n    raycast: () => null,\n    depthTest: depthTest,\n    points: arc,\n    lineWidth: lineWidth,\n    color: isHovered ? hoveredColor : axisColors[axis],\n    opacity: opacity,\n    polygonOffset: true,\n    polygonOffsetFactor: -10\n  }));\n};\n\nexport { AxisRotator };\n"]},"metadata":{},"sourceType":"module"}