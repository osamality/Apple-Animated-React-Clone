{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CatmullRomCurve3, Color } from 'three';\nimport { Line } from './Line.js';\nconst CatmullRomLine = /*#__PURE__*/React.forwardRef(function CatmullRomLine({\n  points,\n  closed = false,\n  curveType = 'centripetal',\n  tension = 0.5,\n  segments = 20,\n  vertexColors,\n  ...rest\n}, ref) {\n  const curve = React.useMemo(() => {\n    const mappedPoints = points.map(pt => pt instanceof Vector3 ? pt : new Vector3(...pt));\n    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);\n  }, [points, closed, curveType, tension]);\n  const segmentedPoints = React.useMemo(() => curve.getPoints(segments), [curve, segments]);\n  const interpolatedVertexColors = React.useMemo(() => {\n    if (!vertexColors || vertexColors.length < 2) return undefined;\n    if (vertexColors.length === segments + 1) return vertexColors;\n    const mappedColors = vertexColors.map(color => color instanceof Color ? color : new Color(...color));\n    if (closed) mappedColors.push(mappedColors[0].clone());\n    const iColors = [mappedColors[0]];\n    const divisions = segments / (mappedColors.length - 1);\n\n    for (let i = 1; i < segments; i++) {\n      const alpha = i % divisions / divisions;\n      const colorIndex = Math.floor(i / divisions);\n      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));\n    }\n\n    iColors.push(mappedColors[mappedColors.length - 1]);\n    return iColors;\n  }, [vertexColors, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: segmentedPoints,\n    vertexColors: interpolatedVertexColors\n  }, rest));\n});\nexport { CatmullRomLine };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/@react-three/drei/core/CatmullRomLine.js"],"names":["_extends","React","Vector3","CatmullRomCurve3","Color","Line","CatmullRomLine","forwardRef","points","closed","curveType","tension","segments","vertexColors","rest","ref","curve","useMemo","mappedPoints","map","pt","segmentedPoints","getPoints","interpolatedVertexColors","length","undefined","mappedColors","color","push","clone","iColors","divisions","i","alpha","colorIndex","Math","floor","lerp","createElement"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CatmullRomCurve3, Color } from 'three';\nimport { Line } from './Line.js';\n\nconst CatmullRomLine = /*#__PURE__*/React.forwardRef(function CatmullRomLine({\n  points,\n  closed = false,\n  curveType = 'centripetal',\n  tension = 0.5,\n  segments = 20,\n  vertexColors,\n  ...rest\n}, ref) {\n  const curve = React.useMemo(() => {\n    const mappedPoints = points.map(pt => pt instanceof Vector3 ? pt : new Vector3(...pt));\n    return new CatmullRomCurve3(mappedPoints, closed, curveType, tension);\n  }, [points, closed, curveType, tension]);\n  const segmentedPoints = React.useMemo(() => curve.getPoints(segments), [curve, segments]);\n  const interpolatedVertexColors = React.useMemo(() => {\n    if (!vertexColors || vertexColors.length < 2) return undefined;\n    if (vertexColors.length === segments + 1) return vertexColors;\n    const mappedColors = vertexColors.map(color => color instanceof Color ? color : new Color(...color));\n    if (closed) mappedColors.push(mappedColors[0].clone());\n    const iColors = [mappedColors[0]];\n    const divisions = segments / (mappedColors.length - 1);\n\n    for (let i = 1; i < segments; i++) {\n      const alpha = i % divisions / divisions;\n      const colorIndex = Math.floor(i / divisions);\n      iColors.push(mappedColors[colorIndex].clone().lerp(mappedColors[colorIndex + 1], alpha));\n    }\n\n    iColors.push(mappedColors[mappedColors.length - 1]);\n    return iColors;\n  }, [vertexColors, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: segmentedPoints,\n    vertexColors: interpolatedVertexColors\n  }, rest));\n});\n\nexport { CatmullRomLine };\n"]},"metadata":{},"sourceType":"module"}