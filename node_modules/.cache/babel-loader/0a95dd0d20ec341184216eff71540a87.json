{"ast":null,"code":"import Node from './Node.js';\n\nclass VarNode extends Node {\n  constructor(node, name = null, nodeType = null) {\n    super(nodeType);\n    this.node = node;\n    this.name = name;\n  }\n\n  getHash(builder) {\n    return this.name || super.getHash(builder);\n  }\n\n  getNodeType(builder) {\n    return super.getNodeType(builder) || this.node.getNodeType(builder);\n  }\n\n  generate(builder) {\n    const type = builder.getVectorType(this.getNodeType(builder));\n    const node = this.node;\n    const name = this.name;\n    const snippet = node.build(builder, type);\n    const nodeVar = builder.getVarFromNode(this, type);\n\n    if (name !== null) {\n      nodeVar.name = name;\n    }\n\n    const propertyName = builder.getPropertyName(nodeVar);\n    builder.addFlowCode(`${propertyName} = ${snippet}`);\n    return propertyName;\n  }\n\n}\n\nVarNode.prototype.isVarNode = true;\nexport default VarNode;","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/nodes/core/VarNode.js"],"names":["Node","VarNode","constructor","node","name","nodeType","getHash","builder","getNodeType","generate","type","getVectorType","snippet","build","nodeVar","getVarFromNode","propertyName","getPropertyName","addFlowCode","prototype","isVarNode"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,OAAN,SAAsBD,IAAtB,CAA2B;AACzBE,EAAAA,WAAW,CAACC,IAAD,EAAOC,IAAI,GAAG,IAAd,EAAoBC,QAAQ,GAAG,IAA/B,EAAqC;AAC9C,UAAMA,QAAN;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AAEDE,EAAAA,OAAO,CAACC,OAAD,EAAU;AACf,WAAO,KAAKH,IAAL,IAAa,MAAME,OAAN,CAAcC,OAAd,CAApB;AACD;;AAEDC,EAAAA,WAAW,CAACD,OAAD,EAAU;AACnB,WAAO,MAAMC,WAAN,CAAkBD,OAAlB,KAA8B,KAAKJ,IAAL,CAAUK,WAAV,CAAsBD,OAAtB,CAArC;AACD;;AAEDE,EAAAA,QAAQ,CAACF,OAAD,EAAU;AAChB,UAAMG,IAAI,GAAGH,OAAO,CAACI,aAAR,CAAsB,KAAKH,WAAL,CAAiBD,OAAjB,CAAtB,CAAb;AACA,UAAMJ,IAAI,GAAG,KAAKA,IAAlB;AACA,UAAMC,IAAI,GAAG,KAAKA,IAAlB;AACA,UAAMQ,OAAO,GAAGT,IAAI,CAACU,KAAL,CAAWN,OAAX,EAAoBG,IAApB,CAAhB;AACA,UAAMI,OAAO,GAAGP,OAAO,CAACQ,cAAR,CAAuB,IAAvB,EAA6BL,IAA7B,CAAhB;;AAEA,QAAIN,IAAI,KAAK,IAAb,EAAmB;AACjBU,MAAAA,OAAO,CAACV,IAAR,GAAeA,IAAf;AACD;;AAED,UAAMY,YAAY,GAAGT,OAAO,CAACU,eAAR,CAAwBH,OAAxB,CAArB;AACAP,IAAAA,OAAO,CAACW,WAAR,CAAqB,GAAEF,YAAa,MAAKJ,OAAQ,EAAjD;AACA,WAAOI,YAAP;AACD;;AA7BwB;;AAiC3Bf,OAAO,CAACkB,SAAR,CAAkBC,SAAlB,GAA8B,IAA9B;AAEA,eAAenB,OAAf","sourcesContent":["import Node from './Node.js';\n\nclass VarNode extends Node {\n  constructor(node, name = null, nodeType = null) {\n    super(nodeType);\n    this.node = node;\n    this.name = name;\n  }\n\n  getHash(builder) {\n    return this.name || super.getHash(builder);\n  }\n\n  getNodeType(builder) {\n    return super.getNodeType(builder) || this.node.getNodeType(builder);\n  }\n\n  generate(builder) {\n    const type = builder.getVectorType(this.getNodeType(builder));\n    const node = this.node;\n    const name = this.name;\n    const snippet = node.build(builder, type);\n    const nodeVar = builder.getVarFromNode(this, type);\n\n    if (name !== null) {\n      nodeVar.name = name;\n    }\n\n    const propertyName = builder.getPropertyName(nodeVar);\n    builder.addFlowCode(`${propertyName} = ${snippet}`);\n    return propertyName;\n  }\n\n}\n\nVarNode.prototype.isVarNode = true;\n\nexport default VarNode;\n"]},"metadata":{},"sourceType":"module"}