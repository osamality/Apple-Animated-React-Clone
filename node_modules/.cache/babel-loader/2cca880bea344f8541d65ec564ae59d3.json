{"ast":null,"code":"import { WebGLCubeRenderTarget, HalfFloatType } from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nfunction CubeCamera({\n  children,\n  fog,\n  frames = Infinity,\n  resolution = 256,\n  near = 0.1,\n  far = 1000,\n  envMap,\n  ...props\n}) {\n  const ref = React.useRef();\n  const [camera, setCamera] = React.useState(null);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const fbo = React.useMemo(() => {\n    const fbo = new WebGLCubeRenderTarget(resolution);\n    fbo.texture.encoding = gl.outputEncoding;\n    fbo.texture.type = HalfFloatType;\n    return fbo;\n  }, [resolution]);\n  let count = 0;\n  let originalFog;\n  let originalBackground;\n  useFrame(() => {\n    if (camera && ref.current && (frames === Infinity || count < frames)) {\n      ref.current.visible = false;\n      originalFog = scene.fog;\n      originalBackground = scene.background;\n      scene.background = envMap || originalBackground;\n      scene.fog = fog || originalFog;\n      camera.update(gl, scene);\n      scene.fog = originalFog;\n      scene.background = originalBackground;\n      ref.current.visible = true;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"cubeCamera\", {\n    ref: setCamera,\n    args: [near, far, fbo]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, children(fbo.texture)));\n}\n\nexport { CubeCamera };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/core/CubeCamera.js"],"names":["WebGLCubeRenderTarget","HalfFloatType","React","useThree","useFrame","CubeCamera","children","fog","frames","Infinity","resolution","near","far","envMap","props","ref","useRef","camera","setCamera","useState","scene","gl","fbo","useMemo","texture","encoding","outputEncoding","type","count","originalFog","originalBackground","current","visible","background","update","createElement","args"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,aAAhC,QAAqD,OAArD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,oBAAnC;;AAEA,SAASC,UAAT,CAAoB;AAClBC,EAAAA,QADkB;AAElBC,EAAAA,GAFkB;AAGlBC,EAAAA,MAAM,GAAGC,QAHS;AAIlBC,EAAAA,UAAU,GAAG,GAJK;AAKlBC,EAAAA,IAAI,GAAG,GALW;AAMlBC,EAAAA,GAAG,GAAG,IANY;AAOlBC,EAAAA,MAPkB;AAQlB,KAAGC;AARe,CAApB,EASG;AACD,QAAMC,GAAG,GAAGb,KAAK,CAACc,MAAN,EAAZ;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBhB,KAAK,CAACiB,QAAN,CAAe,IAAf,CAA5B;AACA,QAAMC,KAAK,GAAGjB,QAAQ,CAAC,CAAC;AACtBiB,IAAAA;AADsB,GAAD,KAEjBA,KAFgB,CAAtB;AAGA,QAAMC,EAAE,GAAGlB,QAAQ,CAAC,CAAC;AACnBkB,IAAAA;AADmB,GAAD,KAEdA,EAFa,CAAnB;AAGA,QAAMC,GAAG,GAAGpB,KAAK,CAACqB,OAAN,CAAc,MAAM;AAC9B,UAAMD,GAAG,GAAG,IAAItB,qBAAJ,CAA0BU,UAA1B,CAAZ;AACAY,IAAAA,GAAG,CAACE,OAAJ,CAAYC,QAAZ,GAAuBJ,EAAE,CAACK,cAA1B;AACAJ,IAAAA,GAAG,CAACE,OAAJ,CAAYG,IAAZ,GAAmB1B,aAAnB;AACA,WAAOqB,GAAP;AACD,GALW,EAKT,CAACZ,UAAD,CALS,CAAZ;AAMA,MAAIkB,KAAK,GAAG,CAAZ;AACA,MAAIC,WAAJ;AACA,MAAIC,kBAAJ;AACA1B,EAAAA,QAAQ,CAAC,MAAM;AACb,QAAIa,MAAM,IAAIF,GAAG,CAACgB,OAAd,KAA0BvB,MAAM,KAAKC,QAAX,IAAuBmB,KAAK,GAAGpB,MAAzD,CAAJ,EAAsE;AACpEO,MAAAA,GAAG,CAACgB,OAAJ,CAAYC,OAAZ,GAAsB,KAAtB;AACAH,MAAAA,WAAW,GAAGT,KAAK,CAACb,GAApB;AACAuB,MAAAA,kBAAkB,GAAGV,KAAK,CAACa,UAA3B;AACAb,MAAAA,KAAK,CAACa,UAAN,GAAmBpB,MAAM,IAAIiB,kBAA7B;AACAV,MAAAA,KAAK,CAACb,GAAN,GAAYA,GAAG,IAAIsB,WAAnB;AACAZ,MAAAA,MAAM,CAACiB,MAAP,CAAcb,EAAd,EAAkBD,KAAlB;AACAA,MAAAA,KAAK,CAACb,GAAN,GAAYsB,WAAZ;AACAT,MAAAA,KAAK,CAACa,UAAN,GAAmBH,kBAAnB;AACAf,MAAAA,GAAG,CAACgB,OAAJ,CAAYC,OAAZ,GAAsB,IAAtB;AACAJ,MAAAA,KAAK;AACN;AACF,GAbO,CAAR;AAcA,SAAO,aAAa1B,KAAK,CAACiC,aAAN,CAAoB,OAApB,EAA6BrB,KAA7B,EAAoC,aAAaZ,KAAK,CAACiC,aAAN,CAAoB,YAApB,EAAkC;AACrGpB,IAAAA,GAAG,EAAEG,SADgG;AAErGkB,IAAAA,IAAI,EAAE,CAACzB,IAAD,EAAOC,GAAP,EAAYU,GAAZ;AAF+F,GAAlC,CAAjD,EAGhB,aAAapB,KAAK,CAACiC,aAAN,CAAoB,OAApB,EAA6B;AAC5CpB,IAAAA,GAAG,EAAEA;AADuC,GAA7B,EAEdT,QAAQ,CAACgB,GAAG,CAACE,OAAL,CAFM,CAHG,CAApB;AAMD;;AAED,SAASnB,UAAT","sourcesContent":["import { WebGLCubeRenderTarget, HalfFloatType } from 'three';\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nfunction CubeCamera({\n  children,\n  fog,\n  frames = Infinity,\n  resolution = 256,\n  near = 0.1,\n  far = 1000,\n  envMap,\n  ...props\n}) {\n  const ref = React.useRef();\n  const [camera, setCamera] = React.useState(null);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const fbo = React.useMemo(() => {\n    const fbo = new WebGLCubeRenderTarget(resolution);\n    fbo.texture.encoding = gl.outputEncoding;\n    fbo.texture.type = HalfFloatType;\n    return fbo;\n  }, [resolution]);\n  let count = 0;\n  let originalFog;\n  let originalBackground;\n  useFrame(() => {\n    if (camera && ref.current && (frames === Infinity || count < frames)) {\n      ref.current.visible = false;\n      originalFog = scene.fog;\n      originalBackground = scene.background;\n      scene.background = envMap || originalBackground;\n      scene.fog = fog || originalFog;\n      camera.update(gl, scene);\n      scene.fog = originalFog;\n      scene.background = originalBackground;\n      ref.current.visible = true;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"cubeCamera\", {\n    ref: setCamera,\n    args: [near, far, fbo]\n  }), /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, children(fbo.texture)));\n}\n\nexport { CubeCamera };\n"]},"metadata":{},"sourceType":"module"}