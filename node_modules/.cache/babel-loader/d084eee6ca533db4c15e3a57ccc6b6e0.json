{"ast":null,"code":"import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber'; // ðŸ‘‡ uncomment when TS version supports function overloads\n// export function useFBO(settings?: FBOSettings)\n\nfunction useFBO(\n/** Width in pixels, or settings (will render fullscreen by default) */\nwidth,\n/** Height in pixels */\nheight,\n/**Settings */\nsettings) {\n  const {\n    gl,\n    size,\n    viewport\n  } = useThree();\n\n  const _width = typeof width === 'number' ? width : size.width * viewport.dpr;\n\n  const _height = typeof height === 'number' ? height : size.height * viewport.dpr;\n\n  const _settings = (typeof width === 'number' ? settings : width) || {};\n\n  const {\n    samples = 0,\n    depth,\n    ...targetSettings\n  } = _settings;\n  const target = React.useMemo(() => {\n    let target;\n    target = new THREE.WebGLRenderTarget(_width, _height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      encoding: gl.outputEncoding,\n      type: THREE.HalfFloatType,\n      ...targetSettings\n    });\n\n    if (depth) {\n      target.depthTexture = new THREE.DepthTexture(_width, _height, THREE.FloatType);\n    }\n\n    target.samples = samples;\n    return target;\n  }, []);\n  React.useLayoutEffect(() => {\n    target.setSize(_width, _height);\n    if (samples) target.samples = samples;\n  }, [samples, target, _width, _height]);\n  React.useEffect(() => {\n    return () => target.dispose();\n  }, []);\n  return target;\n}\n\nexport { useFBO };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/core/useFBO.js"],"names":["React","THREE","useThree","useFBO","width","height","settings","gl","size","viewport","_width","dpr","_height","_settings","samples","depth","targetSettings","target","useMemo","WebGLRenderTarget","minFilter","LinearFilter","magFilter","encoding","outputEncoding","type","HalfFloatType","depthTexture","DepthTexture","FloatType","useLayoutEffect","setSize","useEffect","dispose"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,oBAAzB,C,CAEA;AACA;;AACA,SAASC,MAAT;AACA;AACAC,KAFA;AAGA;AACAC,MAJA;AAKA;AACAC,QANA,EAMU;AACR,QAAM;AACJC,IAAAA,EADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA;AAHI,MAIFP,QAAQ,EAJZ;;AAMA,QAAMQ,MAAM,GAAG,OAAON,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCI,IAAI,CAACJ,KAAL,GAAaK,QAAQ,CAACE,GAAzE;;AAEA,QAAMC,OAAO,GAAG,OAAOP,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCG,IAAI,CAACH,MAAL,GAAcI,QAAQ,CAACE,GAA7E;;AAEA,QAAME,SAAS,GAAG,CAAC,OAAOT,KAAP,KAAiB,QAAjB,GAA4BE,QAA5B,GAAuCF,KAAxC,KAAkD,EAApE;;AAEA,QAAM;AACJU,IAAAA,OAAO,GAAG,CADN;AAEJC,IAAAA,KAFI;AAGJ,OAAGC;AAHC,MAIFH,SAJJ;AAKA,QAAMI,MAAM,GAAGjB,KAAK,CAACkB,OAAN,CAAc,MAAM;AACjC,QAAID,MAAJ;AACAA,IAAAA,MAAM,GAAG,IAAIhB,KAAK,CAACkB,iBAAV,CAA4BT,MAA5B,EAAoCE,OAApC,EAA6C;AACpDQ,MAAAA,SAAS,EAAEnB,KAAK,CAACoB,YADmC;AAEpDC,MAAAA,SAAS,EAAErB,KAAK,CAACoB,YAFmC;AAGpDE,MAAAA,QAAQ,EAAEhB,EAAE,CAACiB,cAHuC;AAIpDC,MAAAA,IAAI,EAAExB,KAAK,CAACyB,aAJwC;AAKpD,SAAGV;AALiD,KAA7C,CAAT;;AAQA,QAAID,KAAJ,EAAW;AACTE,MAAAA,MAAM,CAACU,YAAP,GAAsB,IAAI1B,KAAK,CAAC2B,YAAV,CAAuBlB,MAAvB,EAA+BE,OAA/B,EAAwCX,KAAK,CAAC4B,SAA9C,CAAtB;AACD;;AAEDZ,IAAAA,MAAM,CAACH,OAAP,GAAiBA,OAAjB;AACA,WAAOG,MAAP;AACD,GAhBc,EAgBZ,EAhBY,CAAf;AAiBAjB,EAAAA,KAAK,CAAC8B,eAAN,CAAsB,MAAM;AAC1Bb,IAAAA,MAAM,CAACc,OAAP,CAAerB,MAAf,EAAuBE,OAAvB;AACA,QAAIE,OAAJ,EAAaG,MAAM,CAACH,OAAP,GAAiBA,OAAjB;AACd,GAHD,EAGG,CAACA,OAAD,EAAUG,MAAV,EAAkBP,MAAlB,EAA0BE,OAA1B,CAHH;AAIAZ,EAAAA,KAAK,CAACgC,SAAN,CAAgB,MAAM;AACpB,WAAO,MAAMf,MAAM,CAACgB,OAAP,EAAb;AACD,GAFD,EAEG,EAFH;AAGA,SAAOhB,MAAP;AACD;;AAED,SAASd,MAAT","sourcesContent":["import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\n\n// ðŸ‘‡ uncomment when TS version supports function overloads\n// export function useFBO(settings?: FBOSettings)\nfunction useFBO(\n/** Width in pixels, or settings (will render fullscreen by default) */\nwidth,\n/** Height in pixels */\nheight,\n/**Settings */\nsettings) {\n  const {\n    gl,\n    size,\n    viewport\n  } = useThree();\n\n  const _width = typeof width === 'number' ? width : size.width * viewport.dpr;\n\n  const _height = typeof height === 'number' ? height : size.height * viewport.dpr;\n\n  const _settings = (typeof width === 'number' ? settings : width) || {};\n\n  const {\n    samples = 0,\n    depth,\n    ...targetSettings\n  } = _settings;\n  const target = React.useMemo(() => {\n    let target;\n    target = new THREE.WebGLRenderTarget(_width, _height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      encoding: gl.outputEncoding,\n      type: THREE.HalfFloatType,\n      ...targetSettings\n    });\n\n    if (depth) {\n      target.depthTexture = new THREE.DepthTexture(_width, _height, THREE.FloatType);\n    }\n\n    target.samples = samples;\n    return target;\n  }, []);\n  React.useLayoutEffect(() => {\n    target.setSize(_width, _height);\n    if (samples) target.samples = samples;\n  }, [samples, target, _width, _height]);\n  React.useEffect(() => {\n    return () => target.dispose();\n  }, []);\n  return target;\n}\n\nexport { useFBO };\n"]},"metadata":{},"sourceType":"module"}