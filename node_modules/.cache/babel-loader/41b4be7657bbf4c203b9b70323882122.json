{"ast":null,"code":"import UniformNode from '../core/UniformNode.js';\nimport UVNode from './UVNode.js';\n\nclass TextureNode extends UniformNode {\n  constructor(value, uvNode = new UVNode(), biasNode = null) {\n    super(value, 'vec4');\n    this.uvNode = uvNode;\n    this.biasNode = biasNode;\n  }\n\n  getUniformHash() {\n    return this.value.uuid;\n  }\n\n  getInputType() {\n    return 'texture';\n  }\n\n  generate(builder, output) {\n    const texture = this.value;\n\n    if (!texture || texture.isTexture !== true) {\n      throw new Error('TextureNode: Need a three.js texture.');\n    }\n\n    const textureProperty = super.generate(builder, 'texture');\n\n    if (output === 'sampler') {\n      return textureProperty + '_sampler';\n    } else if (builder.isReference(output)) {\n      return textureProperty;\n    } else {\n      const nodeData = builder.getDataFromNode(this);\n      let snippet = nodeData.snippet;\n\n      if (snippet === undefined) {\n        const uvSnippet = this.uvNode.build(builder, 'vec2');\n        const biasNode = this.biasNode;\n\n        if (biasNode !== null) {\n          const biasSnippet = biasNode.build(builder, 'float');\n          snippet = builder.getTextureBias(textureProperty, uvSnippet, biasSnippet);\n        } else {\n          snippet = builder.getTexture(textureProperty, uvSnippet);\n        }\n\n        nodeData.snippet = snippet;\n      }\n\n      return builder.format(snippet, 'vec4', output);\n    }\n  }\n\n  serialize(data) {\n    super.serialize(data);\n    data.value = this.value.toJSON(data.meta).uuid;\n  }\n\n  deserialize(data) {\n    super.deserialize(data);\n    this.value = data.meta.textures[data.value];\n  }\n\n}\n\nTextureNode.prototype.isTextureNode = true;\nexport default TextureNode;","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/nodes/accessors/TextureNode.js"],"names":["UniformNode","UVNode","TextureNode","constructor","value","uvNode","biasNode","getUniformHash","uuid","getInputType","generate","builder","output","texture","isTexture","Error","textureProperty","isReference","nodeData","getDataFromNode","snippet","undefined","uvSnippet","build","biasSnippet","getTextureBias","getTexture","format","serialize","data","toJSON","meta","deserialize","textures","prototype","isTextureNode"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,wBAAxB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,WAAN,SAA0BF,WAA1B,CAAsC;AACpCG,EAAAA,WAAW,CAACC,KAAD,EAAQC,MAAM,GAAG,IAAIJ,MAAJ,EAAjB,EAA+BK,QAAQ,GAAG,IAA1C,EAAgD;AACzD,UAAMF,KAAN,EAAa,MAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKH,KAAL,CAAWI,IAAlB;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,WAAO,SAAP;AACD;;AAEDC,EAAAA,QAAQ,CAACC,OAAD,EAAUC,MAAV,EAAkB;AACxB,UAAMC,OAAO,GAAG,KAAKT,KAArB;;AAEA,QAAI,CAACS,OAAD,IAAYA,OAAO,CAACC,SAAR,KAAsB,IAAtC,EAA4C;AAC1C,YAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,UAAMC,eAAe,GAAG,MAAMN,QAAN,CAAeC,OAAf,EAAwB,SAAxB,CAAxB;;AAEA,QAAIC,MAAM,KAAK,SAAf,EAA0B;AACxB,aAAOI,eAAe,GAAG,UAAzB;AACD,KAFD,MAEO,IAAIL,OAAO,CAACM,WAAR,CAAoBL,MAApB,CAAJ,EAAiC;AACtC,aAAOI,eAAP;AACD,KAFM,MAEA;AACL,YAAME,QAAQ,GAAGP,OAAO,CAACQ,eAAR,CAAwB,IAAxB,CAAjB;AACA,UAAIC,OAAO,GAAGF,QAAQ,CAACE,OAAvB;;AAEA,UAAIA,OAAO,KAAKC,SAAhB,EAA2B;AACzB,cAAMC,SAAS,GAAG,KAAKjB,MAAL,CAAYkB,KAAZ,CAAkBZ,OAAlB,EAA2B,MAA3B,CAAlB;AACA,cAAML,QAAQ,GAAG,KAAKA,QAAtB;;AAEA,YAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB,gBAAMkB,WAAW,GAAGlB,QAAQ,CAACiB,KAAT,CAAeZ,OAAf,EAAwB,OAAxB,CAApB;AACAS,UAAAA,OAAO,GAAGT,OAAO,CAACc,cAAR,CAAuBT,eAAvB,EAAwCM,SAAxC,EAAmDE,WAAnD,CAAV;AACD,SAHD,MAGO;AACLJ,UAAAA,OAAO,GAAGT,OAAO,CAACe,UAAR,CAAmBV,eAAnB,EAAoCM,SAApC,CAAV;AACD;;AAEDJ,QAAAA,QAAQ,CAACE,OAAT,GAAmBA,OAAnB;AACD;;AAED,aAAOT,OAAO,CAACgB,MAAR,CAAeP,OAAf,EAAwB,MAAxB,EAAgCR,MAAhC,CAAP;AACD;AACF;;AAEDgB,EAAAA,SAAS,CAACC,IAAD,EAAO;AACd,UAAMD,SAAN,CAAgBC,IAAhB;AACAA,IAAAA,IAAI,CAACzB,KAAL,GAAa,KAAKA,KAAL,CAAW0B,MAAX,CAAkBD,IAAI,CAACE,IAAvB,EAA6BvB,IAA1C;AACD;;AAEDwB,EAAAA,WAAW,CAACH,IAAD,EAAO;AAChB,UAAMG,WAAN,CAAkBH,IAAlB;AACA,SAAKzB,KAAL,GAAayB,IAAI,CAACE,IAAL,CAAUE,QAAV,CAAmBJ,IAAI,CAACzB,KAAxB,CAAb;AACD;;AA1DmC;;AA8DtCF,WAAW,CAACgC,SAAZ,CAAsBC,aAAtB,GAAsC,IAAtC;AAEA,eAAejC,WAAf","sourcesContent":["import UniformNode from '../core/UniformNode.js';\nimport UVNode from './UVNode.js';\n\nclass TextureNode extends UniformNode {\n  constructor(value, uvNode = new UVNode(), biasNode = null) {\n    super(value, 'vec4');\n    this.uvNode = uvNode;\n    this.biasNode = biasNode;\n  }\n\n  getUniformHash() {\n    return this.value.uuid;\n  }\n\n  getInputType() {\n    return 'texture';\n  }\n\n  generate(builder, output) {\n    const texture = this.value;\n\n    if (!texture || texture.isTexture !== true) {\n      throw new Error('TextureNode: Need a three.js texture.');\n    }\n\n    const textureProperty = super.generate(builder, 'texture');\n\n    if (output === 'sampler') {\n      return textureProperty + '_sampler';\n    } else if (builder.isReference(output)) {\n      return textureProperty;\n    } else {\n      const nodeData = builder.getDataFromNode(this);\n      let snippet = nodeData.snippet;\n\n      if (snippet === undefined) {\n        const uvSnippet = this.uvNode.build(builder, 'vec2');\n        const biasNode = this.biasNode;\n\n        if (biasNode !== null) {\n          const biasSnippet = biasNode.build(builder, 'float');\n          snippet = builder.getTextureBias(textureProperty, uvSnippet, biasSnippet);\n        } else {\n          snippet = builder.getTexture(textureProperty, uvSnippet);\n        }\n\n        nodeData.snippet = snippet;\n      }\n\n      return builder.format(snippet, 'vec4', output);\n    }\n  }\n\n  serialize(data) {\n    super.serialize(data);\n    data.value = this.value.toJSON(data.meta).uuid;\n  }\n\n  deserialize(data) {\n    super.deserialize(data);\n    this.value = data.meta.textures[data.value];\n  }\n\n}\n\nTextureNode.prototype.isTextureNode = true;\n\nexport default TextureNode;\n"]},"metadata":{},"sourceType":"module"}