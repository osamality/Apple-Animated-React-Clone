{"ast":null,"code":"import { DataTextureLoader, HalfFloatType, FloatType, RGBAFormat, LinearEncoding, RedFormat, LinearFilter, DataUtils } from 'three';\nimport { unzlibSync } from 'fflate';\n/**\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation, so I have preserved their copyright notices.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n\nclass EXRLoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n\n  parse(buffer) {\n    const USHORT_RANGE = 1 << 16;\n    const BITMAP_SIZE = USHORT_RANGE >> 3;\n    const HUF_ENCBITS = 16; // literal (value) bit length\n\n    const HUF_DECBITS = 14; // decoding bit size (>= 8)\n\n    const HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1; // encoding table size\n\n    const HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\n\n    const HUF_DECMASK = HUF_DECSIZE - 1;\n    const NBITS = 16;\n    const A_OFFSET = 1 << NBITS - 1;\n    const MOD_MASK = (1 << NBITS) - 1;\n    const SHORT_ZEROCODE_RUN = 59;\n    const LONG_ZEROCODE_RUN = 63;\n    const SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n    const ULONG_SIZE = 8;\n    const FLOAT32_SIZE = 4;\n    const INT32_SIZE = 4;\n    const INT16_SIZE = 2;\n    const INT8_SIZE = 1;\n    const STATIC_HUFFMAN = 0;\n    const DEFLATE = 1;\n    const UNKNOWN = 0;\n    const LOSSY_DCT = 1;\n    const RLE = 2;\n    const logBase = Math.pow(2.7182818, 2.2);\n\n    function reverseLutFromBitmap(bitmap, lut) {\n      var k = 0;\n\n      for (var i = 0; i < USHORT_RANGE; ++i) {\n        if (i == 0 || bitmap[i >> 3] & 1 << (i & 7)) {\n          lut[k++] = i;\n        }\n      }\n\n      var n = k - 1;\n\n      while (k < USHORT_RANGE) lut[k++] = 0;\n\n      return n;\n    }\n\n    function hufClearDecTable(hdec) {\n      for (var i = 0; i < HUF_DECSIZE; i++) {\n        hdec[i] = {};\n        hdec[i].len = 0;\n        hdec[i].lit = 0;\n        hdec[i].p = null;\n      }\n    }\n\n    const getBitsReturn = {\n      l: 0,\n      c: 0,\n      lc: 0\n    };\n\n    function getBits(nBits, c, lc, uInt8Array, inOffset) {\n      while (lc < nBits) {\n        c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n        lc += 8;\n      }\n\n      lc -= nBits;\n      getBitsReturn.l = c >> lc & (1 << nBits) - 1;\n      getBitsReturn.c = c;\n      getBitsReturn.lc = lc;\n    }\n\n    const hufTableBuffer = new Array(59);\n\n    function hufCanonicalCodeTable(hcode) {\n      for (var i = 0; i <= 58; ++i) hufTableBuffer[i] = 0;\n\n      for (var i = 0; i < HUF_ENCSIZE; ++i) hufTableBuffer[hcode[i]] += 1;\n\n      var c = 0;\n\n      for (var i = 58; i > 0; --i) {\n        var nc = c + hufTableBuffer[i] >> 1;\n        hufTableBuffer[i] = c;\n        c = nc;\n      }\n\n      for (var i = 0; i < HUF_ENCSIZE; ++i) {\n        var l = hcode[i];\n        if (l > 0) hcode[i] = l | hufTableBuffer[l]++ << 6;\n      }\n    }\n\n    function hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, hcode) {\n      var p = inOffset;\n      var c = 0;\n      var lc = 0;\n\n      for (; im <= iM; im++) {\n        if (p.value - inOffset.value > ni) return false;\n        getBits(6, c, lc, uInt8Array, p);\n        var l = getBitsReturn.l;\n        c = getBitsReturn.c;\n        lc = getBitsReturn.lc;\n        hcode[im] = l;\n\n        if (l == LONG_ZEROCODE_RUN) {\n          if (p.value - inOffset.value > ni) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n\n          getBits(8, c, lc, uInt8Array, p);\n          var zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n          c = getBitsReturn.c;\n          lc = getBitsReturn.lc;\n\n          if (im + zerun > iM + 1) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n\n          while (zerun--) hcode[im++] = 0;\n\n          im--;\n        } else if (l >= SHORT_ZEROCODE_RUN) {\n          var zerun = l - SHORT_ZEROCODE_RUN + 2;\n\n          if (im + zerun > iM + 1) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n\n          while (zerun--) hcode[im++] = 0;\n\n          im--;\n        }\n      }\n\n      hufCanonicalCodeTable(hcode);\n    }\n\n    function hufLength(code) {\n      return code & 63;\n    }\n\n    function hufCode(code) {\n      return code >> 6;\n    }\n\n    function hufBuildDecTable(hcode, im, iM, hdecod) {\n      for (; im <= iM; im++) {\n        var c = hufCode(hcode[im]);\n        var l = hufLength(hcode[im]);\n\n        if (c >> l) {\n          throw 'Invalid table entry';\n        }\n\n        if (l > HUF_DECBITS) {\n          var pl = hdecod[c >> l - HUF_DECBITS];\n\n          if (pl.len) {\n            throw 'Invalid table entry';\n          }\n\n          pl.lit++;\n\n          if (pl.p) {\n            var p = pl.p;\n            pl.p = new Array(pl.lit);\n\n            for (var i = 0; i < pl.lit - 1; ++i) {\n              pl.p[i] = p[i];\n            }\n          } else {\n            pl.p = new Array(1);\n          }\n\n          pl.p[pl.lit - 1] = im;\n        } else if (l) {\n          var plOffset = 0;\n\n          for (var i = 1 << HUF_DECBITS - l; i > 0; i--) {\n            var pl = hdecod[(c << HUF_DECBITS - l) + plOffset];\n\n            if (pl.len || pl.p) {\n              throw 'Invalid table entry';\n            }\n\n            pl.len = l;\n            pl.lit = im;\n            plOffset++;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    const getCharReturn = {\n      c: 0,\n      lc: 0\n    };\n\n    function getChar(c, lc, uInt8Array, inOffset) {\n      c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n      lc += 8;\n      getCharReturn.c = c;\n      getCharReturn.lc = lc;\n    }\n\n    const getCodeReturn = {\n      c: 0,\n      lc: 0\n    };\n\n    function getCode(po, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outBufferOffset, outBufferEndOffset) {\n      if (po == rlc) {\n        if (lc < 8) {\n          getChar(c, lc, uInt8Array, inOffset);\n          c = getCharReturn.c;\n          lc = getCharReturn.lc;\n        }\n\n        lc -= 8;\n        var cs = c >> lc;\n        var cs = new Uint8Array([cs])[0];\n\n        if (outBufferOffset.value + cs > outBufferEndOffset) {\n          return false;\n        }\n\n        var s = outBuffer[outBufferOffset.value - 1];\n\n        while (cs-- > 0) {\n          outBuffer[outBufferOffset.value++] = s;\n        }\n      } else if (outBufferOffset.value < outBufferEndOffset) {\n        outBuffer[outBufferOffset.value++] = po;\n      } else {\n        return false;\n      }\n\n      getCodeReturn.c = c;\n      getCodeReturn.lc = lc;\n    }\n\n    function UInt16(value) {\n      return value & 0xffff;\n    }\n\n    function Int16(value) {\n      var ref = UInt16(value);\n      return ref > 0x7fff ? ref - 0x10000 : ref;\n    }\n\n    const wdec14Return = {\n      a: 0,\n      b: 0\n    };\n\n    function wdec14(l, h) {\n      var ls = Int16(l);\n      var hs = Int16(h);\n      var hi = hs;\n      var ai = ls + (hi & 1) + (hi >> 1);\n      var as = ai;\n      var bs = ai - hi;\n      wdec14Return.a = as;\n      wdec14Return.b = bs;\n    }\n\n    function wdec16(l, h) {\n      var m = UInt16(l);\n      var d = UInt16(h);\n      var bb = m - (d >> 1) & MOD_MASK;\n      var aa = d + bb - A_OFFSET & MOD_MASK;\n      wdec14Return.a = aa;\n      wdec14Return.b = bb;\n    }\n\n    function wav2Decode(buffer, j, nx, ox, ny, oy, mx) {\n      var w14 = mx < 1 << 14;\n      var n = nx > ny ? ny : nx;\n      var p = 1;\n      var p2;\n\n      while (p <= n) p <<= 1;\n\n      p >>= 1;\n      p2 = p;\n      p >>= 1;\n\n      while (p >= 1) {\n        var py = 0;\n        var ey = py + oy * (ny - p2);\n        var oy1 = oy * p;\n        var oy2 = oy * p2;\n        var ox1 = ox * p;\n        var ox2 = ox * p2;\n        var i00, i01, i10, i11;\n\n        for (; py <= ey; py += oy2) {\n          var px = py;\n          var ex = py + ox * (nx - p2);\n\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1;\n            var p10 = px + oy1;\n            var p11 = p10 + ox1;\n\n            if (w14) {\n              wdec14(buffer[px + j], buffer[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec14(buffer[p01 + j], buffer[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec14(i00, i01);\n              buffer[px + j] = wdec14Return.a;\n              buffer[p01 + j] = wdec14Return.b;\n              wdec14(i10, i11);\n              buffer[p10 + j] = wdec14Return.a;\n              buffer[p11 + j] = wdec14Return.b;\n            } else {\n              wdec16(buffer[px + j], buffer[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec16(buffer[p01 + j], buffer[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec16(i00, i01);\n              buffer[px + j] = wdec14Return.a;\n              buffer[p01 + j] = wdec14Return.b;\n              wdec16(i10, i11);\n              buffer[p10 + j] = wdec14Return.a;\n              buffer[p11 + j] = wdec14Return.b;\n            }\n          }\n\n          if (nx & p) {\n            var p10 = px + oy1;\n            if (w14) wdec14(buffer[px + j], buffer[p10 + j]);else wdec16(buffer[px + j], buffer[p10 + j]);\n            i00 = wdec14Return.a;\n            buffer[p10 + j] = wdec14Return.b;\n            buffer[px + j] = i00;\n          }\n        }\n\n        if (ny & p) {\n          var px = py;\n          var ex = py + ox * (nx - p2);\n\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1;\n            if (w14) wdec14(buffer[px + j], buffer[p01 + j]);else wdec16(buffer[px + j], buffer[p01 + j]);\n            i00 = wdec14Return.a;\n            buffer[p01 + j] = wdec14Return.b;\n            buffer[px + j] = i00;\n          }\n        }\n\n        p2 = p;\n        p >>= 1;\n      }\n\n      return py;\n    }\n\n    function hufDecode(encodingTable, decodingTable, uInt8Array, inDataView, inOffset, ni, rlc, no, outBuffer, outOffset) {\n      var c = 0;\n      var lc = 0;\n      var outBufferEndOffset = no;\n      var inOffsetEnd = Math.trunc(inOffset.value + (ni + 7) / 8);\n\n      while (inOffset.value < inOffsetEnd) {\n        getChar(c, lc, uInt8Array, inOffset);\n        c = getCharReturn.c;\n        lc = getCharReturn.lc;\n\n        while (lc >= HUF_DECBITS) {\n          var index = c >> lc - HUF_DECBITS & HUF_DECMASK;\n          var pl = decodingTable[index];\n\n          if (pl.len) {\n            lc -= pl.len;\n            getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n            c = getCodeReturn.c;\n            lc = getCodeReturn.lc;\n          } else {\n            if (!pl.p) {\n              throw 'hufDecode issues';\n            }\n\n            var j;\n\n            for (j = 0; j < pl.lit; j++) {\n              var l = hufLength(encodingTable[pl.p[j]]);\n\n              while (lc < l && inOffset.value < inOffsetEnd) {\n                getChar(c, lc, uInt8Array, inOffset);\n                c = getCharReturn.c;\n                lc = getCharReturn.lc;\n              }\n\n              if (lc >= l) {\n                if (hufCode(encodingTable[pl.p[j]]) == (c >> lc - l & (1 << l) - 1)) {\n                  lc -= l;\n                  getCode(pl.p[j], rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n                  c = getCodeReturn.c;\n                  lc = getCodeReturn.lc;\n                  break;\n                }\n              }\n            }\n\n            if (j == pl.lit) {\n              throw 'hufDecode issues';\n            }\n          }\n        }\n      }\n\n      var i = 8 - ni & 7;\n      c >>= i;\n      lc -= i;\n\n      while (lc > 0) {\n        var pl = decodingTable[c << HUF_DECBITS - lc & HUF_DECMASK];\n\n        if (pl.len) {\n          lc -= pl.len;\n          getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n          c = getCodeReturn.c;\n          lc = getCodeReturn.lc;\n        } else {\n          throw 'hufDecode issues';\n        }\n      }\n\n      return true;\n    }\n\n    function hufUncompress(uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw) {\n      var outOffset = {\n        value: 0\n      };\n      var initialInOffset = inOffset.value;\n      var im = parseUint32(inDataView, inOffset);\n      var iM = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n      var nBits = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n\n      if (im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE) {\n        throw 'Something wrong with HUF_ENCSIZE';\n      }\n\n      var freq = new Array(HUF_ENCSIZE);\n      var hdec = new Array(HUF_DECSIZE);\n      hufClearDecTable(hdec);\n      var ni = nCompressed - (inOffset.value - initialInOffset);\n      hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, freq);\n\n      if (nBits > 8 * (nCompressed - (inOffset.value - initialInOffset))) {\n        throw 'Something wrong with hufUncompress';\n      }\n\n      hufBuildDecTable(freq, im, iM, hdec);\n      hufDecode(freq, hdec, uInt8Array, inDataView, inOffset, nBits, iM, nRaw, outBuffer, outOffset);\n    }\n\n    function applyLut(lut, data, nData) {\n      for (var i = 0; i < nData; ++i) {\n        data[i] = lut[data[i]];\n      }\n    }\n\n    function predictor(source) {\n      for (var t = 1; t < source.length; t++) {\n        var d = source[t - 1] + source[t] - 128;\n        source[t] = d;\n      }\n    }\n\n    function interleaveScalar(source, out) {\n      var t1 = 0;\n      var t2 = Math.floor((source.length + 1) / 2);\n      var s = 0;\n      var stop = source.length - 1;\n\n      while (true) {\n        if (s > stop) break;\n        out[s++] = source[t1++];\n        if (s > stop) break;\n        out[s++] = source[t2++];\n      }\n    }\n\n    function decodeRunLength(source) {\n      var size = source.byteLength;\n      var out = new Array();\n      var p = 0;\n      var reader = new DataView(source);\n\n      while (size > 0) {\n        var l = reader.getInt8(p++);\n\n        if (l < 0) {\n          var count = -l;\n          size -= count + 1;\n\n          for (var i = 0; i < count; i++) {\n            out.push(reader.getUint8(p++));\n          }\n        } else {\n          var count = l;\n          size -= 2;\n          var value = reader.getUint8(p++);\n\n          for (var i = 0; i < count + 1; i++) {\n            out.push(value);\n          }\n        }\n      }\n\n      return out;\n    }\n\n    function lossyDctDecode(cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer) {\n      var dataView = new DataView(outBuffer.buffer);\n      var width = channelData[cscSet.idx[0]].width;\n      var height = channelData[cscSet.idx[0]].height;\n      var numComp = 3;\n      var numFullBlocksX = Math.floor(width / 8.0);\n      var numBlocksX = Math.ceil(width / 8.0);\n      var numBlocksY = Math.ceil(height / 8.0);\n      var leftoverX = width - (numBlocksX - 1) * 8;\n      var leftoverY = height - (numBlocksY - 1) * 8;\n      var currAcComp = {\n        value: 0\n      };\n      var currDcComp = new Array(numComp);\n      var dctData = new Array(numComp);\n      var halfZigBlock = new Array(numComp);\n      var rowBlock = new Array(numComp);\n      var rowOffsets = new Array(numComp);\n\n      for (let comp = 0; comp < numComp; ++comp) {\n        rowOffsets[comp] = rowPtrs[cscSet.idx[comp]];\n        currDcComp[comp] = comp < 1 ? 0 : currDcComp[comp - 1] + numBlocksX * numBlocksY;\n        dctData[comp] = new Float32Array(64);\n        halfZigBlock[comp] = new Uint16Array(64);\n        rowBlock[comp] = new Uint16Array(numBlocksX * 64);\n      }\n\n      for (let blocky = 0; blocky < numBlocksY; ++blocky) {\n        var maxY = 8;\n        if (blocky == numBlocksY - 1) maxY = leftoverY;\n        var maxX = 8;\n\n        for (let blockx = 0; blockx < numBlocksX; ++blockx) {\n          if (blockx == numBlocksX - 1) maxX = leftoverX;\n\n          for (let comp = 0; comp < numComp; ++comp) {\n            halfZigBlock[comp].fill(0); // set block DC component\n\n            halfZigBlock[comp][0] = dcBuffer[currDcComp[comp]++]; // set block AC components\n\n            unRleAC(currAcComp, acBuffer, halfZigBlock[comp]); // UnZigZag block to float\n\n            unZigZag(halfZigBlock[comp], dctData[comp]); // decode float dct\n\n            dctInverse(dctData[comp]);\n          }\n\n          {\n            csc709Inverse(dctData);\n          }\n\n          for (let comp = 0; comp < numComp; ++comp) {\n            convertToHalf(dctData[comp], rowBlock[comp], blockx * 64);\n          }\n        } // blockx\n\n\n        let offset = 0;\n\n        for (let comp = 0; comp < numComp; ++comp) {\n          const type = channelData[cscSet.idx[comp]].type;\n\n          for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n            offset = rowOffsets[comp][y];\n\n            for (let blockx = 0; blockx < numFullBlocksX; ++blockx) {\n              const src = blockx * 64 + (y & 0x7) * 8;\n              dataView.setUint16(offset + 0 * INT16_SIZE * type, rowBlock[comp][src + 0], true);\n              dataView.setUint16(offset + 1 * INT16_SIZE * type, rowBlock[comp][src + 1], true);\n              dataView.setUint16(offset + 2 * INT16_SIZE * type, rowBlock[comp][src + 2], true);\n              dataView.setUint16(offset + 3 * INT16_SIZE * type, rowBlock[comp][src + 3], true);\n              dataView.setUint16(offset + 4 * INT16_SIZE * type, rowBlock[comp][src + 4], true);\n              dataView.setUint16(offset + 5 * INT16_SIZE * type, rowBlock[comp][src + 5], true);\n              dataView.setUint16(offset + 6 * INT16_SIZE * type, rowBlock[comp][src + 6], true);\n              dataView.setUint16(offset + 7 * INT16_SIZE * type, rowBlock[comp][src + 7], true);\n              offset += 8 * INT16_SIZE * type;\n            }\n          } // handle partial X blocks\n\n\n          if (numFullBlocksX != numBlocksX) {\n            for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n              const offset = rowOffsets[comp][y] + 8 * numFullBlocksX * INT16_SIZE * type;\n              const src = numFullBlocksX * 64 + (y & 0x7) * 8;\n\n              for (let x = 0; x < maxX; ++x) {\n                dataView.setUint16(offset + x * INT16_SIZE * type, rowBlock[comp][src + x], true);\n              }\n            }\n          }\n        } // comp\n\n      } // blocky\n\n\n      var halfRow = new Uint16Array(width);\n      var dataView = new DataView(outBuffer.buffer); // convert channels back to float, if needed\n\n      for (var comp = 0; comp < numComp; ++comp) {\n        channelData[cscSet.idx[comp]].decoded = true;\n        var type = channelData[cscSet.idx[comp]].type;\n        if (channelData[comp].type != 2) continue;\n\n        for (var y = 0; y < height; ++y) {\n          const offset = rowOffsets[comp][y];\n\n          for (var x = 0; x < width; ++x) {\n            halfRow[x] = dataView.getUint16(offset + x * INT16_SIZE * type, true);\n          }\n\n          for (var x = 0; x < width; ++x) {\n            dataView.setFloat32(offset + x * INT16_SIZE * type, decodeFloat16(halfRow[x]), true);\n          }\n        }\n      }\n    }\n\n    function unRleAC(currAcComp, acBuffer, halfZigBlock) {\n      var acValue;\n      var dctComp = 1;\n\n      while (dctComp < 64) {\n        acValue = acBuffer[currAcComp.value];\n\n        if (acValue == 0xff00) {\n          dctComp = 64;\n        } else if (acValue >> 8 == 0xff) {\n          dctComp += acValue & 0xff;\n        } else {\n          halfZigBlock[dctComp] = acValue;\n          dctComp++;\n        }\n\n        currAcComp.value++;\n      }\n    }\n\n    function unZigZag(src, dst) {\n      dst[0] = decodeFloat16(src[0]);\n      dst[1] = decodeFloat16(src[1]);\n      dst[2] = decodeFloat16(src[5]);\n      dst[3] = decodeFloat16(src[6]);\n      dst[4] = decodeFloat16(src[14]);\n      dst[5] = decodeFloat16(src[15]);\n      dst[6] = decodeFloat16(src[27]);\n      dst[7] = decodeFloat16(src[28]);\n      dst[8] = decodeFloat16(src[2]);\n      dst[9] = decodeFloat16(src[4]);\n      dst[10] = decodeFloat16(src[7]);\n      dst[11] = decodeFloat16(src[13]);\n      dst[12] = decodeFloat16(src[16]);\n      dst[13] = decodeFloat16(src[26]);\n      dst[14] = decodeFloat16(src[29]);\n      dst[15] = decodeFloat16(src[42]);\n      dst[16] = decodeFloat16(src[3]);\n      dst[17] = decodeFloat16(src[8]);\n      dst[18] = decodeFloat16(src[12]);\n      dst[19] = decodeFloat16(src[17]);\n      dst[20] = decodeFloat16(src[25]);\n      dst[21] = decodeFloat16(src[30]);\n      dst[22] = decodeFloat16(src[41]);\n      dst[23] = decodeFloat16(src[43]);\n      dst[24] = decodeFloat16(src[9]);\n      dst[25] = decodeFloat16(src[11]);\n      dst[26] = decodeFloat16(src[18]);\n      dst[27] = decodeFloat16(src[24]);\n      dst[28] = decodeFloat16(src[31]);\n      dst[29] = decodeFloat16(src[40]);\n      dst[30] = decodeFloat16(src[44]);\n      dst[31] = decodeFloat16(src[53]);\n      dst[32] = decodeFloat16(src[10]);\n      dst[33] = decodeFloat16(src[19]);\n      dst[34] = decodeFloat16(src[23]);\n      dst[35] = decodeFloat16(src[32]);\n      dst[36] = decodeFloat16(src[39]);\n      dst[37] = decodeFloat16(src[45]);\n      dst[38] = decodeFloat16(src[52]);\n      dst[39] = decodeFloat16(src[54]);\n      dst[40] = decodeFloat16(src[20]);\n      dst[41] = decodeFloat16(src[22]);\n      dst[42] = decodeFloat16(src[33]);\n      dst[43] = decodeFloat16(src[38]);\n      dst[44] = decodeFloat16(src[46]);\n      dst[45] = decodeFloat16(src[51]);\n      dst[46] = decodeFloat16(src[55]);\n      dst[47] = decodeFloat16(src[60]);\n      dst[48] = decodeFloat16(src[21]);\n      dst[49] = decodeFloat16(src[34]);\n      dst[50] = decodeFloat16(src[37]);\n      dst[51] = decodeFloat16(src[47]);\n      dst[52] = decodeFloat16(src[50]);\n      dst[53] = decodeFloat16(src[56]);\n      dst[54] = decodeFloat16(src[59]);\n      dst[55] = decodeFloat16(src[61]);\n      dst[56] = decodeFloat16(src[35]);\n      dst[57] = decodeFloat16(src[36]);\n      dst[58] = decodeFloat16(src[48]);\n      dst[59] = decodeFloat16(src[49]);\n      dst[60] = decodeFloat16(src[57]);\n      dst[61] = decodeFloat16(src[58]);\n      dst[62] = decodeFloat16(src[62]);\n      dst[63] = decodeFloat16(src[63]);\n    }\n\n    function dctInverse(data) {\n      const a = 0.5 * Math.cos(3.14159 / 4.0);\n      const b = 0.5 * Math.cos(3.14159 / 16.0);\n      const c = 0.5 * Math.cos(3.14159 / 8.0);\n      const d = 0.5 * Math.cos(3.0 * 3.14159 / 16.0);\n      const e = 0.5 * Math.cos(5.0 * 3.14159 / 16.0);\n      const f = 0.5 * Math.cos(3.0 * 3.14159 / 8.0);\n      const g = 0.5 * Math.cos(7.0 * 3.14159 / 16.0);\n      var alpha = new Array(4);\n      var beta = new Array(4);\n      var theta = new Array(4);\n      var gamma = new Array(4);\n\n      for (var row = 0; row < 8; ++row) {\n        var rowPtr = row * 8;\n        alpha[0] = c * data[rowPtr + 2];\n        alpha[1] = f * data[rowPtr + 2];\n        alpha[2] = c * data[rowPtr + 6];\n        alpha[3] = f * data[rowPtr + 6];\n        beta[0] = b * data[rowPtr + 1] + d * data[rowPtr + 3] + e * data[rowPtr + 5] + g * data[rowPtr + 7];\n        beta[1] = d * data[rowPtr + 1] - g * data[rowPtr + 3] - b * data[rowPtr + 5] - e * data[rowPtr + 7];\n        beta[2] = e * data[rowPtr + 1] - b * data[rowPtr + 3] + g * data[rowPtr + 5] + d * data[rowPtr + 7];\n        beta[3] = g * data[rowPtr + 1] - e * data[rowPtr + 3] + d * data[rowPtr + 5] - b * data[rowPtr + 7];\n        theta[0] = a * (data[rowPtr + 0] + data[rowPtr + 4]);\n        theta[3] = a * (data[rowPtr + 0] - data[rowPtr + 4]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[rowPtr + 0] = gamma[0] + beta[0];\n        data[rowPtr + 1] = gamma[1] + beta[1];\n        data[rowPtr + 2] = gamma[2] + beta[2];\n        data[rowPtr + 3] = gamma[3] + beta[3];\n        data[rowPtr + 4] = gamma[3] - beta[3];\n        data[rowPtr + 5] = gamma[2] - beta[2];\n        data[rowPtr + 6] = gamma[1] - beta[1];\n        data[rowPtr + 7] = gamma[0] - beta[0];\n      }\n\n      for (var column = 0; column < 8; ++column) {\n        alpha[0] = c * data[16 + column];\n        alpha[1] = f * data[16 + column];\n        alpha[2] = c * data[48 + column];\n        alpha[3] = f * data[48 + column];\n        beta[0] = b * data[8 + column] + d * data[24 + column] + e * data[40 + column] + g * data[56 + column];\n        beta[1] = d * data[8 + column] - g * data[24 + column] - b * data[40 + column] - e * data[56 + column];\n        beta[2] = e * data[8 + column] - b * data[24 + column] + g * data[40 + column] + d * data[56 + column];\n        beta[3] = g * data[8 + column] - e * data[24 + column] + d * data[40 + column] - b * data[56 + column];\n        theta[0] = a * (data[column] + data[32 + column]);\n        theta[3] = a * (data[column] - data[32 + column]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[0 + column] = gamma[0] + beta[0];\n        data[8 + column] = gamma[1] + beta[1];\n        data[16 + column] = gamma[2] + beta[2];\n        data[24 + column] = gamma[3] + beta[3];\n        data[32 + column] = gamma[3] - beta[3];\n        data[40 + column] = gamma[2] - beta[2];\n        data[48 + column] = gamma[1] - beta[1];\n        data[56 + column] = gamma[0] - beta[0];\n      }\n    }\n\n    function csc709Inverse(data) {\n      for (var i = 0; i < 64; ++i) {\n        var y = data[0][i];\n        var cb = data[1][i];\n        var cr = data[2][i];\n        data[0][i] = y + 1.5747 * cr;\n        data[1][i] = y - 0.1873 * cb - 0.4682 * cr;\n        data[2][i] = y + 1.8556 * cb;\n      }\n    }\n\n    function convertToHalf(src, dst, idx) {\n      for (var i = 0; i < 64; ++i) {\n        dst[idx + i] = DataUtils.toHalfFloat(toLinear(src[i]));\n      }\n    }\n\n    function toLinear(float) {\n      if (float <= 1) {\n        return Math.sign(float) * Math.pow(Math.abs(float), 2.2);\n      } else {\n        return Math.sign(float) * Math.pow(logBase, Math.abs(float) - 1.0);\n      }\n    }\n\n    function uncompressRAW(info) {\n      return new DataView(info.array.buffer, info.offset.value, info.size);\n    }\n\n    function uncompressRLE(info) {\n      var compressed = info.viewer.buffer.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = new Uint8Array(decodeRunLength(compressed));\n      var tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer); // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressZIP(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = unzlibSync(compressed); // eslint-disable-line no-undef\n\n      var tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer); // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressPIZ(info) {\n      var inDataView = info.viewer;\n      var inOffset = {\n        value: info.offset.value\n      };\n      var outBuffer = new Uint16Array(info.width * info.scanlineBlockSize * (info.channels * info.type));\n      var bitmap = new Uint8Array(BITMAP_SIZE); // Setup channel info\n\n      var outBufferEnd = 0;\n      var pizChannelData = new Array(info.channels);\n\n      for (var i = 0; i < info.channels; i++) {\n        pizChannelData[i] = {};\n        pizChannelData[i]['start'] = outBufferEnd;\n        pizChannelData[i]['end'] = pizChannelData[i]['start'];\n        pizChannelData[i]['nx'] = info.width;\n        pizChannelData[i]['ny'] = info.lines;\n        pizChannelData[i]['size'] = info.type;\n        outBufferEnd += pizChannelData[i].nx * pizChannelData[i].ny * pizChannelData[i].size;\n      } // Read range compression data\n\n\n      var minNonZero = parseUint16(inDataView, inOffset);\n      var maxNonZero = parseUint16(inDataView, inOffset);\n\n      if (maxNonZero >= BITMAP_SIZE) {\n        throw 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE';\n      }\n\n      if (minNonZero <= maxNonZero) {\n        for (var i = 0; i < maxNonZero - minNonZero + 1; i++) {\n          bitmap[i + minNonZero] = parseUint8(inDataView, inOffset);\n        }\n      } // Reverse LUT\n\n\n      var lut = new Uint16Array(USHORT_RANGE);\n      var maxValue = reverseLutFromBitmap(bitmap, lut);\n      var length = parseUint32(inDataView, inOffset); // Huffman decoding\n\n      hufUncompress(info.array, inDataView, inOffset, length, outBuffer, outBufferEnd); // Wavelet decoding\n\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = pizChannelData[i];\n\n        for (var j = 0; j < pizChannelData[i].size; ++j) {\n          wav2Decode(outBuffer, cd.start + j, cd.nx, cd.size, cd.ny, cd.nx * cd.size, maxValue);\n        }\n      } // Expand the pixel data to their original range\n\n\n      applyLut(lut, outBuffer, outBufferEnd); // Rearrange the pixel data into the format expected by the caller.\n\n      var tmpOffset = 0;\n      var tmpBuffer = new Uint8Array(outBuffer.buffer.byteLength);\n\n      for (var y = 0; y < info.lines; y++) {\n        for (var c = 0; c < info.channels; c++) {\n          var cd = pizChannelData[c];\n          var n = cd.nx * cd.size;\n          var cp = new Uint8Array(outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE);\n          tmpBuffer.set(cp, tmpOffset);\n          tmpOffset += n * INT16_SIZE;\n          cd.end += n;\n        }\n      }\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressPXR(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = unzlibSync(compressed); // eslint-disable-line no-undef\n\n      const sz = info.lines * info.channels * info.width;\n      const tmpBuffer = info.type == 1 ? new Uint16Array(sz) : new Uint32Array(sz);\n      let tmpBufferEnd = 0;\n      let writePtr = 0;\n      const ptr = new Array(4);\n\n      for (let y = 0; y < info.lines; y++) {\n        for (let c = 0; c < info.channels; c++) {\n          let pixel = 0;\n\n          switch (info.type) {\n            case 1:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              tmpBufferEnd = ptr[1] + info.width;\n\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 8 | rawBuffer[ptr[1]++];\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n\n              break;\n\n            case 2:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              ptr[2] = ptr[1] + info.width;\n              tmpBufferEnd = ptr[2] + info.width;\n\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 24 | rawBuffer[ptr[1]++] << 16 | rawBuffer[ptr[2]++] << 8;\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n\n              break;\n          }\n        }\n      }\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressDWA(info) {\n      var inDataView = info.viewer;\n      var inOffset = {\n        value: info.offset.value\n      };\n      var outBuffer = new Uint8Array(info.width * info.lines * (info.channels * info.type * INT16_SIZE)); // Read compression header information\n\n      var dwaHeader = {\n        version: parseInt64(inDataView, inOffset),\n        unknownUncompressedSize: parseInt64(inDataView, inOffset),\n        unknownCompressedSize: parseInt64(inDataView, inOffset),\n        acCompressedSize: parseInt64(inDataView, inOffset),\n        dcCompressedSize: parseInt64(inDataView, inOffset),\n        rleCompressedSize: parseInt64(inDataView, inOffset),\n        rleUncompressedSize: parseInt64(inDataView, inOffset),\n        rleRawSize: parseInt64(inDataView, inOffset),\n        totalAcUncompressedCount: parseInt64(inDataView, inOffset),\n        totalDcUncompressedCount: parseInt64(inDataView, inOffset),\n        acCompression: parseInt64(inDataView, inOffset)\n      };\n\n      if (dwaHeader.version < 2) {\n        throw 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported';\n      } // Read channel ruleset information\n\n\n      var channelRules = new Array();\n      var ruleSize = parseUint16(inDataView, inOffset) - INT16_SIZE;\n\n      while (ruleSize > 0) {\n        var name = parseNullTerminatedString(inDataView.buffer, inOffset);\n        var value = parseUint8(inDataView, inOffset);\n        var compression = value >> 2 & 3;\n        var csc = (value >> 4) - 1;\n        var index = new Int8Array([csc])[0];\n        var type = parseUint8(inDataView, inOffset);\n        channelRules.push({\n          name: name,\n          index: index,\n          type: type,\n          compression: compression\n        });\n        ruleSize -= name.length + 3;\n      } // Classify channels\n\n\n      var channels = EXRHeader.channels;\n      var channelData = new Array(info.channels);\n\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = channelData[i] = {};\n        var channel = channels[i];\n        cd.name = channel.name;\n        cd.compression = UNKNOWN;\n        cd.decoded = false;\n        cd.type = channel.pixelType;\n        cd.pLinear = channel.pLinear;\n        cd.width = info.width;\n        cd.height = info.lines;\n      }\n\n      var cscSet = {\n        idx: new Array(3)\n      };\n\n      for (var offset = 0; offset < info.channels; ++offset) {\n        var cd = channelData[offset];\n\n        for (var i = 0; i < channelRules.length; ++i) {\n          var rule = channelRules[i];\n\n          if (cd.name == rule.name) {\n            cd.compression = rule.compression;\n\n            if (rule.index >= 0) {\n              cscSet.idx[rule.index] = offset;\n            }\n\n            cd.offset = offset;\n          }\n        }\n      } // Read DCT - AC component data\n\n\n      if (dwaHeader.acCompressedSize > 0) {\n        switch (dwaHeader.acCompression) {\n          case STATIC_HUFFMAN:\n            var acBuffer = new Uint16Array(dwaHeader.totalAcUncompressedCount);\n            hufUncompress(info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount);\n            break;\n\n          case DEFLATE:\n            var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount);\n            var data = unzlibSync(compressed); // eslint-disable-line no-undef\n\n            var acBuffer = new Uint16Array(data.buffer);\n            inOffset.value += dwaHeader.totalAcUncompressedCount;\n            break;\n        }\n      } // Read DCT - DC component data\n\n\n      if (dwaHeader.dcCompressedSize > 0) {\n        var zlibInfo = {\n          array: info.array,\n          offset: inOffset,\n          size: dwaHeader.dcCompressedSize\n        };\n        var dcBuffer = new Uint16Array(uncompressZIP(zlibInfo).buffer);\n        inOffset.value += dwaHeader.dcCompressedSize;\n      } // Read RLE compressed data\n\n\n      if (dwaHeader.rleRawSize > 0) {\n        var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.rleCompressedSize);\n        var data = unzlibSync(compressed); // eslint-disable-line no-undef\n\n        var rleBuffer = decodeRunLength(data.buffer);\n        inOffset.value += dwaHeader.rleCompressedSize;\n      } // Prepare outbuffer data offset\n\n\n      var outBufferEnd = 0;\n      var rowOffsets = new Array(channelData.length);\n\n      for (var i = 0; i < rowOffsets.length; ++i) {\n        rowOffsets[i] = new Array();\n      }\n\n      for (var y = 0; y < info.lines; ++y) {\n        for (var chan = 0; chan < channelData.length; ++chan) {\n          rowOffsets[chan].push(outBufferEnd);\n          outBufferEnd += channelData[chan].width * info.type * INT16_SIZE;\n        }\n      } // Lossy DCT decode RGB channels\n\n\n      lossyDctDecode(cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer); // Decode other channels\n\n      for (var i = 0; i < channelData.length; ++i) {\n        var cd = channelData[i];\n        if (cd.decoded) continue;\n\n        switch (cd.compression) {\n          case RLE:\n            var row = 0;\n            var rleOffset = 0;\n\n            for (var y = 0; y < info.lines; ++y) {\n              var rowOffsetBytes = rowOffsets[i][row];\n\n              for (var x = 0; x < cd.width; ++x) {\n                for (var byte = 0; byte < INT16_SIZE * cd.type; ++byte) {\n                  outBuffer[rowOffsetBytes++] = rleBuffer[rleOffset + byte * cd.width * cd.height];\n                }\n\n                rleOffset++;\n              }\n\n              row++;\n            }\n\n            break;\n\n          case LOSSY_DCT: // skip\n\n          default:\n            throw 'EXRLoader.parse: unsupported channel compression';\n        }\n      }\n\n      return new DataView(outBuffer.buffer);\n    }\n\n    function parseNullTerminatedString(buffer, offset) {\n      var uintBuffer = new Uint8Array(buffer);\n      var endOffset = 0;\n\n      while (uintBuffer[offset.value + endOffset] != 0) {\n        endOffset += 1;\n      }\n\n      var stringValue = new TextDecoder().decode(uintBuffer.slice(offset.value, offset.value + endOffset));\n      offset.value = offset.value + endOffset + 1;\n      return stringValue;\n    }\n\n    function parseFixedLengthString(buffer, offset, size) {\n      var stringValue = new TextDecoder().decode(new Uint8Array(buffer).slice(offset.value, offset.value + size));\n      offset.value = offset.value + size;\n      return stringValue;\n    }\n\n    function parseRational(dataView, offset) {\n      var x = parseInt32(dataView, offset);\n      var y = parseUint32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseTimecode(dataView, offset) {\n      var x = parseUint32(dataView, offset);\n      var y = parseUint32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseInt32(dataView, offset) {\n      var Int32 = dataView.getInt32(offset.value, true);\n      offset.value = offset.value + INT32_SIZE;\n      return Int32;\n    }\n\n    function parseUint32(dataView, offset) {\n      var Uint32 = dataView.getUint32(offset.value, true);\n      offset.value = offset.value + INT32_SIZE;\n      return Uint32;\n    }\n\n    function parseUint8Array(uInt8Array, offset) {\n      var Uint8 = uInt8Array[offset.value];\n      offset.value = offset.value + INT8_SIZE;\n      return Uint8;\n    }\n\n    function parseUint8(dataView, offset) {\n      var Uint8 = dataView.getUint8(offset.value);\n      offset.value = offset.value + INT8_SIZE;\n      return Uint8;\n    }\n\n    const parseInt64 = function (dataView, offset) {\n      let int;\n\n      if ('getBigInt64' in DataView.prototype) {\n        int = Number(dataView.getBigInt64(offset.value, true));\n      } else {\n        int = dataView.getUint32(offset.value + 4, true) + Number(dataView.getUint32(offset.value, true) << 32);\n      }\n\n      offset.value += ULONG_SIZE;\n      return int;\n    };\n\n    function parseFloat32(dataView, offset) {\n      var float = dataView.getFloat32(offset.value, true);\n      offset.value += FLOAT32_SIZE;\n      return float;\n    }\n\n    function decodeFloat32(dataView, offset) {\n      return DataUtils.toHalfFloat(parseFloat32(dataView, offset));\n    } // https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n\n\n    function decodeFloat16(binary) {\n      var exponent = (binary & 0x7c00) >> 10,\n          fraction = binary & 0x03ff;\n      return (binary >> 15 ? -1 : 1) * (exponent ? exponent === 0x1f ? fraction ? NaN : Infinity : Math.pow(2, exponent - 15) * (1 + fraction / 0x400) : 6.103515625e-5 * (fraction / 0x400));\n    }\n\n    function parseUint16(dataView, offset) {\n      var Uint16 = dataView.getUint16(offset.value, true);\n      offset.value += INT16_SIZE;\n      return Uint16;\n    }\n\n    function parseFloat16(buffer, offset) {\n      return decodeFloat16(parseUint16(buffer, offset));\n    }\n\n    function parseChlist(dataView, buffer, offset, size) {\n      var startOffset = offset.value;\n      var channels = [];\n\n      while (offset.value < startOffset + size - 1) {\n        var name = parseNullTerminatedString(buffer, offset);\n        var pixelType = parseInt32(dataView, offset);\n        var pLinear = parseUint8(dataView, offset);\n        offset.value += 3; // reserved, three chars\n\n        var xSampling = parseInt32(dataView, offset);\n        var ySampling = parseInt32(dataView, offset);\n        channels.push({\n          name: name,\n          pixelType: pixelType,\n          pLinear: pLinear,\n          xSampling: xSampling,\n          ySampling: ySampling\n        });\n      }\n\n      offset.value += 1;\n      return channels;\n    }\n\n    function parseChromaticities(dataView, offset) {\n      var redX = parseFloat32(dataView, offset);\n      var redY = parseFloat32(dataView, offset);\n      var greenX = parseFloat32(dataView, offset);\n      var greenY = parseFloat32(dataView, offset);\n      var blueX = parseFloat32(dataView, offset);\n      var blueY = parseFloat32(dataView, offset);\n      var whiteX = parseFloat32(dataView, offset);\n      var whiteY = parseFloat32(dataView, offset);\n      return {\n        redX: redX,\n        redY: redY,\n        greenX: greenX,\n        greenY: greenY,\n        blueX: blueX,\n        blueY: blueY,\n        whiteX: whiteX,\n        whiteY: whiteY\n      };\n    }\n\n    function parseCompression(dataView, offset) {\n      var compressionCodes = ['NO_COMPRESSION', 'RLE_COMPRESSION', 'ZIPS_COMPRESSION', 'ZIP_COMPRESSION', 'PIZ_COMPRESSION', 'PXR24_COMPRESSION', 'B44_COMPRESSION', 'B44A_COMPRESSION', 'DWAA_COMPRESSION', 'DWAB_COMPRESSION'];\n      var compression = parseUint8(dataView, offset);\n      return compressionCodes[compression];\n    }\n\n    function parseBox2i(dataView, offset) {\n      var xMin = parseUint32(dataView, offset);\n      var yMin = parseUint32(dataView, offset);\n      var xMax = parseUint32(dataView, offset);\n      var yMax = parseUint32(dataView, offset);\n      return {\n        xMin: xMin,\n        yMin: yMin,\n        xMax: xMax,\n        yMax: yMax\n      };\n    }\n\n    function parseLineOrder(dataView, offset) {\n      var lineOrders = ['INCREASING_Y'];\n      var lineOrder = parseUint8(dataView, offset);\n      return lineOrders[lineOrder];\n    }\n\n    function parseV2f(dataView, offset) {\n      var x = parseFloat32(dataView, offset);\n      var y = parseFloat32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseV3f(dataView, offset) {\n      var x = parseFloat32(dataView, offset);\n      var y = parseFloat32(dataView, offset);\n      var z = parseFloat32(dataView, offset);\n      return [x, y, z];\n    }\n\n    function parseValue(dataView, buffer, offset, type, size) {\n      if (type === 'string' || type === 'stringvector' || type === 'iccProfile') {\n        return parseFixedLengthString(buffer, offset, size);\n      } else if (type === 'chlist') {\n        return parseChlist(dataView, buffer, offset, size);\n      } else if (type === 'chromaticities') {\n        return parseChromaticities(dataView, offset);\n      } else if (type === 'compression') {\n        return parseCompression(dataView, offset);\n      } else if (type === 'box2i') {\n        return parseBox2i(dataView, offset);\n      } else if (type === 'lineOrder') {\n        return parseLineOrder(dataView, offset);\n      } else if (type === 'float') {\n        return parseFloat32(dataView, offset);\n      } else if (type === 'v2f') {\n        return parseV2f(dataView, offset);\n      } else if (type === 'v3f') {\n        return parseV3f(dataView, offset);\n      } else if (type === 'int') {\n        return parseInt32(dataView, offset);\n      } else if (type === 'rational') {\n        return parseRational(dataView, offset);\n      } else if (type === 'timecode') {\n        return parseTimecode(dataView, offset);\n      } else if (type === 'preview') {\n        offset.value += size;\n        return 'skipped';\n      } else {\n        offset.value += size;\n        return undefined;\n      }\n    }\n\n    function parseHeader(dataView, buffer, offset) {\n      const EXRHeader = {};\n\n      if (dataView.getUint32(0, true) != 20000630) {\n        // magic\n        throw \"THREE.EXRLoader: provided file doesn't appear to be in OpenEXR format.\";\n      }\n\n      EXRHeader.version = dataView.getUint8(4);\n      const spec = dataView.getUint8(5); // fullMask\n\n      EXRHeader.spec = {\n        singleTile: !!(spec & 2),\n        longName: !!(spec & 4),\n        deepFormat: !!(spec & 8),\n        multiPart: !!(spec & 16)\n      }; // start of header\n\n      offset.value = 8; // start at 8 - after pre-amble\n\n      var keepReading = true;\n\n      while (keepReading) {\n        var attributeName = parseNullTerminatedString(buffer, offset);\n\n        if (attributeName == 0) {\n          keepReading = false;\n        } else {\n          var attributeType = parseNullTerminatedString(buffer, offset);\n          var attributeSize = parseUint32(dataView, offset);\n          var attributeValue = parseValue(dataView, buffer, offset, attributeType, attributeSize);\n\n          if (attributeValue === undefined) {\n            console.warn(`EXRLoader.parse: skipped unknown header attribute type \\'${attributeType}\\'.`);\n          } else {\n            EXRHeader[attributeName] = attributeValue;\n          }\n        }\n      }\n\n      if (spec != 0) {\n        console.error('EXRHeader:', EXRHeader);\n        throw 'THREE.EXRLoader: provided file is currently unsupported.';\n      }\n\n      return EXRHeader;\n    }\n\n    function setupDecoder(EXRHeader, dataView, uInt8Array, offset, outputType) {\n      const EXRDecoder = {\n        size: 0,\n        viewer: dataView,\n        array: uInt8Array,\n        offset: offset,\n        width: EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1,\n        height: EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1,\n        channels: EXRHeader.channels.length,\n        bytesPerLine: null,\n        lines: null,\n        inputSize: null,\n        type: EXRHeader.channels[0].pixelType,\n        uncompress: null,\n        getter: null,\n        format: null,\n        encoding: null\n      };\n\n      switch (EXRHeader.compression) {\n        case 'NO_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressRAW;\n          break;\n\n        case 'RLE_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressRLE;\n          break;\n\n        case 'ZIPS_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressZIP;\n          break;\n\n        case 'ZIP_COMPRESSION':\n          EXRDecoder.lines = 16;\n          EXRDecoder.uncompress = uncompressZIP;\n          break;\n\n        case 'PIZ_COMPRESSION':\n          EXRDecoder.lines = 32;\n          EXRDecoder.uncompress = uncompressPIZ;\n          break;\n\n        case 'PXR24_COMPRESSION':\n          EXRDecoder.lines = 16;\n          EXRDecoder.uncompress = uncompressPXR;\n          break;\n\n        case 'DWAA_COMPRESSION':\n          EXRDecoder.lines = 32;\n          EXRDecoder.uncompress = uncompressDWA;\n          break;\n\n        case 'DWAB_COMPRESSION':\n          EXRDecoder.lines = 256;\n          EXRDecoder.uncompress = uncompressDWA;\n          break;\n\n        default:\n          throw 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported';\n      }\n\n      EXRDecoder.scanlineBlockSize = EXRDecoder.lines;\n\n      if (EXRDecoder.type == 1) {\n        // half\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder.getter = parseFloat16;\n            EXRDecoder.inputSize = INT16_SIZE;\n            break;\n\n          case HalfFloatType:\n            EXRDecoder.getter = parseUint16;\n            EXRDecoder.inputSize = INT16_SIZE;\n            break;\n        }\n      } else if (EXRDecoder.type == 2) {\n        // float\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder.getter = parseFloat32;\n            EXRDecoder.inputSize = FLOAT32_SIZE;\n            break;\n\n          case HalfFloatType:\n            EXRDecoder.getter = decodeFloat32;\n            EXRDecoder.inputSize = FLOAT32_SIZE;\n        }\n      } else {\n        throw 'EXRLoader.parse: unsupported pixelType ' + EXRDecoder.type + ' for ' + EXRHeader.compression + '.';\n      }\n\n      EXRDecoder.blockCount = (EXRHeader.dataWindow.yMax + 1) / EXRDecoder.scanlineBlockSize;\n\n      for (var i = 0; i < EXRDecoder.blockCount; i++) parseInt64(dataView, offset); // scanlineOffset\n      // we should be passed the scanline offset table, ready to start reading pixel data.\n      // RGB images will be converted to RGBA format, preventing software emulation in select devices.\n\n\n      EXRDecoder.outputChannels = EXRDecoder.channels == 3 ? 4 : EXRDecoder.channels;\n      const size = EXRDecoder.width * EXRDecoder.height * EXRDecoder.outputChannels;\n\n      switch (outputType) {\n        case FloatType:\n          EXRDecoder.byteArray = new Float32Array(size); // Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n\n          if (EXRDecoder.channels < EXRDecoder.outputChannels) EXRDecoder.byteArray.fill(1, 0, size);\n          break;\n\n        case HalfFloatType:\n          EXRDecoder.byteArray = new Uint16Array(size);\n          if (EXRDecoder.channels < EXRDecoder.outputChannels) EXRDecoder.byteArray.fill(0x3c00, 0, size); // Uint16Array holds half float data, 0x3C00 is 1\n\n          break;\n\n        default:\n          console.error('THREE.EXRLoader: unsupported type: ', outputType);\n          break;\n      }\n\n      EXRDecoder.bytesPerLine = EXRDecoder.width * EXRDecoder.inputSize * EXRDecoder.channels;\n\n      if (EXRDecoder.outputChannels == 4) {\n        EXRDecoder.format = RGBAFormat;\n        EXRDecoder.encoding = LinearEncoding;\n      } else {\n        EXRDecoder.format = RedFormat;\n        EXRDecoder.encoding = LinearEncoding;\n      }\n\n      return EXRDecoder;\n    } // start parsing file [START]\n\n\n    const bufferDataView = new DataView(buffer);\n    const uInt8Array = new Uint8Array(buffer);\n    const offset = {\n      value: 0\n    }; // get header information and validate format.\n\n    const EXRHeader = parseHeader(bufferDataView, buffer, offset); // get input compression information and prepare decoding.\n\n    const EXRDecoder = setupDecoder(EXRHeader, bufferDataView, uInt8Array, offset, this.type);\n    const tmpOffset = {\n      value: 0\n    };\n    const channelOffsets = {\n      R: 0,\n      G: 1,\n      B: 2,\n      A: 3,\n      Y: 0\n    };\n\n    for (let scanlineBlockIdx = 0; scanlineBlockIdx < EXRDecoder.height / EXRDecoder.scanlineBlockSize; scanlineBlockIdx++) {\n      const line = parseUint32(bufferDataView, offset); // line_no\n\n      EXRDecoder.size = parseUint32(bufferDataView, offset); // data_len\n\n      EXRDecoder.lines = line + EXRDecoder.scanlineBlockSize > EXRDecoder.height ? EXRDecoder.height - line : EXRDecoder.scanlineBlockSize;\n      const isCompressed = EXRDecoder.size < EXRDecoder.lines * EXRDecoder.bytesPerLine;\n      const viewer = isCompressed ? EXRDecoder.uncompress(EXRDecoder) : uncompressRAW(EXRDecoder);\n      offset.value += EXRDecoder.size;\n\n      for (let line_y = 0; line_y < EXRDecoder.scanlineBlockSize; line_y++) {\n        const true_y = line_y + scanlineBlockIdx * EXRDecoder.scanlineBlockSize;\n        if (true_y >= EXRDecoder.height) break;\n\n        for (let channelID = 0; channelID < EXRDecoder.channels; channelID++) {\n          const cOff = channelOffsets[EXRHeader.channels[channelID].name];\n\n          for (let x = 0; x < EXRDecoder.width; x++) {\n            tmpOffset.value = (line_y * (EXRDecoder.channels * EXRDecoder.width) + channelID * EXRDecoder.width + x) * EXRDecoder.inputSize;\n            const outIndex = (EXRDecoder.height - 1 - true_y) * (EXRDecoder.width * EXRDecoder.outputChannels) + x * EXRDecoder.outputChannels + cOff;\n            EXRDecoder.byteArray[outIndex] = EXRDecoder.getter(viewer, tmpOffset);\n          }\n        }\n      }\n    }\n\n    return {\n      header: EXRHeader,\n      width: EXRDecoder.width,\n      height: EXRDecoder.height,\n      data: EXRDecoder.byteArray,\n      format: EXRDecoder.format,\n      encoding: EXRDecoder.encoding,\n      type: this.type\n    };\n  }\n\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      texture.encoding = texData.encoding;\n      texture.minFilter = LinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.flipY = false;\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n\n}\n\nexport { EXRLoader };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/loaders/EXRLoader.js"],"names":["DataTextureLoader","HalfFloatType","FloatType","RGBAFormat","LinearEncoding","RedFormat","LinearFilter","DataUtils","unzlibSync","EXRLoader","constructor","manager","type","parse","buffer","USHORT_RANGE","BITMAP_SIZE","HUF_ENCBITS","HUF_DECBITS","HUF_ENCSIZE","HUF_DECSIZE","HUF_DECMASK","NBITS","A_OFFSET","MOD_MASK","SHORT_ZEROCODE_RUN","LONG_ZEROCODE_RUN","SHORTEST_LONG_RUN","ULONG_SIZE","FLOAT32_SIZE","INT32_SIZE","INT16_SIZE","INT8_SIZE","STATIC_HUFFMAN","DEFLATE","UNKNOWN","LOSSY_DCT","RLE","logBase","Math","pow","reverseLutFromBitmap","bitmap","lut","k","i","n","hufClearDecTable","hdec","len","lit","p","getBitsReturn","l","c","lc","getBits","nBits","uInt8Array","inOffset","parseUint8Array","hufTableBuffer","Array","hufCanonicalCodeTable","hcode","nc","hufUnpackEncTable","inDataView","ni","im","iM","value","zerun","hufLength","code","hufCode","hufBuildDecTable","hdecod","pl","plOffset","getCharReturn","getChar","getCodeReturn","getCode","po","rlc","outBuffer","outBufferOffset","outBufferEndOffset","cs","Uint8Array","s","UInt16","Int16","ref","wdec14Return","a","b","wdec14","h","ls","hs","hi","ai","as","bs","wdec16","m","d","bb","aa","wav2Decode","j","nx","ox","ny","oy","mx","w14","p2","py","ey","oy1","oy2","ox1","ox2","i00","i01","i10","i11","px","ex","p01","p10","p11","hufDecode","encodingTable","decodingTable","no","outOffset","inOffsetEnd","trunc","index","hufUncompress","nCompressed","nRaw","initialInOffset","parseUint32","freq","applyLut","data","nData","predictor","source","t","length","interleaveScalar","out","t1","t2","floor","stop","decodeRunLength","size","byteLength","reader","DataView","getInt8","count","push","getUint8","lossyDctDecode","cscSet","rowPtrs","channelData","acBuffer","dcBuffer","dataView","width","idx","height","numComp","numFullBlocksX","numBlocksX","ceil","numBlocksY","leftoverX","leftoverY","currAcComp","currDcComp","dctData","halfZigBlock","rowBlock","rowOffsets","comp","Float32Array","Uint16Array","blocky","maxY","maxX","blockx","fill","unRleAC","unZigZag","dctInverse","csc709Inverse","convertToHalf","offset","y","src","setUint16","x","halfRow","decoded","getUint16","setFloat32","decodeFloat16","acValue","dctComp","dst","cos","e","f","g","alpha","beta","theta","gamma","row","rowPtr","column","cb","cr","toHalfFloat","toLinear","float","sign","abs","uncompressRAW","info","array","uncompressRLE","compressed","viewer","slice","rawBuffer","tmpBuffer","uncompressZIP","uncompressPIZ","scanlineBlockSize","channels","outBufferEnd","pizChannelData","lines","minNonZero","parseUint16","maxNonZero","parseUint8","maxValue","cd","start","tmpOffset","cp","end","set","uncompressPXR","sz","Uint32Array","tmpBufferEnd","writePtr","ptr","pixel","diff","uncompressDWA","dwaHeader","version","parseInt64","unknownUncompressedSize","unknownCompressedSize","acCompressedSize","dcCompressedSize","rleCompressedSize","rleUncompressedSize","rleRawSize","totalAcUncompressedCount","totalDcUncompressedCount","acCompression","EXRHeader","compression","channelRules","ruleSize","name","parseNullTerminatedString","csc","Int8Array","channel","pixelType","pLinear","rule","zlibInfo","rleBuffer","chan","rleOffset","rowOffsetBytes","byte","uintBuffer","endOffset","stringValue","TextDecoder","decode","parseFixedLengthString","parseRational","parseInt32","parseTimecode","Int32","getInt32","Uint32","getUint32","Uint8","int","prototype","Number","getBigInt64","parseFloat32","getFloat32","decodeFloat32","binary","exponent","fraction","NaN","Infinity","Uint16","parseFloat16","parseChlist","startOffset","xSampling","ySampling","parseChromaticities","redX","redY","greenX","greenY","blueX","blueY","whiteX","whiteY","parseCompression","compressionCodes","parseBox2i","xMin","yMin","xMax","yMax","parseLineOrder","lineOrders","lineOrder","parseV2f","parseV3f","z","parseValue","undefined","parseHeader","spec","singleTile","longName","deepFormat","multiPart","keepReading","attributeName","attributeType","attributeSize","attributeValue","console","warn","error","setupDecoder","outputType","EXRDecoder","dataWindow","bytesPerLine","inputSize","uncompress","getter","format","encoding","blockCount","outputChannels","byteArray","bufferDataView","channelOffsets","R","G","B","A","Y","scanlineBlockIdx","line","isCompressed","line_y","true_y","channelID","cOff","outIndex","header","setDataType","load","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","minFilter","magFilter","generateMipmaps","flipY"],"mappings":"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","sourcesContent":["import { DataTextureLoader, HalfFloatType, FloatType, RGBAFormat, LinearEncoding, RedFormat, LinearFilter, DataUtils } from 'three';\nimport { unzlibSync } from 'fflate';\n\n/**\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation, so I have preserved their copyright notices.\n */\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n// // End of OpenEXR license -------------------------------------------------\n\nclass EXRLoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  }\n\n  parse(buffer) {\n    const USHORT_RANGE = 1 << 16;\n    const BITMAP_SIZE = USHORT_RANGE >> 3;\n    const HUF_ENCBITS = 16; // literal (value) bit length\n\n    const HUF_DECBITS = 14; // decoding bit size (>= 8)\n\n    const HUF_ENCSIZE = (1 << HUF_ENCBITS) + 1; // encoding table size\n\n    const HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\n\n    const HUF_DECMASK = HUF_DECSIZE - 1;\n    const NBITS = 16;\n    const A_OFFSET = 1 << NBITS - 1;\n    const MOD_MASK = (1 << NBITS) - 1;\n    const SHORT_ZEROCODE_RUN = 59;\n    const LONG_ZEROCODE_RUN = 63;\n    const SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n    const ULONG_SIZE = 8;\n    const FLOAT32_SIZE = 4;\n    const INT32_SIZE = 4;\n    const INT16_SIZE = 2;\n    const INT8_SIZE = 1;\n    const STATIC_HUFFMAN = 0;\n    const DEFLATE = 1;\n    const UNKNOWN = 0;\n    const LOSSY_DCT = 1;\n    const RLE = 2;\n    const logBase = Math.pow(2.7182818, 2.2);\n\n    function reverseLutFromBitmap(bitmap, lut) {\n      var k = 0;\n\n      for (var i = 0; i < USHORT_RANGE; ++i) {\n        if (i == 0 || bitmap[i >> 3] & 1 << (i & 7)) {\n          lut[k++] = i;\n        }\n      }\n\n      var n = k - 1;\n\n      while (k < USHORT_RANGE) lut[k++] = 0;\n\n      return n;\n    }\n\n    function hufClearDecTable(hdec) {\n      for (var i = 0; i < HUF_DECSIZE; i++) {\n        hdec[i] = {};\n        hdec[i].len = 0;\n        hdec[i].lit = 0;\n        hdec[i].p = null;\n      }\n    }\n\n    const getBitsReturn = {\n      l: 0,\n      c: 0,\n      lc: 0\n    };\n\n    function getBits(nBits, c, lc, uInt8Array, inOffset) {\n      while (lc < nBits) {\n        c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n        lc += 8;\n      }\n\n      lc -= nBits;\n      getBitsReturn.l = c >> lc & (1 << nBits) - 1;\n      getBitsReturn.c = c;\n      getBitsReturn.lc = lc;\n    }\n\n    const hufTableBuffer = new Array(59);\n\n    function hufCanonicalCodeTable(hcode) {\n      for (var i = 0; i <= 58; ++i) hufTableBuffer[i] = 0;\n\n      for (var i = 0; i < HUF_ENCSIZE; ++i) hufTableBuffer[hcode[i]] += 1;\n\n      var c = 0;\n\n      for (var i = 58; i > 0; --i) {\n        var nc = c + hufTableBuffer[i] >> 1;\n        hufTableBuffer[i] = c;\n        c = nc;\n      }\n\n      for (var i = 0; i < HUF_ENCSIZE; ++i) {\n        var l = hcode[i];\n        if (l > 0) hcode[i] = l | hufTableBuffer[l]++ << 6;\n      }\n    }\n\n    function hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, hcode) {\n      var p = inOffset;\n      var c = 0;\n      var lc = 0;\n\n      for (; im <= iM; im++) {\n        if (p.value - inOffset.value > ni) return false;\n        getBits(6, c, lc, uInt8Array, p);\n        var l = getBitsReturn.l;\n        c = getBitsReturn.c;\n        lc = getBitsReturn.lc;\n        hcode[im] = l;\n\n        if (l == LONG_ZEROCODE_RUN) {\n          if (p.value - inOffset.value > ni) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n\n          getBits(8, c, lc, uInt8Array, p);\n          var zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n          c = getBitsReturn.c;\n          lc = getBitsReturn.lc;\n\n          if (im + zerun > iM + 1) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n\n          while (zerun--) hcode[im++] = 0;\n\n          im--;\n        } else if (l >= SHORT_ZEROCODE_RUN) {\n          var zerun = l - SHORT_ZEROCODE_RUN + 2;\n\n          if (im + zerun > iM + 1) {\n            throw 'Something wrong with hufUnpackEncTable';\n          }\n\n          while (zerun--) hcode[im++] = 0;\n\n          im--;\n        }\n      }\n\n      hufCanonicalCodeTable(hcode);\n    }\n\n    function hufLength(code) {\n      return code & 63;\n    }\n\n    function hufCode(code) {\n      return code >> 6;\n    }\n\n    function hufBuildDecTable(hcode, im, iM, hdecod) {\n      for (; im <= iM; im++) {\n        var c = hufCode(hcode[im]);\n        var l = hufLength(hcode[im]);\n\n        if (c >> l) {\n          throw 'Invalid table entry';\n        }\n\n        if (l > HUF_DECBITS) {\n          var pl = hdecod[c >> l - HUF_DECBITS];\n\n          if (pl.len) {\n            throw 'Invalid table entry';\n          }\n\n          pl.lit++;\n\n          if (pl.p) {\n            var p = pl.p;\n            pl.p = new Array(pl.lit);\n\n            for (var i = 0; i < pl.lit - 1; ++i) {\n              pl.p[i] = p[i];\n            }\n          } else {\n            pl.p = new Array(1);\n          }\n\n          pl.p[pl.lit - 1] = im;\n        } else if (l) {\n          var plOffset = 0;\n\n          for (var i = 1 << HUF_DECBITS - l; i > 0; i--) {\n            var pl = hdecod[(c << HUF_DECBITS - l) + plOffset];\n\n            if (pl.len || pl.p) {\n              throw 'Invalid table entry';\n            }\n\n            pl.len = l;\n            pl.lit = im;\n            plOffset++;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    const getCharReturn = {\n      c: 0,\n      lc: 0\n    };\n\n    function getChar(c, lc, uInt8Array, inOffset) {\n      c = c << 8 | parseUint8Array(uInt8Array, inOffset);\n      lc += 8;\n      getCharReturn.c = c;\n      getCharReturn.lc = lc;\n    }\n\n    const getCodeReturn = {\n      c: 0,\n      lc: 0\n    };\n\n    function getCode(po, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outBufferOffset, outBufferEndOffset) {\n      if (po == rlc) {\n        if (lc < 8) {\n          getChar(c, lc, uInt8Array, inOffset);\n          c = getCharReturn.c;\n          lc = getCharReturn.lc;\n        }\n\n        lc -= 8;\n        var cs = c >> lc;\n        var cs = new Uint8Array([cs])[0];\n\n        if (outBufferOffset.value + cs > outBufferEndOffset) {\n          return false;\n        }\n\n        var s = outBuffer[outBufferOffset.value - 1];\n\n        while (cs-- > 0) {\n          outBuffer[outBufferOffset.value++] = s;\n        }\n      } else if (outBufferOffset.value < outBufferEndOffset) {\n        outBuffer[outBufferOffset.value++] = po;\n      } else {\n        return false;\n      }\n\n      getCodeReturn.c = c;\n      getCodeReturn.lc = lc;\n    }\n\n    function UInt16(value) {\n      return value & 0xffff;\n    }\n\n    function Int16(value) {\n      var ref = UInt16(value);\n      return ref > 0x7fff ? ref - 0x10000 : ref;\n    }\n\n    const wdec14Return = {\n      a: 0,\n      b: 0\n    };\n\n    function wdec14(l, h) {\n      var ls = Int16(l);\n      var hs = Int16(h);\n      var hi = hs;\n      var ai = ls + (hi & 1) + (hi >> 1);\n      var as = ai;\n      var bs = ai - hi;\n      wdec14Return.a = as;\n      wdec14Return.b = bs;\n    }\n\n    function wdec16(l, h) {\n      var m = UInt16(l);\n      var d = UInt16(h);\n      var bb = m - (d >> 1) & MOD_MASK;\n      var aa = d + bb - A_OFFSET & MOD_MASK;\n      wdec14Return.a = aa;\n      wdec14Return.b = bb;\n    }\n\n    function wav2Decode(buffer, j, nx, ox, ny, oy, mx) {\n      var w14 = mx < 1 << 14;\n      var n = nx > ny ? ny : nx;\n      var p = 1;\n      var p2;\n\n      while (p <= n) p <<= 1;\n\n      p >>= 1;\n      p2 = p;\n      p >>= 1;\n\n      while (p >= 1) {\n        var py = 0;\n        var ey = py + oy * (ny - p2);\n        var oy1 = oy * p;\n        var oy2 = oy * p2;\n        var ox1 = ox * p;\n        var ox2 = ox * p2;\n        var i00, i01, i10, i11;\n\n        for (; py <= ey; py += oy2) {\n          var px = py;\n          var ex = py + ox * (nx - p2);\n\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1;\n            var p10 = px + oy1;\n            var p11 = p10 + ox1;\n\n            if (w14) {\n              wdec14(buffer[px + j], buffer[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec14(buffer[p01 + j], buffer[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec14(i00, i01);\n              buffer[px + j] = wdec14Return.a;\n              buffer[p01 + j] = wdec14Return.b;\n              wdec14(i10, i11);\n              buffer[p10 + j] = wdec14Return.a;\n              buffer[p11 + j] = wdec14Return.b;\n            } else {\n              wdec16(buffer[px + j], buffer[p10 + j]);\n              i00 = wdec14Return.a;\n              i10 = wdec14Return.b;\n              wdec16(buffer[p01 + j], buffer[p11 + j]);\n              i01 = wdec14Return.a;\n              i11 = wdec14Return.b;\n              wdec16(i00, i01);\n              buffer[px + j] = wdec14Return.a;\n              buffer[p01 + j] = wdec14Return.b;\n              wdec16(i10, i11);\n              buffer[p10 + j] = wdec14Return.a;\n              buffer[p11 + j] = wdec14Return.b;\n            }\n          }\n\n          if (nx & p) {\n            var p10 = px + oy1;\n            if (w14) wdec14(buffer[px + j], buffer[p10 + j]);else wdec16(buffer[px + j], buffer[p10 + j]);\n            i00 = wdec14Return.a;\n            buffer[p10 + j] = wdec14Return.b;\n            buffer[px + j] = i00;\n          }\n        }\n\n        if (ny & p) {\n          var px = py;\n          var ex = py + ox * (nx - p2);\n\n          for (; px <= ex; px += ox2) {\n            var p01 = px + ox1;\n            if (w14) wdec14(buffer[px + j], buffer[p01 + j]);else wdec16(buffer[px + j], buffer[p01 + j]);\n            i00 = wdec14Return.a;\n            buffer[p01 + j] = wdec14Return.b;\n            buffer[px + j] = i00;\n          }\n        }\n\n        p2 = p;\n        p >>= 1;\n      }\n\n      return py;\n    }\n\n    function hufDecode(encodingTable, decodingTable, uInt8Array, inDataView, inOffset, ni, rlc, no, outBuffer, outOffset) {\n      var c = 0;\n      var lc = 0;\n      var outBufferEndOffset = no;\n      var inOffsetEnd = Math.trunc(inOffset.value + (ni + 7) / 8);\n\n      while (inOffset.value < inOffsetEnd) {\n        getChar(c, lc, uInt8Array, inOffset);\n        c = getCharReturn.c;\n        lc = getCharReturn.lc;\n\n        while (lc >= HUF_DECBITS) {\n          var index = c >> lc - HUF_DECBITS & HUF_DECMASK;\n          var pl = decodingTable[index];\n\n          if (pl.len) {\n            lc -= pl.len;\n            getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n            c = getCodeReturn.c;\n            lc = getCodeReturn.lc;\n          } else {\n            if (!pl.p) {\n              throw 'hufDecode issues';\n            }\n\n            var j;\n\n            for (j = 0; j < pl.lit; j++) {\n              var l = hufLength(encodingTable[pl.p[j]]);\n\n              while (lc < l && inOffset.value < inOffsetEnd) {\n                getChar(c, lc, uInt8Array, inOffset);\n                c = getCharReturn.c;\n                lc = getCharReturn.lc;\n              }\n\n              if (lc >= l) {\n                if (hufCode(encodingTable[pl.p[j]]) == (c >> lc - l & (1 << l) - 1)) {\n                  lc -= l;\n                  getCode(pl.p[j], rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n                  c = getCodeReturn.c;\n                  lc = getCodeReturn.lc;\n                  break;\n                }\n              }\n            }\n\n            if (j == pl.lit) {\n              throw 'hufDecode issues';\n            }\n          }\n        }\n      }\n\n      var i = 8 - ni & 7;\n      c >>= i;\n      lc -= i;\n\n      while (lc > 0) {\n        var pl = decodingTable[c << HUF_DECBITS - lc & HUF_DECMASK];\n\n        if (pl.len) {\n          lc -= pl.len;\n          getCode(pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset);\n          c = getCodeReturn.c;\n          lc = getCodeReturn.lc;\n        } else {\n          throw 'hufDecode issues';\n        }\n      }\n\n      return true;\n    }\n\n    function hufUncompress(uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw) {\n      var outOffset = {\n        value: 0\n      };\n      var initialInOffset = inOffset.value;\n      var im = parseUint32(inDataView, inOffset);\n      var iM = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n      var nBits = parseUint32(inDataView, inOffset);\n      inOffset.value += 4;\n\n      if (im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE) {\n        throw 'Something wrong with HUF_ENCSIZE';\n      }\n\n      var freq = new Array(HUF_ENCSIZE);\n      var hdec = new Array(HUF_DECSIZE);\n      hufClearDecTable(hdec);\n      var ni = nCompressed - (inOffset.value - initialInOffset);\n      hufUnpackEncTable(uInt8Array, inDataView, inOffset, ni, im, iM, freq);\n\n      if (nBits > 8 * (nCompressed - (inOffset.value - initialInOffset))) {\n        throw 'Something wrong with hufUncompress';\n      }\n\n      hufBuildDecTable(freq, im, iM, hdec);\n      hufDecode(freq, hdec, uInt8Array, inDataView, inOffset, nBits, iM, nRaw, outBuffer, outOffset);\n    }\n\n    function applyLut(lut, data, nData) {\n      for (var i = 0; i < nData; ++i) {\n        data[i] = lut[data[i]];\n      }\n    }\n\n    function predictor(source) {\n      for (var t = 1; t < source.length; t++) {\n        var d = source[t - 1] + source[t] - 128;\n        source[t] = d;\n      }\n    }\n\n    function interleaveScalar(source, out) {\n      var t1 = 0;\n      var t2 = Math.floor((source.length + 1) / 2);\n      var s = 0;\n      var stop = source.length - 1;\n\n      while (true) {\n        if (s > stop) break;\n        out[s++] = source[t1++];\n        if (s > stop) break;\n        out[s++] = source[t2++];\n      }\n    }\n\n    function decodeRunLength(source) {\n      var size = source.byteLength;\n      var out = new Array();\n      var p = 0;\n      var reader = new DataView(source);\n\n      while (size > 0) {\n        var l = reader.getInt8(p++);\n\n        if (l < 0) {\n          var count = -l;\n          size -= count + 1;\n\n          for (var i = 0; i < count; i++) {\n            out.push(reader.getUint8(p++));\n          }\n        } else {\n          var count = l;\n          size -= 2;\n          var value = reader.getUint8(p++);\n\n          for (var i = 0; i < count + 1; i++) {\n            out.push(value);\n          }\n        }\n      }\n\n      return out;\n    }\n\n    function lossyDctDecode(cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer) {\n      var dataView = new DataView(outBuffer.buffer);\n      var width = channelData[cscSet.idx[0]].width;\n      var height = channelData[cscSet.idx[0]].height;\n      var numComp = 3;\n      var numFullBlocksX = Math.floor(width / 8.0);\n      var numBlocksX = Math.ceil(width / 8.0);\n      var numBlocksY = Math.ceil(height / 8.0);\n      var leftoverX = width - (numBlocksX - 1) * 8;\n      var leftoverY = height - (numBlocksY - 1) * 8;\n      var currAcComp = {\n        value: 0\n      };\n      var currDcComp = new Array(numComp);\n      var dctData = new Array(numComp);\n      var halfZigBlock = new Array(numComp);\n      var rowBlock = new Array(numComp);\n      var rowOffsets = new Array(numComp);\n\n      for (let comp = 0; comp < numComp; ++comp) {\n        rowOffsets[comp] = rowPtrs[cscSet.idx[comp]];\n        currDcComp[comp] = comp < 1 ? 0 : currDcComp[comp - 1] + numBlocksX * numBlocksY;\n        dctData[comp] = new Float32Array(64);\n        halfZigBlock[comp] = new Uint16Array(64);\n        rowBlock[comp] = new Uint16Array(numBlocksX * 64);\n      }\n\n      for (let blocky = 0; blocky < numBlocksY; ++blocky) {\n        var maxY = 8;\n        if (blocky == numBlocksY - 1) maxY = leftoverY;\n        var maxX = 8;\n\n        for (let blockx = 0; blockx < numBlocksX; ++blockx) {\n          if (blockx == numBlocksX - 1) maxX = leftoverX;\n\n          for (let comp = 0; comp < numComp; ++comp) {\n            halfZigBlock[comp].fill(0); // set block DC component\n\n            halfZigBlock[comp][0] = dcBuffer[currDcComp[comp]++]; // set block AC components\n\n            unRleAC(currAcComp, acBuffer, halfZigBlock[comp]); // UnZigZag block to float\n\n            unZigZag(halfZigBlock[comp], dctData[comp]); // decode float dct\n\n            dctInverse(dctData[comp]);\n          }\n\n          {\n            csc709Inverse(dctData);\n          }\n\n          for (let comp = 0; comp < numComp; ++comp) {\n            convertToHalf(dctData[comp], rowBlock[comp], blockx * 64);\n          }\n        } // blockx\n\n\n        let offset = 0;\n\n        for (let comp = 0; comp < numComp; ++comp) {\n          const type = channelData[cscSet.idx[comp]].type;\n\n          for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n            offset = rowOffsets[comp][y];\n\n            for (let blockx = 0; blockx < numFullBlocksX; ++blockx) {\n              const src = blockx * 64 + (y & 0x7) * 8;\n              dataView.setUint16(offset + 0 * INT16_SIZE * type, rowBlock[comp][src + 0], true);\n              dataView.setUint16(offset + 1 * INT16_SIZE * type, rowBlock[comp][src + 1], true);\n              dataView.setUint16(offset + 2 * INT16_SIZE * type, rowBlock[comp][src + 2], true);\n              dataView.setUint16(offset + 3 * INT16_SIZE * type, rowBlock[comp][src + 3], true);\n              dataView.setUint16(offset + 4 * INT16_SIZE * type, rowBlock[comp][src + 4], true);\n              dataView.setUint16(offset + 5 * INT16_SIZE * type, rowBlock[comp][src + 5], true);\n              dataView.setUint16(offset + 6 * INT16_SIZE * type, rowBlock[comp][src + 6], true);\n              dataView.setUint16(offset + 7 * INT16_SIZE * type, rowBlock[comp][src + 7], true);\n              offset += 8 * INT16_SIZE * type;\n            }\n          } // handle partial X blocks\n\n\n          if (numFullBlocksX != numBlocksX) {\n            for (let y = 8 * blocky; y < 8 * blocky + maxY; ++y) {\n              const offset = rowOffsets[comp][y] + 8 * numFullBlocksX * INT16_SIZE * type;\n              const src = numFullBlocksX * 64 + (y & 0x7) * 8;\n\n              for (let x = 0; x < maxX; ++x) {\n                dataView.setUint16(offset + x * INT16_SIZE * type, rowBlock[comp][src + x], true);\n              }\n            }\n          }\n        } // comp\n\n      } // blocky\n\n\n      var halfRow = new Uint16Array(width);\n      var dataView = new DataView(outBuffer.buffer); // convert channels back to float, if needed\n\n      for (var comp = 0; comp < numComp; ++comp) {\n        channelData[cscSet.idx[comp]].decoded = true;\n        var type = channelData[cscSet.idx[comp]].type;\n        if (channelData[comp].type != 2) continue;\n\n        for (var y = 0; y < height; ++y) {\n          const offset = rowOffsets[comp][y];\n\n          for (var x = 0; x < width; ++x) {\n            halfRow[x] = dataView.getUint16(offset + x * INT16_SIZE * type, true);\n          }\n\n          for (var x = 0; x < width; ++x) {\n            dataView.setFloat32(offset + x * INT16_SIZE * type, decodeFloat16(halfRow[x]), true);\n          }\n        }\n      }\n    }\n\n    function unRleAC(currAcComp, acBuffer, halfZigBlock) {\n      var acValue;\n      var dctComp = 1;\n\n      while (dctComp < 64) {\n        acValue = acBuffer[currAcComp.value];\n\n        if (acValue == 0xff00) {\n          dctComp = 64;\n        } else if (acValue >> 8 == 0xff) {\n          dctComp += acValue & 0xff;\n        } else {\n          halfZigBlock[dctComp] = acValue;\n          dctComp++;\n        }\n\n        currAcComp.value++;\n      }\n    }\n\n    function unZigZag(src, dst) {\n      dst[0] = decodeFloat16(src[0]);\n      dst[1] = decodeFloat16(src[1]);\n      dst[2] = decodeFloat16(src[5]);\n      dst[3] = decodeFloat16(src[6]);\n      dst[4] = decodeFloat16(src[14]);\n      dst[5] = decodeFloat16(src[15]);\n      dst[6] = decodeFloat16(src[27]);\n      dst[7] = decodeFloat16(src[28]);\n      dst[8] = decodeFloat16(src[2]);\n      dst[9] = decodeFloat16(src[4]);\n      dst[10] = decodeFloat16(src[7]);\n      dst[11] = decodeFloat16(src[13]);\n      dst[12] = decodeFloat16(src[16]);\n      dst[13] = decodeFloat16(src[26]);\n      dst[14] = decodeFloat16(src[29]);\n      dst[15] = decodeFloat16(src[42]);\n      dst[16] = decodeFloat16(src[3]);\n      dst[17] = decodeFloat16(src[8]);\n      dst[18] = decodeFloat16(src[12]);\n      dst[19] = decodeFloat16(src[17]);\n      dst[20] = decodeFloat16(src[25]);\n      dst[21] = decodeFloat16(src[30]);\n      dst[22] = decodeFloat16(src[41]);\n      dst[23] = decodeFloat16(src[43]);\n      dst[24] = decodeFloat16(src[9]);\n      dst[25] = decodeFloat16(src[11]);\n      dst[26] = decodeFloat16(src[18]);\n      dst[27] = decodeFloat16(src[24]);\n      dst[28] = decodeFloat16(src[31]);\n      dst[29] = decodeFloat16(src[40]);\n      dst[30] = decodeFloat16(src[44]);\n      dst[31] = decodeFloat16(src[53]);\n      dst[32] = decodeFloat16(src[10]);\n      dst[33] = decodeFloat16(src[19]);\n      dst[34] = decodeFloat16(src[23]);\n      dst[35] = decodeFloat16(src[32]);\n      dst[36] = decodeFloat16(src[39]);\n      dst[37] = decodeFloat16(src[45]);\n      dst[38] = decodeFloat16(src[52]);\n      dst[39] = decodeFloat16(src[54]);\n      dst[40] = decodeFloat16(src[20]);\n      dst[41] = decodeFloat16(src[22]);\n      dst[42] = decodeFloat16(src[33]);\n      dst[43] = decodeFloat16(src[38]);\n      dst[44] = decodeFloat16(src[46]);\n      dst[45] = decodeFloat16(src[51]);\n      dst[46] = decodeFloat16(src[55]);\n      dst[47] = decodeFloat16(src[60]);\n      dst[48] = decodeFloat16(src[21]);\n      dst[49] = decodeFloat16(src[34]);\n      dst[50] = decodeFloat16(src[37]);\n      dst[51] = decodeFloat16(src[47]);\n      dst[52] = decodeFloat16(src[50]);\n      dst[53] = decodeFloat16(src[56]);\n      dst[54] = decodeFloat16(src[59]);\n      dst[55] = decodeFloat16(src[61]);\n      dst[56] = decodeFloat16(src[35]);\n      dst[57] = decodeFloat16(src[36]);\n      dst[58] = decodeFloat16(src[48]);\n      dst[59] = decodeFloat16(src[49]);\n      dst[60] = decodeFloat16(src[57]);\n      dst[61] = decodeFloat16(src[58]);\n      dst[62] = decodeFloat16(src[62]);\n      dst[63] = decodeFloat16(src[63]);\n    }\n\n    function dctInverse(data) {\n      const a = 0.5 * Math.cos(3.14159 / 4.0);\n      const b = 0.5 * Math.cos(3.14159 / 16.0);\n      const c = 0.5 * Math.cos(3.14159 / 8.0);\n      const d = 0.5 * Math.cos(3.0 * 3.14159 / 16.0);\n      const e = 0.5 * Math.cos(5.0 * 3.14159 / 16.0);\n      const f = 0.5 * Math.cos(3.0 * 3.14159 / 8.0);\n      const g = 0.5 * Math.cos(7.0 * 3.14159 / 16.0);\n      var alpha = new Array(4);\n      var beta = new Array(4);\n      var theta = new Array(4);\n      var gamma = new Array(4);\n\n      for (var row = 0; row < 8; ++row) {\n        var rowPtr = row * 8;\n        alpha[0] = c * data[rowPtr + 2];\n        alpha[1] = f * data[rowPtr + 2];\n        alpha[2] = c * data[rowPtr + 6];\n        alpha[3] = f * data[rowPtr + 6];\n        beta[0] = b * data[rowPtr + 1] + d * data[rowPtr + 3] + e * data[rowPtr + 5] + g * data[rowPtr + 7];\n        beta[1] = d * data[rowPtr + 1] - g * data[rowPtr + 3] - b * data[rowPtr + 5] - e * data[rowPtr + 7];\n        beta[2] = e * data[rowPtr + 1] - b * data[rowPtr + 3] + g * data[rowPtr + 5] + d * data[rowPtr + 7];\n        beta[3] = g * data[rowPtr + 1] - e * data[rowPtr + 3] + d * data[rowPtr + 5] - b * data[rowPtr + 7];\n        theta[0] = a * (data[rowPtr + 0] + data[rowPtr + 4]);\n        theta[3] = a * (data[rowPtr + 0] - data[rowPtr + 4]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[rowPtr + 0] = gamma[0] + beta[0];\n        data[rowPtr + 1] = gamma[1] + beta[1];\n        data[rowPtr + 2] = gamma[2] + beta[2];\n        data[rowPtr + 3] = gamma[3] + beta[3];\n        data[rowPtr + 4] = gamma[3] - beta[3];\n        data[rowPtr + 5] = gamma[2] - beta[2];\n        data[rowPtr + 6] = gamma[1] - beta[1];\n        data[rowPtr + 7] = gamma[0] - beta[0];\n      }\n\n      for (var column = 0; column < 8; ++column) {\n        alpha[0] = c * data[16 + column];\n        alpha[1] = f * data[16 + column];\n        alpha[2] = c * data[48 + column];\n        alpha[3] = f * data[48 + column];\n        beta[0] = b * data[8 + column] + d * data[24 + column] + e * data[40 + column] + g * data[56 + column];\n        beta[1] = d * data[8 + column] - g * data[24 + column] - b * data[40 + column] - e * data[56 + column];\n        beta[2] = e * data[8 + column] - b * data[24 + column] + g * data[40 + column] + d * data[56 + column];\n        beta[3] = g * data[8 + column] - e * data[24 + column] + d * data[40 + column] - b * data[56 + column];\n        theta[0] = a * (data[column] + data[32 + column]);\n        theta[3] = a * (data[column] - data[32 + column]);\n        theta[1] = alpha[0] + alpha[3];\n        theta[2] = alpha[1] - alpha[2];\n        gamma[0] = theta[0] + theta[1];\n        gamma[1] = theta[3] + theta[2];\n        gamma[2] = theta[3] - theta[2];\n        gamma[3] = theta[0] - theta[1];\n        data[0 + column] = gamma[0] + beta[0];\n        data[8 + column] = gamma[1] + beta[1];\n        data[16 + column] = gamma[2] + beta[2];\n        data[24 + column] = gamma[3] + beta[3];\n        data[32 + column] = gamma[3] - beta[3];\n        data[40 + column] = gamma[2] - beta[2];\n        data[48 + column] = gamma[1] - beta[1];\n        data[56 + column] = gamma[0] - beta[0];\n      }\n    }\n\n    function csc709Inverse(data) {\n      for (var i = 0; i < 64; ++i) {\n        var y = data[0][i];\n        var cb = data[1][i];\n        var cr = data[2][i];\n        data[0][i] = y + 1.5747 * cr;\n        data[1][i] = y - 0.1873 * cb - 0.4682 * cr;\n        data[2][i] = y + 1.8556 * cb;\n      }\n    }\n\n    function convertToHalf(src, dst, idx) {\n      for (var i = 0; i < 64; ++i) {\n        dst[idx + i] = DataUtils.toHalfFloat(toLinear(src[i]));\n      }\n    }\n\n    function toLinear(float) {\n      if (float <= 1) {\n        return Math.sign(float) * Math.pow(Math.abs(float), 2.2);\n      } else {\n        return Math.sign(float) * Math.pow(logBase, Math.abs(float) - 1.0);\n      }\n    }\n\n    function uncompressRAW(info) {\n      return new DataView(info.array.buffer, info.offset.value, info.size);\n    }\n\n    function uncompressRLE(info) {\n      var compressed = info.viewer.buffer.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = new Uint8Array(decodeRunLength(compressed));\n      var tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer); // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressZIP(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = unzlibSync(compressed); // eslint-disable-line no-undef\n\n      var tmpBuffer = new Uint8Array(rawBuffer.length);\n      predictor(rawBuffer); // revert predictor\n\n      interleaveScalar(rawBuffer, tmpBuffer); // interleave pixels\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressPIZ(info) {\n      var inDataView = info.viewer;\n      var inOffset = {\n        value: info.offset.value\n      };\n      var outBuffer = new Uint16Array(info.width * info.scanlineBlockSize * (info.channels * info.type));\n      var bitmap = new Uint8Array(BITMAP_SIZE); // Setup channel info\n\n      var outBufferEnd = 0;\n      var pizChannelData = new Array(info.channels);\n\n      for (var i = 0; i < info.channels; i++) {\n        pizChannelData[i] = {};\n        pizChannelData[i]['start'] = outBufferEnd;\n        pizChannelData[i]['end'] = pizChannelData[i]['start'];\n        pizChannelData[i]['nx'] = info.width;\n        pizChannelData[i]['ny'] = info.lines;\n        pizChannelData[i]['size'] = info.type;\n        outBufferEnd += pizChannelData[i].nx * pizChannelData[i].ny * pizChannelData[i].size;\n      } // Read range compression data\n\n\n      var minNonZero = parseUint16(inDataView, inOffset);\n      var maxNonZero = parseUint16(inDataView, inOffset);\n\n      if (maxNonZero >= BITMAP_SIZE) {\n        throw 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE';\n      }\n\n      if (minNonZero <= maxNonZero) {\n        for (var i = 0; i < maxNonZero - minNonZero + 1; i++) {\n          bitmap[i + minNonZero] = parseUint8(inDataView, inOffset);\n        }\n      } // Reverse LUT\n\n\n      var lut = new Uint16Array(USHORT_RANGE);\n      var maxValue = reverseLutFromBitmap(bitmap, lut);\n      var length = parseUint32(inDataView, inOffset); // Huffman decoding\n\n      hufUncompress(info.array, inDataView, inOffset, length, outBuffer, outBufferEnd); // Wavelet decoding\n\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = pizChannelData[i];\n\n        for (var j = 0; j < pizChannelData[i].size; ++j) {\n          wav2Decode(outBuffer, cd.start + j, cd.nx, cd.size, cd.ny, cd.nx * cd.size, maxValue);\n        }\n      } // Expand the pixel data to their original range\n\n\n      applyLut(lut, outBuffer, outBufferEnd); // Rearrange the pixel data into the format expected by the caller.\n\n      var tmpOffset = 0;\n      var tmpBuffer = new Uint8Array(outBuffer.buffer.byteLength);\n\n      for (var y = 0; y < info.lines; y++) {\n        for (var c = 0; c < info.channels; c++) {\n          var cd = pizChannelData[c];\n          var n = cd.nx * cd.size;\n          var cp = new Uint8Array(outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE);\n          tmpBuffer.set(cp, tmpOffset);\n          tmpOffset += n * INT16_SIZE;\n          cd.end += n;\n        }\n      }\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressPXR(info) {\n      var compressed = info.array.slice(info.offset.value, info.offset.value + info.size);\n      var rawBuffer = unzlibSync(compressed); // eslint-disable-line no-undef\n\n      const sz = info.lines * info.channels * info.width;\n      const tmpBuffer = info.type == 1 ? new Uint16Array(sz) : new Uint32Array(sz);\n      let tmpBufferEnd = 0;\n      let writePtr = 0;\n      const ptr = new Array(4);\n\n      for (let y = 0; y < info.lines; y++) {\n        for (let c = 0; c < info.channels; c++) {\n          let pixel = 0;\n\n          switch (info.type) {\n            case 1:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              tmpBufferEnd = ptr[1] + info.width;\n\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 8 | rawBuffer[ptr[1]++];\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n\n              break;\n\n            case 2:\n              ptr[0] = tmpBufferEnd;\n              ptr[1] = ptr[0] + info.width;\n              ptr[2] = ptr[1] + info.width;\n              tmpBufferEnd = ptr[2] + info.width;\n\n              for (let j = 0; j < info.width; ++j) {\n                const diff = rawBuffer[ptr[0]++] << 24 | rawBuffer[ptr[1]++] << 16 | rawBuffer[ptr[2]++] << 8;\n                pixel += diff;\n                tmpBuffer[writePtr] = pixel;\n                writePtr++;\n              }\n\n              break;\n          }\n        }\n      }\n\n      return new DataView(tmpBuffer.buffer);\n    }\n\n    function uncompressDWA(info) {\n      var inDataView = info.viewer;\n      var inOffset = {\n        value: info.offset.value\n      };\n      var outBuffer = new Uint8Array(info.width * info.lines * (info.channels * info.type * INT16_SIZE)); // Read compression header information\n\n      var dwaHeader = {\n        version: parseInt64(inDataView, inOffset),\n        unknownUncompressedSize: parseInt64(inDataView, inOffset),\n        unknownCompressedSize: parseInt64(inDataView, inOffset),\n        acCompressedSize: parseInt64(inDataView, inOffset),\n        dcCompressedSize: parseInt64(inDataView, inOffset),\n        rleCompressedSize: parseInt64(inDataView, inOffset),\n        rleUncompressedSize: parseInt64(inDataView, inOffset),\n        rleRawSize: parseInt64(inDataView, inOffset),\n        totalAcUncompressedCount: parseInt64(inDataView, inOffset),\n        totalDcUncompressedCount: parseInt64(inDataView, inOffset),\n        acCompression: parseInt64(inDataView, inOffset)\n      };\n\n      if (dwaHeader.version < 2) {\n        throw 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported';\n      } // Read channel ruleset information\n\n\n      var channelRules = new Array();\n      var ruleSize = parseUint16(inDataView, inOffset) - INT16_SIZE;\n\n      while (ruleSize > 0) {\n        var name = parseNullTerminatedString(inDataView.buffer, inOffset);\n        var value = parseUint8(inDataView, inOffset);\n        var compression = value >> 2 & 3;\n        var csc = (value >> 4) - 1;\n        var index = new Int8Array([csc])[0];\n        var type = parseUint8(inDataView, inOffset);\n        channelRules.push({\n          name: name,\n          index: index,\n          type: type,\n          compression: compression\n        });\n        ruleSize -= name.length + 3;\n      } // Classify channels\n\n\n      var channels = EXRHeader.channels;\n      var channelData = new Array(info.channels);\n\n      for (var i = 0; i < info.channels; ++i) {\n        var cd = channelData[i] = {};\n        var channel = channels[i];\n        cd.name = channel.name;\n        cd.compression = UNKNOWN;\n        cd.decoded = false;\n        cd.type = channel.pixelType;\n        cd.pLinear = channel.pLinear;\n        cd.width = info.width;\n        cd.height = info.lines;\n      }\n\n      var cscSet = {\n        idx: new Array(3)\n      };\n\n      for (var offset = 0; offset < info.channels; ++offset) {\n        var cd = channelData[offset];\n\n        for (var i = 0; i < channelRules.length; ++i) {\n          var rule = channelRules[i];\n\n          if (cd.name == rule.name) {\n            cd.compression = rule.compression;\n\n            if (rule.index >= 0) {\n              cscSet.idx[rule.index] = offset;\n            }\n\n            cd.offset = offset;\n          }\n        }\n      } // Read DCT - AC component data\n\n\n      if (dwaHeader.acCompressedSize > 0) {\n        switch (dwaHeader.acCompression) {\n          case STATIC_HUFFMAN:\n            var acBuffer = new Uint16Array(dwaHeader.totalAcUncompressedCount);\n            hufUncompress(info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount);\n            break;\n\n          case DEFLATE:\n            var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount);\n            var data = unzlibSync(compressed); // eslint-disable-line no-undef\n\n            var acBuffer = new Uint16Array(data.buffer);\n            inOffset.value += dwaHeader.totalAcUncompressedCount;\n            break;\n        }\n      } // Read DCT - DC component data\n\n\n      if (dwaHeader.dcCompressedSize > 0) {\n        var zlibInfo = {\n          array: info.array,\n          offset: inOffset,\n          size: dwaHeader.dcCompressedSize\n        };\n        var dcBuffer = new Uint16Array(uncompressZIP(zlibInfo).buffer);\n        inOffset.value += dwaHeader.dcCompressedSize;\n      } // Read RLE compressed data\n\n\n      if (dwaHeader.rleRawSize > 0) {\n        var compressed = info.array.slice(inOffset.value, inOffset.value + dwaHeader.rleCompressedSize);\n        var data = unzlibSync(compressed); // eslint-disable-line no-undef\n\n        var rleBuffer = decodeRunLength(data.buffer);\n        inOffset.value += dwaHeader.rleCompressedSize;\n      } // Prepare outbuffer data offset\n\n\n      var outBufferEnd = 0;\n      var rowOffsets = new Array(channelData.length);\n\n      for (var i = 0; i < rowOffsets.length; ++i) {\n        rowOffsets[i] = new Array();\n      }\n\n      for (var y = 0; y < info.lines; ++y) {\n        for (var chan = 0; chan < channelData.length; ++chan) {\n          rowOffsets[chan].push(outBufferEnd);\n          outBufferEnd += channelData[chan].width * info.type * INT16_SIZE;\n        }\n      } // Lossy DCT decode RGB channels\n\n\n      lossyDctDecode(cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer); // Decode other channels\n\n      for (var i = 0; i < channelData.length; ++i) {\n        var cd = channelData[i];\n        if (cd.decoded) continue;\n\n        switch (cd.compression) {\n          case RLE:\n            var row = 0;\n            var rleOffset = 0;\n\n            for (var y = 0; y < info.lines; ++y) {\n              var rowOffsetBytes = rowOffsets[i][row];\n\n              for (var x = 0; x < cd.width; ++x) {\n                for (var byte = 0; byte < INT16_SIZE * cd.type; ++byte) {\n                  outBuffer[rowOffsetBytes++] = rleBuffer[rleOffset + byte * cd.width * cd.height];\n                }\n\n                rleOffset++;\n              }\n\n              row++;\n            }\n\n            break;\n\n          case LOSSY_DCT: // skip\n\n          default:\n            throw 'EXRLoader.parse: unsupported channel compression';\n        }\n      }\n\n      return new DataView(outBuffer.buffer);\n    }\n\n    function parseNullTerminatedString(buffer, offset) {\n      var uintBuffer = new Uint8Array(buffer);\n      var endOffset = 0;\n\n      while (uintBuffer[offset.value + endOffset] != 0) {\n        endOffset += 1;\n      }\n\n      var stringValue = new TextDecoder().decode(uintBuffer.slice(offset.value, offset.value + endOffset));\n      offset.value = offset.value + endOffset + 1;\n      return stringValue;\n    }\n\n    function parseFixedLengthString(buffer, offset, size) {\n      var stringValue = new TextDecoder().decode(new Uint8Array(buffer).slice(offset.value, offset.value + size));\n      offset.value = offset.value + size;\n      return stringValue;\n    }\n\n    function parseRational(dataView, offset) {\n      var x = parseInt32(dataView, offset);\n      var y = parseUint32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseTimecode(dataView, offset) {\n      var x = parseUint32(dataView, offset);\n      var y = parseUint32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseInt32(dataView, offset) {\n      var Int32 = dataView.getInt32(offset.value, true);\n      offset.value = offset.value + INT32_SIZE;\n      return Int32;\n    }\n\n    function parseUint32(dataView, offset) {\n      var Uint32 = dataView.getUint32(offset.value, true);\n      offset.value = offset.value + INT32_SIZE;\n      return Uint32;\n    }\n\n    function parseUint8Array(uInt8Array, offset) {\n      var Uint8 = uInt8Array[offset.value];\n      offset.value = offset.value + INT8_SIZE;\n      return Uint8;\n    }\n\n    function parseUint8(dataView, offset) {\n      var Uint8 = dataView.getUint8(offset.value);\n      offset.value = offset.value + INT8_SIZE;\n      return Uint8;\n    }\n\n    const parseInt64 = function (dataView, offset) {\n      let int;\n\n      if ('getBigInt64' in DataView.prototype) {\n        int = Number(dataView.getBigInt64(offset.value, true));\n      } else {\n        int = dataView.getUint32(offset.value + 4, true) + Number(dataView.getUint32(offset.value, true) << 32);\n      }\n\n      offset.value += ULONG_SIZE;\n      return int;\n    };\n\n    function parseFloat32(dataView, offset) {\n      var float = dataView.getFloat32(offset.value, true);\n      offset.value += FLOAT32_SIZE;\n      return float;\n    }\n\n    function decodeFloat32(dataView, offset) {\n      return DataUtils.toHalfFloat(parseFloat32(dataView, offset));\n    } // https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n\n\n    function decodeFloat16(binary) {\n      var exponent = (binary & 0x7c00) >> 10,\n          fraction = binary & 0x03ff;\n      return (binary >> 15 ? -1 : 1) * (exponent ? exponent === 0x1f ? fraction ? NaN : Infinity : Math.pow(2, exponent - 15) * (1 + fraction / 0x400) : 6.103515625e-5 * (fraction / 0x400));\n    }\n\n    function parseUint16(dataView, offset) {\n      var Uint16 = dataView.getUint16(offset.value, true);\n      offset.value += INT16_SIZE;\n      return Uint16;\n    }\n\n    function parseFloat16(buffer, offset) {\n      return decodeFloat16(parseUint16(buffer, offset));\n    }\n\n    function parseChlist(dataView, buffer, offset, size) {\n      var startOffset = offset.value;\n      var channels = [];\n\n      while (offset.value < startOffset + size - 1) {\n        var name = parseNullTerminatedString(buffer, offset);\n        var pixelType = parseInt32(dataView, offset);\n        var pLinear = parseUint8(dataView, offset);\n        offset.value += 3; // reserved, three chars\n\n        var xSampling = parseInt32(dataView, offset);\n        var ySampling = parseInt32(dataView, offset);\n        channels.push({\n          name: name,\n          pixelType: pixelType,\n          pLinear: pLinear,\n          xSampling: xSampling,\n          ySampling: ySampling\n        });\n      }\n\n      offset.value += 1;\n      return channels;\n    }\n\n    function parseChromaticities(dataView, offset) {\n      var redX = parseFloat32(dataView, offset);\n      var redY = parseFloat32(dataView, offset);\n      var greenX = parseFloat32(dataView, offset);\n      var greenY = parseFloat32(dataView, offset);\n      var blueX = parseFloat32(dataView, offset);\n      var blueY = parseFloat32(dataView, offset);\n      var whiteX = parseFloat32(dataView, offset);\n      var whiteY = parseFloat32(dataView, offset);\n      return {\n        redX: redX,\n        redY: redY,\n        greenX: greenX,\n        greenY: greenY,\n        blueX: blueX,\n        blueY: blueY,\n        whiteX: whiteX,\n        whiteY: whiteY\n      };\n    }\n\n    function parseCompression(dataView, offset) {\n      var compressionCodes = ['NO_COMPRESSION', 'RLE_COMPRESSION', 'ZIPS_COMPRESSION', 'ZIP_COMPRESSION', 'PIZ_COMPRESSION', 'PXR24_COMPRESSION', 'B44_COMPRESSION', 'B44A_COMPRESSION', 'DWAA_COMPRESSION', 'DWAB_COMPRESSION'];\n      var compression = parseUint8(dataView, offset);\n      return compressionCodes[compression];\n    }\n\n    function parseBox2i(dataView, offset) {\n      var xMin = parseUint32(dataView, offset);\n      var yMin = parseUint32(dataView, offset);\n      var xMax = parseUint32(dataView, offset);\n      var yMax = parseUint32(dataView, offset);\n      return {\n        xMin: xMin,\n        yMin: yMin,\n        xMax: xMax,\n        yMax: yMax\n      };\n    }\n\n    function parseLineOrder(dataView, offset) {\n      var lineOrders = ['INCREASING_Y'];\n      var lineOrder = parseUint8(dataView, offset);\n      return lineOrders[lineOrder];\n    }\n\n    function parseV2f(dataView, offset) {\n      var x = parseFloat32(dataView, offset);\n      var y = parseFloat32(dataView, offset);\n      return [x, y];\n    }\n\n    function parseV3f(dataView, offset) {\n      var x = parseFloat32(dataView, offset);\n      var y = parseFloat32(dataView, offset);\n      var z = parseFloat32(dataView, offset);\n      return [x, y, z];\n    }\n\n    function parseValue(dataView, buffer, offset, type, size) {\n      if (type === 'string' || type === 'stringvector' || type === 'iccProfile') {\n        return parseFixedLengthString(buffer, offset, size);\n      } else if (type === 'chlist') {\n        return parseChlist(dataView, buffer, offset, size);\n      } else if (type === 'chromaticities') {\n        return parseChromaticities(dataView, offset);\n      } else if (type === 'compression') {\n        return parseCompression(dataView, offset);\n      } else if (type === 'box2i') {\n        return parseBox2i(dataView, offset);\n      } else if (type === 'lineOrder') {\n        return parseLineOrder(dataView, offset);\n      } else if (type === 'float') {\n        return parseFloat32(dataView, offset);\n      } else if (type === 'v2f') {\n        return parseV2f(dataView, offset);\n      } else if (type === 'v3f') {\n        return parseV3f(dataView, offset);\n      } else if (type === 'int') {\n        return parseInt32(dataView, offset);\n      } else if (type === 'rational') {\n        return parseRational(dataView, offset);\n      } else if (type === 'timecode') {\n        return parseTimecode(dataView, offset);\n      } else if (type === 'preview') {\n        offset.value += size;\n        return 'skipped';\n      } else {\n        offset.value += size;\n        return undefined;\n      }\n    }\n\n    function parseHeader(dataView, buffer, offset) {\n      const EXRHeader = {};\n\n      if (dataView.getUint32(0, true) != 20000630) {\n        // magic\n        throw \"THREE.EXRLoader: provided file doesn't appear to be in OpenEXR format.\";\n      }\n\n      EXRHeader.version = dataView.getUint8(4);\n      const spec = dataView.getUint8(5); // fullMask\n\n      EXRHeader.spec = {\n        singleTile: !!(spec & 2),\n        longName: !!(spec & 4),\n        deepFormat: !!(spec & 8),\n        multiPart: !!(spec & 16)\n      }; // start of header\n\n      offset.value = 8; // start at 8 - after pre-amble\n\n      var keepReading = true;\n\n      while (keepReading) {\n        var attributeName = parseNullTerminatedString(buffer, offset);\n\n        if (attributeName == 0) {\n          keepReading = false;\n        } else {\n          var attributeType = parseNullTerminatedString(buffer, offset);\n          var attributeSize = parseUint32(dataView, offset);\n          var attributeValue = parseValue(dataView, buffer, offset, attributeType, attributeSize);\n\n          if (attributeValue === undefined) {\n            console.warn(`EXRLoader.parse: skipped unknown header attribute type \\'${attributeType}\\'.`);\n          } else {\n            EXRHeader[attributeName] = attributeValue;\n          }\n        }\n      }\n\n      if (spec != 0) {\n        console.error('EXRHeader:', EXRHeader);\n        throw 'THREE.EXRLoader: provided file is currently unsupported.';\n      }\n\n      return EXRHeader;\n    }\n\n    function setupDecoder(EXRHeader, dataView, uInt8Array, offset, outputType) {\n      const EXRDecoder = {\n        size: 0,\n        viewer: dataView,\n        array: uInt8Array,\n        offset: offset,\n        width: EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1,\n        height: EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1,\n        channels: EXRHeader.channels.length,\n        bytesPerLine: null,\n        lines: null,\n        inputSize: null,\n        type: EXRHeader.channels[0].pixelType,\n        uncompress: null,\n        getter: null,\n        format: null,\n        encoding: null\n      };\n\n      switch (EXRHeader.compression) {\n        case 'NO_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressRAW;\n          break;\n\n        case 'RLE_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressRLE;\n          break;\n\n        case 'ZIPS_COMPRESSION':\n          EXRDecoder.lines = 1;\n          EXRDecoder.uncompress = uncompressZIP;\n          break;\n\n        case 'ZIP_COMPRESSION':\n          EXRDecoder.lines = 16;\n          EXRDecoder.uncompress = uncompressZIP;\n          break;\n\n        case 'PIZ_COMPRESSION':\n          EXRDecoder.lines = 32;\n          EXRDecoder.uncompress = uncompressPIZ;\n          break;\n\n        case 'PXR24_COMPRESSION':\n          EXRDecoder.lines = 16;\n          EXRDecoder.uncompress = uncompressPXR;\n          break;\n\n        case 'DWAA_COMPRESSION':\n          EXRDecoder.lines = 32;\n          EXRDecoder.uncompress = uncompressDWA;\n          break;\n\n        case 'DWAB_COMPRESSION':\n          EXRDecoder.lines = 256;\n          EXRDecoder.uncompress = uncompressDWA;\n          break;\n\n        default:\n          throw 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported';\n      }\n\n      EXRDecoder.scanlineBlockSize = EXRDecoder.lines;\n\n      if (EXRDecoder.type == 1) {\n        // half\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder.getter = parseFloat16;\n            EXRDecoder.inputSize = INT16_SIZE;\n            break;\n\n          case HalfFloatType:\n            EXRDecoder.getter = parseUint16;\n            EXRDecoder.inputSize = INT16_SIZE;\n            break;\n        }\n      } else if (EXRDecoder.type == 2) {\n        // float\n        switch (outputType) {\n          case FloatType:\n            EXRDecoder.getter = parseFloat32;\n            EXRDecoder.inputSize = FLOAT32_SIZE;\n            break;\n\n          case HalfFloatType:\n            EXRDecoder.getter = decodeFloat32;\n            EXRDecoder.inputSize = FLOAT32_SIZE;\n        }\n      } else {\n        throw 'EXRLoader.parse: unsupported pixelType ' + EXRDecoder.type + ' for ' + EXRHeader.compression + '.';\n      }\n\n      EXRDecoder.blockCount = (EXRHeader.dataWindow.yMax + 1) / EXRDecoder.scanlineBlockSize;\n\n      for (var i = 0; i < EXRDecoder.blockCount; i++) parseInt64(dataView, offset); // scanlineOffset\n      // we should be passed the scanline offset table, ready to start reading pixel data.\n      // RGB images will be converted to RGBA format, preventing software emulation in select devices.\n\n\n      EXRDecoder.outputChannels = EXRDecoder.channels == 3 ? 4 : EXRDecoder.channels;\n      const size = EXRDecoder.width * EXRDecoder.height * EXRDecoder.outputChannels;\n\n      switch (outputType) {\n        case FloatType:\n          EXRDecoder.byteArray = new Float32Array(size); // Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n\n          if (EXRDecoder.channels < EXRDecoder.outputChannels) EXRDecoder.byteArray.fill(1, 0, size);\n          break;\n\n        case HalfFloatType:\n          EXRDecoder.byteArray = new Uint16Array(size);\n          if (EXRDecoder.channels < EXRDecoder.outputChannels) EXRDecoder.byteArray.fill(0x3c00, 0, size); // Uint16Array holds half float data, 0x3C00 is 1\n\n          break;\n\n        default:\n          console.error('THREE.EXRLoader: unsupported type: ', outputType);\n          break;\n      }\n\n      EXRDecoder.bytesPerLine = EXRDecoder.width * EXRDecoder.inputSize * EXRDecoder.channels;\n\n      if (EXRDecoder.outputChannels == 4) {\n        EXRDecoder.format = RGBAFormat;\n        EXRDecoder.encoding = LinearEncoding;\n      } else {\n        EXRDecoder.format = RedFormat;\n        EXRDecoder.encoding = LinearEncoding;\n      }\n\n      return EXRDecoder;\n    } // start parsing file [START]\n\n\n    const bufferDataView = new DataView(buffer);\n    const uInt8Array = new Uint8Array(buffer);\n    const offset = {\n      value: 0\n    }; // get header information and validate format.\n\n    const EXRHeader = parseHeader(bufferDataView, buffer, offset); // get input compression information and prepare decoding.\n\n    const EXRDecoder = setupDecoder(EXRHeader, bufferDataView, uInt8Array, offset, this.type);\n    const tmpOffset = {\n      value: 0\n    };\n    const channelOffsets = {\n      R: 0,\n      G: 1,\n      B: 2,\n      A: 3,\n      Y: 0\n    };\n\n    for (let scanlineBlockIdx = 0; scanlineBlockIdx < EXRDecoder.height / EXRDecoder.scanlineBlockSize; scanlineBlockIdx++) {\n      const line = parseUint32(bufferDataView, offset); // line_no\n\n      EXRDecoder.size = parseUint32(bufferDataView, offset); // data_len\n\n      EXRDecoder.lines = line + EXRDecoder.scanlineBlockSize > EXRDecoder.height ? EXRDecoder.height - line : EXRDecoder.scanlineBlockSize;\n      const isCompressed = EXRDecoder.size < EXRDecoder.lines * EXRDecoder.bytesPerLine;\n      const viewer = isCompressed ? EXRDecoder.uncompress(EXRDecoder) : uncompressRAW(EXRDecoder);\n      offset.value += EXRDecoder.size;\n\n      for (let line_y = 0; line_y < EXRDecoder.scanlineBlockSize; line_y++) {\n        const true_y = line_y + scanlineBlockIdx * EXRDecoder.scanlineBlockSize;\n        if (true_y >= EXRDecoder.height) break;\n\n        for (let channelID = 0; channelID < EXRDecoder.channels; channelID++) {\n          const cOff = channelOffsets[EXRHeader.channels[channelID].name];\n\n          for (let x = 0; x < EXRDecoder.width; x++) {\n            tmpOffset.value = (line_y * (EXRDecoder.channels * EXRDecoder.width) + channelID * EXRDecoder.width + x) * EXRDecoder.inputSize;\n            const outIndex = (EXRDecoder.height - 1 - true_y) * (EXRDecoder.width * EXRDecoder.outputChannels) + x * EXRDecoder.outputChannels + cOff;\n            EXRDecoder.byteArray[outIndex] = EXRDecoder.getter(viewer, tmpOffset);\n          }\n        }\n      }\n    }\n\n    return {\n      header: EXRHeader,\n      width: EXRDecoder.width,\n      height: EXRDecoder.height,\n      data: EXRDecoder.byteArray,\n      format: EXRDecoder.format,\n      encoding: EXRDecoder.encoding,\n      type: this.type\n    };\n  }\n\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      texture.encoding = texData.encoding;\n      texture.minFilter = LinearFilter;\n      texture.magFilter = LinearFilter;\n      texture.generateMipmaps = false;\n      texture.flipY = false;\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n\n}\n\nexport { EXRLoader };\n"]},"metadata":{},"sourceType":"module"}