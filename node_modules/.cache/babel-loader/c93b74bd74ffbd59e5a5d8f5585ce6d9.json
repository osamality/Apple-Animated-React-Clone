{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Loader, FileLoader, ShapePath } from 'three';\n\nclass FontLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, response => {\n      if (typeof response !== 'string') throw new Error('unsupported data type');\n      const json = JSON.parse(response);\n      const font = this.parse(json);\n      if (onLoad) onLoad(font);\n    }, onProgress, onError);\n  }\n\n  parse(json) {\n    return new Font(json);\n  }\n\n}\n\nclass Font {\n  constructor(data) {\n    _defineProperty(this, \"data\", void 0);\n\n    this.data = data;\n  }\n\n  generateShapes(text, size = 100, _options) {\n    const shapes = [];\n    const options = {\n      letterSpacing: 0,\n      lineHeight: 1,\n      ..._options\n    };\n    const paths = createPaths(text, size, this.data, options);\n\n    for (let p = 0, pl = paths.length; p < pl; p++) {\n      Array.prototype.push.apply(shapes, paths[p].toShapes(false));\n    }\n\n    return shapes;\n  }\n\n}\n\n_defineProperty(Font, \"isFont\", void 0);\n\n_defineProperty(Font, \"type\", void 0);\n\nfunction createPaths(text, size, data, options) {\n  const chars = Array.from(text);\n  const scale = size / data.resolution;\n  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n  const paths = [];\n  let offsetX = 0,\n      offsetY = 0;\n\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i];\n\n    if (char === '\\n') {\n      offsetX = 0;\n      offsetY -= line_height * options.lineHeight;\n    } else {\n      const ret = createPath(char, scale, offsetX, offsetY, data);\n\n      if (ret) {\n        offsetX += ret.offsetX + options.letterSpacing;\n        paths.push(ret.path);\n      }\n    }\n  }\n\n  return paths;\n}\n\nfunction createPath(char, scale, offsetX, offsetY, data) {\n  const glyph = data.glyphs[char] || data.glyphs['?'];\n\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n    return;\n  }\n\n  const path = new ShapePath();\n  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n  if (glyph.o) {\n    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n    for (let i = 0, l = outline.length; i < l;) {\n      const action = outline[i++];\n\n      switch (action) {\n        case 'm':\n          // moveTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.moveTo(x, y);\n          break;\n\n        case 'l':\n          // lineTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.lineTo(x, y);\n          break;\n\n        case 'q':\n          // quadraticCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n          break;\n\n        case 'b':\n          // bezierCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          cpx2 = parseInt(outline[i++]) * scale + offsetX;\n          cpy2 = parseInt(outline[i++]) * scale + offsetY;\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n          break;\n      }\n    }\n  }\n\n  return {\n    offsetX: glyph.ha * scale,\n    path\n  };\n}\n\nexport { Font, FontLoader };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/loaders/FontLoader.js"],"names":["_defineProperty","Loader","FileLoader","ShapePath","FontLoader","constructor","manager","load","url","onLoad","onProgress","onError","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","response","Error","json","JSON","parse","font","Font","data","generateShapes","text","size","_options","shapes","options","letterSpacing","lineHeight","paths","createPaths","p","pl","length","Array","prototype","push","apply","toShapes","chars","from","scale","resolution","line_height","boundingBox","yMax","yMin","underlineThickness","offsetX","offsetY","i","char","ret","createPath","glyph","glyphs","console","error","familyName","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","o","outline","_cachedOutline","split","l","action","parseInt","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Loader, FileLoader, ShapePath } from 'three';\n\nclass FontLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, response => {\n      if (typeof response !== 'string') throw new Error('unsupported data type');\n      const json = JSON.parse(response);\n      const font = this.parse(json);\n      if (onLoad) onLoad(font);\n    }, onProgress, onError);\n  }\n\n  parse(json) {\n    return new Font(json);\n  }\n\n}\nclass Font {\n  constructor(data) {\n    _defineProperty(this, \"data\", void 0);\n\n    this.data = data;\n  }\n\n  generateShapes(text, size = 100, _options) {\n    const shapes = [];\n    const options = {\n      letterSpacing: 0,\n      lineHeight: 1,\n      ..._options\n    };\n    const paths = createPaths(text, size, this.data, options);\n\n    for (let p = 0, pl = paths.length; p < pl; p++) {\n      Array.prototype.push.apply(shapes, paths[p].toShapes(false));\n    }\n\n    return shapes;\n  }\n\n}\n\n_defineProperty(Font, \"isFont\", void 0);\n\n_defineProperty(Font, \"type\", void 0);\n\nfunction createPaths(text, size, data, options) {\n  const chars = Array.from(text);\n  const scale = size / data.resolution;\n  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n  const paths = [];\n  let offsetX = 0,\n      offsetY = 0;\n\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i];\n\n    if (char === '\\n') {\n      offsetX = 0;\n      offsetY -= line_height * options.lineHeight;\n    } else {\n      const ret = createPath(char, scale, offsetX, offsetY, data);\n\n      if (ret) {\n        offsetX += ret.offsetX + options.letterSpacing;\n        paths.push(ret.path);\n      }\n    }\n  }\n\n  return paths;\n}\n\nfunction createPath(char, scale, offsetX, offsetY, data) {\n  const glyph = data.glyphs[char] || data.glyphs['?'];\n\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n    return;\n  }\n\n  const path = new ShapePath();\n  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n  if (glyph.o) {\n    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n    for (let i = 0, l = outline.length; i < l;) {\n      const action = outline[i++];\n\n      switch (action) {\n        case 'm':\n          // moveTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.moveTo(x, y);\n          break;\n\n        case 'l':\n          // lineTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.lineTo(x, y);\n          break;\n\n        case 'q':\n          // quadraticCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n          break;\n\n        case 'b':\n          // bezierCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          cpx2 = parseInt(outline[i++]) * scale + offsetX;\n          cpy2 = parseInt(outline[i++]) * scale + offsetY;\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n          break;\n      }\n    }\n  }\n\n  return {\n    offsetX: glyph.ha * scale,\n    path\n  };\n}\n\nexport { Font, FontLoader };\n"]},"metadata":{},"sourceType":"module"}