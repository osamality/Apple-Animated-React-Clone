{"ast":null,"code":"import Node from '../core/Node.js';\nimport { ShaderNode, element, mul, positionLocal, add, transformDirection, normalLocal, assign, attribute, uniform, mat4, buffer } from '../ShaderNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nconst Skinning = new ShaderNode((inputs, builder) => {\n  const {\n    index,\n    weight,\n    bindMatrix,\n    bindMatrixInverse,\n    boneMatrices\n  } = inputs;\n  const boneMatX = element(boneMatrices, index.x);\n  const boneMatY = element(boneMatrices, index.y);\n  const boneMatZ = element(boneMatrices, index.z);\n  const boneMatW = element(boneMatrices, index.w); // POSITION\n\n  const skinVertex = mul(bindMatrix, positionLocal);\n  const skinned = add(mul(mul(boneMatX, skinVertex), weight.x), mul(mul(boneMatY, skinVertex), weight.y), mul(mul(boneMatZ, skinVertex), weight.z), mul(mul(boneMatW, skinVertex), weight.w));\n  const skinPosition = mul(bindMatrixInverse, skinned).xyz; // NORMAL\n\n  let skinMatrix = add(mul(weight.x, boneMatX), mul(weight.y, boneMatY), mul(weight.z, boneMatZ), mul(weight.w, boneMatW));\n  skinMatrix = mul(mul(bindMatrixInverse, skinMatrix), bindMatrix);\n  const skinNormal = transformDirection(skinMatrix, normalLocal).xyz; // ASSIGNS\n\n  assign(positionLocal, skinPosition).build(builder);\n  assign(normalLocal, skinNormal).build(builder);\n});\n\nclass SkinningNode extends Node {\n  constructor(skinnedMesh) {\n    super('void');\n    this.skinnedMesh = skinnedMesh;\n    this.updateType = NodeUpdateType.Object; //\n\n    this.skinIndexNode = attribute('skinIndex', 'uvec4');\n    this.skinWeightNode = attribute('skinWeight', 'vec4');\n    this.bindMatrixNode = uniform(mat4(skinnedMesh.bindMatrix));\n    this.bindMatrixInverseNode = uniform(mat4(skinnedMesh.bindMatrixInverse));\n    this.boneMatricesNode = buffer(skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length);\n  }\n\n  generate(builder) {\n    Skinning({\n      index: this.skinIndexNode,\n      weight: this.skinWeightNode,\n      bindMatrix: this.bindMatrixNode,\n      bindMatrixInverse: this.bindMatrixInverseNode,\n      boneMatrices: this.boneMatricesNode\n    }, builder);\n  }\n\n  update() {\n    this.skinnedMesh.skeleton.update();\n  }\n\n}\n\nexport default SkinningNode;","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/nodes/accessors/SkinningNode.js"],"names":["Node","ShaderNode","element","mul","positionLocal","add","transformDirection","normalLocal","assign","attribute","uniform","mat4","buffer","NodeUpdateType","Skinning","inputs","builder","index","weight","bindMatrix","bindMatrixInverse","boneMatrices","boneMatX","x","boneMatY","y","boneMatZ","z","boneMatW","w","skinVertex","skinned","skinPosition","xyz","skinMatrix","skinNormal","build","SkinningNode","constructor","skinnedMesh","updateType","Object","skinIndexNode","skinWeightNode","bindMatrixNode","bindMatrixInverseNode","boneMatricesNode","skeleton","bones","length","generate","update"],"mappings":"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","sourcesContent":["import Node from '../core/Node.js';\nimport { ShaderNode, element, mul, positionLocal, add, transformDirection, normalLocal, assign, attribute, uniform, mat4, buffer } from '../ShaderNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\n\nconst Skinning = new ShaderNode((inputs, builder) => {\n  const {\n    index,\n    weight,\n    bindMatrix,\n    bindMatrixInverse,\n    boneMatrices\n  } = inputs;\n  const boneMatX = element(boneMatrices, index.x);\n  const boneMatY = element(boneMatrices, index.y);\n  const boneMatZ = element(boneMatrices, index.z);\n  const boneMatW = element(boneMatrices, index.w); // POSITION\n\n  const skinVertex = mul(bindMatrix, positionLocal);\n  const skinned = add(mul(mul(boneMatX, skinVertex), weight.x), mul(mul(boneMatY, skinVertex), weight.y), mul(mul(boneMatZ, skinVertex), weight.z), mul(mul(boneMatW, skinVertex), weight.w));\n  const skinPosition = mul(bindMatrixInverse, skinned).xyz; // NORMAL\n\n  let skinMatrix = add(mul(weight.x, boneMatX), mul(weight.y, boneMatY), mul(weight.z, boneMatZ), mul(weight.w, boneMatW));\n  skinMatrix = mul(mul(bindMatrixInverse, skinMatrix), bindMatrix);\n  const skinNormal = transformDirection(skinMatrix, normalLocal).xyz; // ASSIGNS\n\n  assign(positionLocal, skinPosition).build(builder);\n  assign(normalLocal, skinNormal).build(builder);\n});\n\nclass SkinningNode extends Node {\n  constructor(skinnedMesh) {\n    super('void');\n    this.skinnedMesh = skinnedMesh;\n    this.updateType = NodeUpdateType.Object; //\n\n    this.skinIndexNode = attribute('skinIndex', 'uvec4');\n    this.skinWeightNode = attribute('skinWeight', 'vec4');\n    this.bindMatrixNode = uniform(mat4(skinnedMesh.bindMatrix));\n    this.bindMatrixInverseNode = uniform(mat4(skinnedMesh.bindMatrixInverse));\n    this.boneMatricesNode = buffer(skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length);\n  }\n\n  generate(builder) {\n    Skinning({\n      index: this.skinIndexNode,\n      weight: this.skinWeightNode,\n      bindMatrix: this.bindMatrixNode,\n      bindMatrixInverse: this.bindMatrixInverseNode,\n      boneMatrices: this.boneMatricesNode\n    }, builder);\n  }\n\n  update() {\n    this.skinnedMesh.skeleton.update();\n  }\n\n}\n\nexport default SkinningNode;\n"]},"metadata":{},"sourceType":"module"}