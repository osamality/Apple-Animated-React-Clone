{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { Vector3, DoubleSide, OrthographicCamera, PerspectiveCamera } from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nconst v1 = new Vector3();\nconst v2 = new Vector3();\nconst v3 = new Vector3();\n\nfunction defaultCalculatePosition(el, camera, size) {\n  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  objectPos.project(camera);\n  const widthHalf = size.width / 2;\n  const heightHalf = size.height / 2;\n  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];\n}\n\nfunction isObjectBehindCamera(el, camera) {\n  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n  const deltaCamObj = objectPos.sub(cameraPos);\n  const camDir = camera.getWorldDirection(v3);\n  return deltaCamObj.angleTo(camDir) > Math.PI / 2;\n}\n\nfunction isObjectVisible(el, camera, raycaster, occlude) {\n  const elPos = v1.setFromMatrixPosition(el.matrixWorld);\n  const screenPos = elPos.clone();\n  screenPos.project(camera);\n  raycaster.setFromCamera(screenPos, camera);\n  const intersects = raycaster.intersectObjects(occlude, true);\n\n  if (intersects.length) {\n    const intersectionDistance = intersects[0].distance;\n    const pointDistance = elPos.distanceTo(raycaster.ray.origin);\n    return pointDistance < intersectionDistance;\n  }\n\n  return true;\n}\n\nfunction objectScale(el, camera) {\n  if (camera instanceof OrthographicCamera) {\n    return camera.zoom;\n  } else if (camera instanceof PerspectiveCamera) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    const vFOV = camera.fov * Math.PI / 180;\n    const dist = objectPos.distanceTo(cameraPos);\n    const scaleFOV = 2 * Math.tan(vFOV / 2) * dist;\n    return 1 / scaleFOV;\n  } else {\n    return 1;\n  }\n}\n\nfunction objectZIndex(el, camera, zIndexRange) {\n  if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    const dist = objectPos.distanceTo(cameraPos);\n    const A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);\n    const B = zIndexRange[1] - A * camera.far;\n    return Math.round(A * dist + B);\n  }\n\n  return undefined;\n}\n\nconst epsilon = value => Math.abs(value) < 1e-10 ? 0 : value;\n\nfunction getCSSMatrix(matrix, multipliers, prepend = '') {\n  let matrix3d = 'matrix3d(';\n\n  for (let i = 0; i !== 16; i++) {\n    matrix3d += epsilon(multipliers[i] * matrix.elements[i]) + (i !== 15 ? ',' : ')');\n  }\n\n  return prepend + matrix3d;\n}\n\nconst getCameraCSSMatrix = (multipliers => {\n  return matrix => getCSSMatrix(matrix, multipliers);\n})([1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1]);\n\nconst getObjectCSSMatrix = (scaleMultipliers => {\n  return (matrix, factor) => getCSSMatrix(matrix, scaleMultipliers(factor), 'translate(-50%,-50%)');\n})(f => [1 / f, 1 / f, 1 / f, 1, -1 / f, -1 / f, -1 / f, -1, 1 / f, 1 / f, 1 / f, 1, 1, 1, 1, 1]);\n\nfunction isRefObject(ref) {\n  return ref && typeof ref === 'object' && 'current' in ref;\n}\n\nconst Html = /*#__PURE__*/React.forwardRef(({\n  children,\n  eps = 0.001,\n  style,\n  className,\n  prepend,\n  center,\n  fullscreen,\n  portal,\n  distanceFactor,\n  sprite = false,\n  transform = false,\n  occlude,\n  onOcclude,\n  castShadow,\n  receiveShadow,\n  material,\n  geometry,\n  zIndexRange = [16777271, 0],\n  calculatePosition = defaultCalculatePosition,\n  as = 'div',\n  wrapperClass,\n  pointerEvents = 'auto',\n  ...props\n}, ref) => {\n  const {\n    gl,\n    camera,\n    scene,\n    size,\n    raycaster,\n    events,\n    viewport\n  } = useThree();\n  const [el] = React.useState(() => document.createElement(as));\n  const root = React.useRef();\n  const group = React.useRef(null);\n  const oldZoom = React.useRef(0);\n  const oldPosition = React.useRef([0, 0]);\n  const transformOuterRef = React.useRef(null);\n  const transformInnerRef = React.useRef(null); // Append to the connected element, which makes HTML work with views\n\n  const target = (portal == null ? void 0 : portal.current) || events.connected || gl.domElement.parentNode;\n  const occlusionMeshRef = React.useRef(null);\n  const isMeshSizeSet = React.useRef(false);\n  const isRayCastOcclusion = React.useMemo(() => {\n    return occlude && occlude !== 'blending' || Array.isArray(occlude) && occlude.length && isRefObject(occlude[0]);\n  }, [occlude]);\n  React.useLayoutEffect(() => {\n    const el = gl.domElement;\n\n    if (occlude) {\n      el.style.zIndex = `${Math.floor(zIndexRange[0] / 2)}`;\n      el.style.position = 'absolute';\n      el.style.pointerEvents = 'none';\n    } else {\n      el.style.zIndex = null;\n      el.style.position = null;\n      el.style.pointerEvents = null;\n    }\n  }, [occlude, isRayCastOcclusion]);\n  React.useLayoutEffect(() => {\n    if (group.current) {\n      const currentRoot = root.current = ReactDOM.createRoot(el);\n      scene.updateMatrixWorld();\n\n      if (transform) {\n        el.style.cssText = `position:absolute;top:0;left:0;pointer-events:none;overflow:hidden;`;\n      } else {\n        const vec = calculatePosition(group.current, camera, size);\n        el.style.cssText = `position:absolute;top:0;left:0;transform:translate3d(${vec[0]}px,${vec[1]}px,0);transform-origin:0 0;`;\n      }\n\n      if (target) {\n        if (prepend) target.prepend(el);else target.appendChild(el);\n      }\n\n      return () => {\n        if (target) target.removeChild(el);\n        currentRoot.unmount();\n      };\n    }\n  }, [target, transform]);\n  React.useLayoutEffect(() => {\n    if (wrapperClass) el.className = wrapperClass;\n  }, [wrapperClass]);\n  const styles = React.useMemo(() => {\n    if (transform) {\n      return {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: size.width,\n        height: size.height,\n        transformStyle: 'preserve-3d',\n        pointerEvents: 'none'\n      };\n    } else {\n      return {\n        position: 'absolute',\n        transform: center ? 'translate3d(-50%,-50%,0)' : 'none',\n        ...(fullscreen && {\n          top: -size.height / 2,\n          left: -size.width / 2,\n          width: size.width,\n          height: size.height\n        }),\n        ...style\n      };\n    }\n  }, [style, center, fullscreen, size, transform]);\n  const transformInnerStyles = React.useMemo(() => ({\n    position: 'absolute',\n    pointerEvents\n  }), [pointerEvents]);\n  React.useLayoutEffect(() => {\n    isMeshSizeSet.current = false;\n\n    if (transform) {\n      var _root$current;\n\n      (_root$current = root.current) == null ? void 0 : _root$current.render( /*#__PURE__*/React.createElement(\"div\", {\n        ref: transformOuterRef,\n        style: styles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: transformInnerRef,\n        style: transformInnerStyles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        className: className,\n        style: style,\n        children: children\n      }))));\n    } else {\n      var _root$current2;\n\n      (_root$current2 = root.current) == null ? void 0 : _root$current2.render( /*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        style: styles,\n        className: className,\n        children: children\n      }));\n    }\n  });\n  const visible = React.useRef(true);\n  useFrame(gl => {\n    if (group.current) {\n      camera.updateMatrixWorld();\n      group.current.updateWorldMatrix(true, false);\n      const vec = transform ? oldPosition.current : calculatePosition(group.current, camera, size);\n\n      if (transform || Math.abs(oldZoom.current - camera.zoom) > eps || Math.abs(oldPosition.current[0] - vec[0]) > eps || Math.abs(oldPosition.current[1] - vec[1]) > eps) {\n        const isBehindCamera = isObjectBehindCamera(group.current, camera);\n        let raytraceTarget = false;\n\n        if (isRayCastOcclusion) {\n          if (occlude !== 'blending') {\n            raytraceTarget = [scene];\n          } else if (Array.isArray(occlude)) {\n            raytraceTarget = occlude.map(item => item.current);\n          }\n        }\n\n        const previouslyVisible = visible.current;\n\n        if (raytraceTarget) {\n          const isvisible = isObjectVisible(group.current, camera, raycaster, raytraceTarget);\n          visible.current = isvisible && !isBehindCamera;\n        } else {\n          visible.current = !isBehindCamera;\n        }\n\n        if (previouslyVisible !== visible.current) {\n          if (onOcclude) onOcclude(!visible.current);else el.style.display = visible.current ? 'block' : 'none';\n        }\n\n        const halfRange = Math.floor(zIndexRange[0] / 2);\n        const zRange = occlude ? isRayCastOcclusion //\n        ? [zIndexRange[0], halfRange] : [halfRange - 1, 0] : zIndexRange;\n        el.style.zIndex = `${objectZIndex(group.current, camera, zRange)}`;\n\n        if (transform) {\n          const [widthHalf, heightHalf] = [size.width / 2, size.height / 2];\n          const fov = camera.projectionMatrix.elements[5] * heightHalf;\n          const {\n            isOrthographicCamera,\n            top,\n            left,\n            bottom,\n            right\n          } = camera;\n          const cameraMatrix = getCameraCSSMatrix(camera.matrixWorldInverse);\n          const cameraTransform = isOrthographicCamera ? `scale(${fov})translate(${epsilon(-(right + left) / 2)}px,${epsilon((top + bottom) / 2)}px)` : `translateZ(${fov}px)`;\n          let matrix = group.current.matrixWorld;\n\n          if (sprite) {\n            matrix = camera.matrixWorldInverse.clone().transpose().copyPosition(matrix).scale(group.current.scale);\n            matrix.elements[3] = matrix.elements[7] = matrix.elements[11] = 0;\n            matrix.elements[15] = 1;\n          }\n\n          el.style.width = size.width + 'px';\n          el.style.height = size.height + 'px';\n          el.style.perspective = isOrthographicCamera ? '' : `${fov}px`;\n\n          if (transformOuterRef.current && transformInnerRef.current) {\n            transformOuterRef.current.style.transform = `${cameraTransform}${cameraMatrix}translate(${widthHalf}px,${heightHalf}px)`;\n            transformInnerRef.current.style.transform = getObjectCSSMatrix(matrix, 1 / ((distanceFactor || 10) / 400));\n          }\n        } else {\n          const scale = distanceFactor === undefined ? 1 : objectScale(group.current, camera) * distanceFactor;\n          el.style.transform = `translate3d(${vec[0]}px,${vec[1]}px,0) scale(${scale})`;\n        }\n\n        oldPosition.current = vec;\n        oldZoom.current = camera.zoom;\n      }\n    }\n\n    if (!isRayCastOcclusion && occlusionMeshRef.current && !isMeshSizeSet.current) {\n      if (transform) {\n        if (transformOuterRef.current) {\n          const el = transformOuterRef.current.children[0];\n\n          if (el != null && el.clientWidth && el != null && el.clientHeight) {\n            const {\n              isOrthographicCamera\n            } = camera;\n\n            if (isOrthographicCamera || geometry) {\n              if (props.scale) {\n                if (!Array.isArray(props.scale)) {\n                  occlusionMeshRef.current.scale.setScalar(1 / props.scale);\n                } else if (props.scale instanceof Vector3) {\n                  occlusionMeshRef.current.scale.copy(props.scale.clone().divideScalar(1));\n                } else {\n                  occlusionMeshRef.current.scale.set(1 / props.scale[0], 1 / props.scale[1], 1 / props.scale[2]);\n                }\n              }\n            } else {\n              const ratio = (distanceFactor || 10) / 400;\n              const w = el.clientWidth * ratio;\n              const h = el.clientHeight * ratio;\n              occlusionMeshRef.current.scale.set(w, h, 1);\n            }\n\n            isMeshSizeSet.current = true;\n          }\n        }\n      } else {\n        const ele = el.children[0];\n\n        if (ele != null && ele.clientWidth && ele != null && ele.clientHeight) {\n          const ratio = 1 / viewport.factor;\n          const w = ele.clientWidth * ratio;\n          const h = ele.clientHeight * ratio;\n          occlusionMeshRef.current.scale.set(w, h, 1);\n          isMeshSizeSet.current = true;\n        }\n\n        occlusionMeshRef.current.lookAt(gl.camera.position);\n      }\n    }\n  });\n  const shaders = React.useMemo(() => ({\n    vertexShader: !transform ?\n    /* glsl */\n    `\n          /*\n            This shader is from the THREE's SpriteMaterial.\n            We need to turn the backing plane into a Sprite\n            (make it always face the camera) if \"transfrom\" \n            is false. \n          */\n          #include <common>\n\n          void main() {\n            vec2 center = vec2(0., 1.);\n            float rotation = 0.0;\n            \n            // This is somewhat arbitrary, but it seems to work well\n            // Need to figure out how to derive this dynamically if it even matters\n            float size = 0.03;\n\n            vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n            vec2 scale;\n            scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n            scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n            bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n            if ( isPerspective ) scale *= - mvPosition.z;\n\n            vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale * size;\n            vec2 rotatedPosition;\n            rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n            rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n            mvPosition.xy += rotatedPosition;\n\n            gl_Position = projectionMatrix * mvPosition;\n          }\n      ` : undefined,\n    fragmentShader:\n    /* glsl */\n    `\n        void main() {\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n      `\n  }), [transform]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: group\n  }), occlude && !isRayCastOcclusion && /*#__PURE__*/React.createElement(\"mesh\", {\n    castShadow: castShadow,\n    receiveShadow: receiveShadow,\n    ref: occlusionMeshRef\n  }, geometry || /*#__PURE__*/React.createElement(\"planeGeometry\", null), material || /*#__PURE__*/React.createElement(\"shaderMaterial\", {\n    side: DoubleSide,\n    vertexShader: shaders.vertexShader,\n    fragmentShader: shaders.fragmentShader\n  })));\n});\nexport { Html };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/web/Html.js"],"names":["_extends","React","ReactDOM","Vector3","DoubleSide","OrthographicCamera","PerspectiveCamera","useThree","useFrame","v1","v2","v3","defaultCalculatePosition","el","camera","size","objectPos","setFromMatrixPosition","matrixWorld","project","widthHalf","width","heightHalf","height","x","y","isObjectBehindCamera","cameraPos","deltaCamObj","sub","camDir","getWorldDirection","angleTo","Math","PI","isObjectVisible","raycaster","occlude","elPos","screenPos","clone","setFromCamera","intersects","intersectObjects","length","intersectionDistance","distance","pointDistance","distanceTo","ray","origin","objectScale","zoom","vFOV","fov","dist","scaleFOV","tan","objectZIndex","zIndexRange","A","far","near","B","round","undefined","epsilon","value","abs","getCSSMatrix","matrix","multipliers","prepend","matrix3d","i","elements","getCameraCSSMatrix","getObjectCSSMatrix","scaleMultipliers","factor","f","isRefObject","ref","Html","forwardRef","children","eps","style","className","center","fullscreen","portal","distanceFactor","sprite","transform","onOcclude","castShadow","receiveShadow","material","geometry","calculatePosition","as","wrapperClass","pointerEvents","props","gl","scene","events","viewport","useState","document","createElement","root","useRef","group","oldZoom","oldPosition","transformOuterRef","transformInnerRef","target","current","connected","domElement","parentNode","occlusionMeshRef","isMeshSizeSet","isRayCastOcclusion","useMemo","Array","isArray","useLayoutEffect","zIndex","floor","position","currentRoot","createRoot","updateMatrixWorld","cssText","vec","appendChild","removeChild","unmount","styles","top","left","transformStyle","transformInnerStyles","_root$current","render","_root$current2","visible","updateWorldMatrix","isBehindCamera","raytraceTarget","map","item","previouslyVisible","isvisible","display","halfRange","zRange","projectionMatrix","isOrthographicCamera","bottom","right","cameraMatrix","matrixWorldInverse","cameraTransform","transpose","copyPosition","scale","perspective","clientWidth","clientHeight","setScalar","copy","divideScalar","set","ratio","w","h","ele","lookAt","shaders","vertexShader","fragmentShader","side"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom/client';\nimport { Vector3, DoubleSide, OrthographicCamera, PerspectiveCamera } from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst v1 = new Vector3();\nconst v2 = new Vector3();\nconst v3 = new Vector3();\n\nfunction defaultCalculatePosition(el, camera, size) {\n  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  objectPos.project(camera);\n  const widthHalf = size.width / 2;\n  const heightHalf = size.height / 2;\n  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];\n}\n\nfunction isObjectBehindCamera(el, camera) {\n  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n  const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n  const deltaCamObj = objectPos.sub(cameraPos);\n  const camDir = camera.getWorldDirection(v3);\n  return deltaCamObj.angleTo(camDir) > Math.PI / 2;\n}\n\nfunction isObjectVisible(el, camera, raycaster, occlude) {\n  const elPos = v1.setFromMatrixPosition(el.matrixWorld);\n  const screenPos = elPos.clone();\n  screenPos.project(camera);\n  raycaster.setFromCamera(screenPos, camera);\n  const intersects = raycaster.intersectObjects(occlude, true);\n\n  if (intersects.length) {\n    const intersectionDistance = intersects[0].distance;\n    const pointDistance = elPos.distanceTo(raycaster.ray.origin);\n    return pointDistance < intersectionDistance;\n  }\n\n  return true;\n}\n\nfunction objectScale(el, camera) {\n  if (camera instanceof OrthographicCamera) {\n    return camera.zoom;\n  } else if (camera instanceof PerspectiveCamera) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    const vFOV = camera.fov * Math.PI / 180;\n    const dist = objectPos.distanceTo(cameraPos);\n    const scaleFOV = 2 * Math.tan(vFOV / 2) * dist;\n    return 1 / scaleFOV;\n  } else {\n    return 1;\n  }\n}\n\nfunction objectZIndex(el, camera, zIndexRange) {\n  if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    const dist = objectPos.distanceTo(cameraPos);\n    const A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);\n    const B = zIndexRange[1] - A * camera.far;\n    return Math.round(A * dist + B);\n  }\n\n  return undefined;\n}\n\nconst epsilon = value => Math.abs(value) < 1e-10 ? 0 : value;\n\nfunction getCSSMatrix(matrix, multipliers, prepend = '') {\n  let matrix3d = 'matrix3d(';\n\n  for (let i = 0; i !== 16; i++) {\n    matrix3d += epsilon(multipliers[i] * matrix.elements[i]) + (i !== 15 ? ',' : ')');\n  }\n\n  return prepend + matrix3d;\n}\n\nconst getCameraCSSMatrix = (multipliers => {\n  return matrix => getCSSMatrix(matrix, multipliers);\n})([1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1]);\n\nconst getObjectCSSMatrix = (scaleMultipliers => {\n  return (matrix, factor) => getCSSMatrix(matrix, scaleMultipliers(factor), 'translate(-50%,-50%)');\n})(f => [1 / f, 1 / f, 1 / f, 1, -1 / f, -1 / f, -1 / f, -1, 1 / f, 1 / f, 1 / f, 1, 1, 1, 1, 1]);\n\nfunction isRefObject(ref) {\n  return ref && typeof ref === 'object' && 'current' in ref;\n}\n\nconst Html = /*#__PURE__*/React.forwardRef(({\n  children,\n  eps = 0.001,\n  style,\n  className,\n  prepend,\n  center,\n  fullscreen,\n  portal,\n  distanceFactor,\n  sprite = false,\n  transform = false,\n  occlude,\n  onOcclude,\n  castShadow,\n  receiveShadow,\n  material,\n  geometry,\n  zIndexRange = [16777271, 0],\n  calculatePosition = defaultCalculatePosition,\n  as = 'div',\n  wrapperClass,\n  pointerEvents = 'auto',\n  ...props\n}, ref) => {\n  const {\n    gl,\n    camera,\n    scene,\n    size,\n    raycaster,\n    events,\n    viewport\n  } = useThree();\n  const [el] = React.useState(() => document.createElement(as));\n  const root = React.useRef();\n  const group = React.useRef(null);\n  const oldZoom = React.useRef(0);\n  const oldPosition = React.useRef([0, 0]);\n  const transformOuterRef = React.useRef(null);\n  const transformInnerRef = React.useRef(null); // Append to the connected element, which makes HTML work with views\n\n  const target = (portal == null ? void 0 : portal.current) || events.connected || gl.domElement.parentNode;\n  const occlusionMeshRef = React.useRef(null);\n  const isMeshSizeSet = React.useRef(false);\n  const isRayCastOcclusion = React.useMemo(() => {\n    return occlude && occlude !== 'blending' || Array.isArray(occlude) && occlude.length && isRefObject(occlude[0]);\n  }, [occlude]);\n  React.useLayoutEffect(() => {\n    const el = gl.domElement;\n\n    if (occlude) {\n      el.style.zIndex = `${Math.floor(zIndexRange[0] / 2)}`;\n      el.style.position = 'absolute';\n      el.style.pointerEvents = 'none';\n    } else {\n      el.style.zIndex = null;\n      el.style.position = null;\n      el.style.pointerEvents = null;\n    }\n  }, [occlude, isRayCastOcclusion]);\n  React.useLayoutEffect(() => {\n    if (group.current) {\n      const currentRoot = root.current = ReactDOM.createRoot(el);\n      scene.updateMatrixWorld();\n\n      if (transform) {\n        el.style.cssText = `position:absolute;top:0;left:0;pointer-events:none;overflow:hidden;`;\n      } else {\n        const vec = calculatePosition(group.current, camera, size);\n        el.style.cssText = `position:absolute;top:0;left:0;transform:translate3d(${vec[0]}px,${vec[1]}px,0);transform-origin:0 0;`;\n      }\n\n      if (target) {\n        if (prepend) target.prepend(el);else target.appendChild(el);\n      }\n\n      return () => {\n        if (target) target.removeChild(el);\n        currentRoot.unmount();\n      };\n    }\n  }, [target, transform]);\n  React.useLayoutEffect(() => {\n    if (wrapperClass) el.className = wrapperClass;\n  }, [wrapperClass]);\n  const styles = React.useMemo(() => {\n    if (transform) {\n      return {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: size.width,\n        height: size.height,\n        transformStyle: 'preserve-3d',\n        pointerEvents: 'none'\n      };\n    } else {\n      return {\n        position: 'absolute',\n        transform: center ? 'translate3d(-50%,-50%,0)' : 'none',\n        ...(fullscreen && {\n          top: -size.height / 2,\n          left: -size.width / 2,\n          width: size.width,\n          height: size.height\n        }),\n        ...style\n      };\n    }\n  }, [style, center, fullscreen, size, transform]);\n  const transformInnerStyles = React.useMemo(() => ({\n    position: 'absolute',\n    pointerEvents\n  }), [pointerEvents]);\n  React.useLayoutEffect(() => {\n    isMeshSizeSet.current = false;\n\n    if (transform) {\n      var _root$current;\n\n      (_root$current = root.current) == null ? void 0 : _root$current.render( /*#__PURE__*/React.createElement(\"div\", {\n        ref: transformOuterRef,\n        style: styles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: transformInnerRef,\n        style: transformInnerStyles\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        className: className,\n        style: style,\n        children: children\n      }))));\n    } else {\n      var _root$current2;\n\n      (_root$current2 = root.current) == null ? void 0 : _root$current2.render( /*#__PURE__*/React.createElement(\"div\", {\n        ref: ref,\n        style: styles,\n        className: className,\n        children: children\n      }));\n    }\n  });\n  const visible = React.useRef(true);\n  useFrame(gl => {\n    if (group.current) {\n      camera.updateMatrixWorld();\n      group.current.updateWorldMatrix(true, false);\n      const vec = transform ? oldPosition.current : calculatePosition(group.current, camera, size);\n\n      if (transform || Math.abs(oldZoom.current - camera.zoom) > eps || Math.abs(oldPosition.current[0] - vec[0]) > eps || Math.abs(oldPosition.current[1] - vec[1]) > eps) {\n        const isBehindCamera = isObjectBehindCamera(group.current, camera);\n        let raytraceTarget = false;\n\n        if (isRayCastOcclusion) {\n          if (occlude !== 'blending') {\n            raytraceTarget = [scene];\n          } else if (Array.isArray(occlude)) {\n            raytraceTarget = occlude.map(item => item.current);\n          }\n        }\n\n        const previouslyVisible = visible.current;\n\n        if (raytraceTarget) {\n          const isvisible = isObjectVisible(group.current, camera, raycaster, raytraceTarget);\n          visible.current = isvisible && !isBehindCamera;\n        } else {\n          visible.current = !isBehindCamera;\n        }\n\n        if (previouslyVisible !== visible.current) {\n          if (onOcclude) onOcclude(!visible.current);else el.style.display = visible.current ? 'block' : 'none';\n        }\n\n        const halfRange = Math.floor(zIndexRange[0] / 2);\n        const zRange = occlude ? isRayCastOcclusion //\n        ? [zIndexRange[0], halfRange] : [halfRange - 1, 0] : zIndexRange;\n        el.style.zIndex = `${objectZIndex(group.current, camera, zRange)}`;\n\n        if (transform) {\n          const [widthHalf, heightHalf] = [size.width / 2, size.height / 2];\n          const fov = camera.projectionMatrix.elements[5] * heightHalf;\n          const {\n            isOrthographicCamera,\n            top,\n            left,\n            bottom,\n            right\n          } = camera;\n          const cameraMatrix = getCameraCSSMatrix(camera.matrixWorldInverse);\n          const cameraTransform = isOrthographicCamera ? `scale(${fov})translate(${epsilon(-(right + left) / 2)}px,${epsilon((top + bottom) / 2)}px)` : `translateZ(${fov}px)`;\n          let matrix = group.current.matrixWorld;\n\n          if (sprite) {\n            matrix = camera.matrixWorldInverse.clone().transpose().copyPosition(matrix).scale(group.current.scale);\n            matrix.elements[3] = matrix.elements[7] = matrix.elements[11] = 0;\n            matrix.elements[15] = 1;\n          }\n\n          el.style.width = size.width + 'px';\n          el.style.height = size.height + 'px';\n          el.style.perspective = isOrthographicCamera ? '' : `${fov}px`;\n\n          if (transformOuterRef.current && transformInnerRef.current) {\n            transformOuterRef.current.style.transform = `${cameraTransform}${cameraMatrix}translate(${widthHalf}px,${heightHalf}px)`;\n            transformInnerRef.current.style.transform = getObjectCSSMatrix(matrix, 1 / ((distanceFactor || 10) / 400));\n          }\n        } else {\n          const scale = distanceFactor === undefined ? 1 : objectScale(group.current, camera) * distanceFactor;\n          el.style.transform = `translate3d(${vec[0]}px,${vec[1]}px,0) scale(${scale})`;\n        }\n\n        oldPosition.current = vec;\n        oldZoom.current = camera.zoom;\n      }\n    }\n\n    if (!isRayCastOcclusion && occlusionMeshRef.current && !isMeshSizeSet.current) {\n      if (transform) {\n        if (transformOuterRef.current) {\n          const el = transformOuterRef.current.children[0];\n\n          if (el != null && el.clientWidth && el != null && el.clientHeight) {\n            const {\n              isOrthographicCamera\n            } = camera;\n\n            if (isOrthographicCamera || geometry) {\n              if (props.scale) {\n                if (!Array.isArray(props.scale)) {\n                  occlusionMeshRef.current.scale.setScalar(1 / props.scale);\n                } else if (props.scale instanceof Vector3) {\n                  occlusionMeshRef.current.scale.copy(props.scale.clone().divideScalar(1));\n                } else {\n                  occlusionMeshRef.current.scale.set(1 / props.scale[0], 1 / props.scale[1], 1 / props.scale[2]);\n                }\n              }\n            } else {\n              const ratio = (distanceFactor || 10) / 400;\n              const w = el.clientWidth * ratio;\n              const h = el.clientHeight * ratio;\n              occlusionMeshRef.current.scale.set(w, h, 1);\n            }\n\n            isMeshSizeSet.current = true;\n          }\n        }\n      } else {\n        const ele = el.children[0];\n\n        if (ele != null && ele.clientWidth && ele != null && ele.clientHeight) {\n          const ratio = 1 / viewport.factor;\n          const w = ele.clientWidth * ratio;\n          const h = ele.clientHeight * ratio;\n          occlusionMeshRef.current.scale.set(w, h, 1);\n          isMeshSizeSet.current = true;\n        }\n\n        occlusionMeshRef.current.lookAt(gl.camera.position);\n      }\n    }\n  });\n  const shaders = React.useMemo(() => ({\n    vertexShader: !transform ?\n    /* glsl */\n    `\n          /*\n            This shader is from the THREE's SpriteMaterial.\n            We need to turn the backing plane into a Sprite\n            (make it always face the camera) if \"transfrom\" \n            is false. \n          */\n          #include <common>\n\n          void main() {\n            vec2 center = vec2(0., 1.);\n            float rotation = 0.0;\n            \n            // This is somewhat arbitrary, but it seems to work well\n            // Need to figure out how to derive this dynamically if it even matters\n            float size = 0.03;\n\n            vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n            vec2 scale;\n            scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n            scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n            bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n            if ( isPerspective ) scale *= - mvPosition.z;\n\n            vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale * size;\n            vec2 rotatedPosition;\n            rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n            rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n            mvPosition.xy += rotatedPosition;\n\n            gl_Position = projectionMatrix * mvPosition;\n          }\n      ` : undefined,\n    fragmentShader:\n    /* glsl */\n    `\n        void main() {\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n      `\n  }), [transform]);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({}, props, {\n    ref: group\n  }), occlude && !isRayCastOcclusion && /*#__PURE__*/React.createElement(\"mesh\", {\n    castShadow: castShadow,\n    receiveShadow: receiveShadow,\n    ref: occlusionMeshRef\n  }, geometry || /*#__PURE__*/React.createElement(\"planeGeometry\", null), material || /*#__PURE__*/React.createElement(\"shaderMaterial\", {\n    side: DoubleSide,\n    vertexShader: shaders.vertexShader,\n    fragmentShader: shaders.fragmentShader\n  })));\n});\n\nexport { Html };\n"]},"metadata":{},"sourceType":"module"}