{"ast":null,"code":"import { Loader, FileLoader, DataTexture, RGBAFormat, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, Data3DTexture } from 'three'; // http://download.autodesk.com/us/systemdocs/help/2011/lustre/index.html?url=./files/WSc4e151a45a3b785a24c3d9a411df9298473-7ffd.htm,topicNumber=d0e9492\n\nclass LUT3dlLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('text');\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(str) {\n    // remove empty lines and comment lints\n    str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n    const lines = str.split(/[\\n\\r]+/g); // first line is the positions on the grid that are provided by the LUT\n\n    const gridLines = lines[0].trim().split(/\\s+/g).map(e => parseFloat(e));\n    const gridStep = gridLines[1] - gridLines[0];\n    const size = gridLines.length;\n\n    for (let i = 1, l = gridLines.length; i < l; i++) {\n      if (gridStep !== gridLines[i] - gridLines[i - 1]) {\n        throw new Error('LUT3dlLoader: Inconsistent grid size not supported.');\n      }\n    }\n\n    const dataArray = new Array(size * size * size * 4);\n    let index = 0;\n    let maxOutputValue = 0.0;\n\n    for (let i = 1, l = lines.length; i < l; i++) {\n      const line = lines[i].trim();\n      const split = line.split(/\\s/g);\n      const r = parseFloat(split[0]);\n      const g = parseFloat(split[1]);\n      const b = parseFloat(split[2]);\n      maxOutputValue = Math.max(maxOutputValue, r, g, b);\n      const bLayer = index % size;\n      const gLayer = Math.floor(index / size) % size;\n      const rLayer = Math.floor(index / (size * size)) % size; // b grows first, then g, then r\n\n      const pixelIndex = bLayer * size * size + gLayer * size + rLayer;\n      dataArray[4 * pixelIndex + 0] = r;\n      dataArray[4 * pixelIndex + 1] = g;\n      dataArray[4 * pixelIndex + 2] = b;\n      dataArray[4 * pixelIndex + 3] = 1.0;\n      index += 1;\n    } // Find the apparent bit depth of the stored RGB values and map the\n    // values to [ 0, 255 ].\n\n\n    const bits = Math.ceil(Math.log2(maxOutputValue));\n    const maxBitValue = Math.pow(2.0, bits);\n\n    for (let i = 0, l = dataArray.length; i < l; i += 4) {\n      const r = dataArray[i + 0];\n      const g = dataArray[i + 1];\n      const b = dataArray[i + 2];\n      dataArray[i + 0] = 255 * r / maxBitValue; // r\n\n      dataArray[i + 1] = 255 * g / maxBitValue; // g\n\n      dataArray[i + 2] = 255 * b / maxBitValue; // b\n    }\n\n    const data = new Uint8Array(dataArray);\n    const texture = new DataTexture();\n    texture.image.data = data;\n    texture.image.width = size;\n    texture.image.height = size * size;\n    texture.format = RGBAFormat;\n    texture.type = UnsignedByteType;\n    texture.magFilter = LinearFilter;\n    texture.minFilter = LinearFilter;\n    texture.wrapS = ClampToEdgeWrapping;\n    texture.wrapT = ClampToEdgeWrapping;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    const texture3D = new Data3DTexture();\n    texture3D.image.data = data;\n    texture3D.image.width = size;\n    texture3D.image.height = size;\n    texture3D.image.depth = size;\n    texture3D.format = RGBAFormat;\n    texture3D.type = UnsignedByteType;\n    texture3D.magFilter = LinearFilter;\n    texture3D.minFilter = LinearFilter;\n    texture3D.wrapS = ClampToEdgeWrapping;\n    texture3D.wrapT = ClampToEdgeWrapping;\n    texture3D.wrapR = ClampToEdgeWrapping;\n    texture3D.generateMipmaps = false;\n    texture3D.needsUpdate = true;\n    return {\n      size,\n      texture,\n      texture3D\n    };\n  }\n\n}\n\nexport { LUT3dlLoader };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/loaders/LUT3dlLoader.js"],"names":["Loader","FileLoader","DataTexture","RGBAFormat","UnsignedByteType","LinearFilter","ClampToEdgeWrapping","Data3DTexture","LUT3dlLoader","load","url","onLoad","onProgress","onError","loader","manager","setPath","path","setResponseType","text","parse","e","console","error","itemError","str","replace","trim","lines","split","gridLines","map","parseFloat","gridStep","size","length","i","l","Error","dataArray","Array","index","maxOutputValue","line","r","g","b","Math","max","bLayer","gLayer","floor","rLayer","pixelIndex","bits","ceil","log2","maxBitValue","pow","data","Uint8Array","texture","image","width","height","format","type","magFilter","minFilter","wrapS","wrapT","generateMipmaps","needsUpdate","texture3D","depth","wrapR"],"mappings":"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","sourcesContent":["import { Loader, FileLoader, DataTexture, RGBAFormat, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, Data3DTexture } from 'three';\n\n// http://download.autodesk.com/us/systemdocs/help/2011/lustre/index.html?url=./files/WSc4e151a45a3b785a24c3d9a411df9298473-7ffd.htm,topicNumber=d0e9492\nclass LUT3dlLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('text');\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(str) {\n    // remove empty lines and comment lints\n    str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n    const lines = str.split(/[\\n\\r]+/g); // first line is the positions on the grid that are provided by the LUT\n\n    const gridLines = lines[0].trim().split(/\\s+/g).map(e => parseFloat(e));\n    const gridStep = gridLines[1] - gridLines[0];\n    const size = gridLines.length;\n\n    for (let i = 1, l = gridLines.length; i < l; i++) {\n      if (gridStep !== gridLines[i] - gridLines[i - 1]) {\n        throw new Error('LUT3dlLoader: Inconsistent grid size not supported.');\n      }\n    }\n\n    const dataArray = new Array(size * size * size * 4);\n    let index = 0;\n    let maxOutputValue = 0.0;\n\n    for (let i = 1, l = lines.length; i < l; i++) {\n      const line = lines[i].trim();\n      const split = line.split(/\\s/g);\n      const r = parseFloat(split[0]);\n      const g = parseFloat(split[1]);\n      const b = parseFloat(split[2]);\n      maxOutputValue = Math.max(maxOutputValue, r, g, b);\n      const bLayer = index % size;\n      const gLayer = Math.floor(index / size) % size;\n      const rLayer = Math.floor(index / (size * size)) % size; // b grows first, then g, then r\n\n      const pixelIndex = bLayer * size * size + gLayer * size + rLayer;\n      dataArray[4 * pixelIndex + 0] = r;\n      dataArray[4 * pixelIndex + 1] = g;\n      dataArray[4 * pixelIndex + 2] = b;\n      dataArray[4 * pixelIndex + 3] = 1.0;\n      index += 1;\n    } // Find the apparent bit depth of the stored RGB values and map the\n    // values to [ 0, 255 ].\n\n\n    const bits = Math.ceil(Math.log2(maxOutputValue));\n    const maxBitValue = Math.pow(2.0, bits);\n\n    for (let i = 0, l = dataArray.length; i < l; i += 4) {\n      const r = dataArray[i + 0];\n      const g = dataArray[i + 1];\n      const b = dataArray[i + 2];\n      dataArray[i + 0] = 255 * r / maxBitValue; // r\n\n      dataArray[i + 1] = 255 * g / maxBitValue; // g\n\n      dataArray[i + 2] = 255 * b / maxBitValue; // b\n    }\n\n    const data = new Uint8Array(dataArray);\n    const texture = new DataTexture();\n    texture.image.data = data;\n    texture.image.width = size;\n    texture.image.height = size * size;\n    texture.format = RGBAFormat;\n    texture.type = UnsignedByteType;\n    texture.magFilter = LinearFilter;\n    texture.minFilter = LinearFilter;\n    texture.wrapS = ClampToEdgeWrapping;\n    texture.wrapT = ClampToEdgeWrapping;\n    texture.generateMipmaps = false;\n    texture.needsUpdate = true;\n    const texture3D = new Data3DTexture();\n    texture3D.image.data = data;\n    texture3D.image.width = size;\n    texture3D.image.height = size;\n    texture3D.image.depth = size;\n    texture3D.format = RGBAFormat;\n    texture3D.type = UnsignedByteType;\n    texture3D.magFilter = LinearFilter;\n    texture3D.minFilter = LinearFilter;\n    texture3D.wrapS = ClampToEdgeWrapping;\n    texture3D.wrapT = ClampToEdgeWrapping;\n    texture3D.wrapR = ClampToEdgeWrapping;\n    texture3D.generateMipmaps = false;\n    texture3D.needsUpdate = true;\n    return {\n      size,\n      texture,\n      texture3D\n    };\n  }\n\n}\n\nexport { LUT3dlLoader };\n"]},"metadata":{},"sourceType":"module"}