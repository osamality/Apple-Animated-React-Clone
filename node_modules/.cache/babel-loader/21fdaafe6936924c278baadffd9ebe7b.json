{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass VRButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n\n    function\n    /*device*/\n    showEnterVR() {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n\n      function\n      /*event*/\n      onSessionEnded() {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      } //\n\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n\n      button.onmouseenter = () => {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = () => {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = () => {\n        if (currentSession === null) {\n          var _xr; // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n\n\n          const optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking'].flat().filter(Boolean);\n          (_xr = navigator.xr) === null || _xr === void 0 ? void 0 : _xr.requestSession('immersive-vr', { ...sessionInit,\n            optionalFeatures\n          }).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      stylizeElement(button);\n      button.id = 'VRButton';\n      button.style.display = 'none' // Query for session mode\n      ;\n      navigator.xr.isSessionSupported('immersive-vr').then(supported => {\n        supported ? showEnterVR() : showWebXRNotFound();\n\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n  static registerSessionGrantedListener() {\n    if ('xr' in navigator) {\n      navigator.xr.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n\n}\n\n_defineProperty(VRButton, \"xrSessionIsGranted\", false);\n\nexport { VRButton };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/webxr/VRButton.js"],"names":["_defineProperty","VRButton","createButton","renderer","sessionInit","button","document","createElement","showEnterVR","currentSession","onSessionStarted","session","addEventListener","onSessionEnded","xr","setSession","textContent","removeEventListener","style","display","cursor","left","width","onmouseenter","opacity","onmouseleave","onclick","_xr","optionalFeatures","flat","filter","Boolean","navigator","requestSession","then","end","disableButton","showWebXRNotFound","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","xrSessionIsGranted","click","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","registerSessionGrantedListener"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass VRButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n\n    function\n      /*device*/\n    showEnterVR() {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n\n      function\n        /*event*/\n      onSessionEnded() {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      } //\n\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n\n      button.onmouseenter = () => {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = () => {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = () => {\n        if (currentSession === null) {\n          var _xr;\n\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n          const optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking'].flat().filter(Boolean);\n          (_xr = navigator.xr) === null || _xr === void 0 ? void 0 : _xr.requestSession('immersive-vr', { ...sessionInit,\n            optionalFeatures\n          }).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      stylizeElement(button);\n      button.id = 'VRButton';\n      button.style.display = 'none' // Query for session mode\n      ;\n      navigator.xr.isSessionSupported('immersive-vr').then(supported => {\n        supported ? showEnterVR() : showWebXRNotFound();\n\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n  static registerSessionGrantedListener() {\n    if ('xr' in navigator) {\n      navigator.xr.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n\n}\n\n_defineProperty(VRButton, \"xrSessionIsGranted\", false);\n\nexport { VRButton };\n"]},"metadata":{},"sourceType":"module"}