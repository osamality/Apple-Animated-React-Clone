{"ast":null,"code":"import { ExtrudeGeometry } from 'three';\n\nclass TextGeometry extends ExtrudeGeometry {\n  constructor(text, parameters) {\n    const {\n      bevelEnabled = false,\n      bevelSize = 8,\n      bevelThickness = 10,\n      font,\n      height = 50,\n      size = 100,\n      lineHeight = 1,\n      letterSpacing = 0,\n      ...rest\n    } = parameters;\n    const shapes = font.generateShapes(text, size, {\n      lineHeight,\n      letterSpacing\n    });\n    super(shapes, { ...rest,\n      bevelEnabled,\n      bevelSize,\n      bevelThickness,\n      depth: height\n    });\n    this.type = 'TextGeometry';\n  }\n\n}\n\nexport { TextGeometry as TextBufferGeometry, TextGeometry };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/geometries/TextGeometry.js"],"names":["ExtrudeGeometry","TextGeometry","constructor","text","parameters","bevelEnabled","bevelSize","bevelThickness","font","height","size","lineHeight","letterSpacing","rest","shapes","generateShapes","depth","type","TextBufferGeometry"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;;AAEA,MAAMC,YAAN,SAA2BD,eAA3B,CAA2C;AACzCE,EAAAA,WAAW,CAACC,IAAD,EAAOC,UAAP,EAAmB;AAC5B,UAAM;AACJC,MAAAA,YAAY,GAAG,KADX;AAEJC,MAAAA,SAAS,GAAG,CAFR;AAGJC,MAAAA,cAAc,GAAG,EAHb;AAIJC,MAAAA,IAJI;AAKJC,MAAAA,MAAM,GAAG,EALL;AAMJC,MAAAA,IAAI,GAAG,GANH;AAOJC,MAAAA,UAAU,GAAG,CAPT;AAQJC,MAAAA,aAAa,GAAG,CARZ;AASJ,SAAGC;AATC,QAUFT,UAVJ;AAWA,UAAMU,MAAM,GAAGN,IAAI,CAACO,cAAL,CAAoBZ,IAApB,EAA0BO,IAA1B,EAAgC;AAC7CC,MAAAA,UAD6C;AAE7CC,MAAAA;AAF6C,KAAhC,CAAf;AAIA,UAAME,MAAN,EAAc,EAAE,GAAGD,IAAL;AACZR,MAAAA,YADY;AAEZC,MAAAA,SAFY;AAGZC,MAAAA,cAHY;AAIZS,MAAAA,KAAK,EAAEP;AAJK,KAAd;AAMA,SAAKQ,IAAL,GAAY,cAAZ;AACD;;AAxBwC;;AA4B3C,SAAShB,YAAY,IAAIiB,kBAAzB,EAA6CjB,YAA7C","sourcesContent":["import { ExtrudeGeometry } from 'three';\n\nclass TextGeometry extends ExtrudeGeometry {\n  constructor(text, parameters) {\n    const {\n      bevelEnabled = false,\n      bevelSize = 8,\n      bevelThickness = 10,\n      font,\n      height = 50,\n      size = 100,\n      lineHeight = 1,\n      letterSpacing = 0,\n      ...rest\n    } = parameters;\n    const shapes = font.generateShapes(text, size, {\n      lineHeight,\n      letterSpacing\n    });\n    super(shapes, { ...rest,\n      bevelEnabled,\n      bevelSize,\n      bevelThickness,\n      depth: height\n    });\n    this.type = 'TextGeometry';\n  }\n\n}\n\nexport { TextGeometry as TextBufferGeometry, TextGeometry };\n"]},"metadata":{},"sourceType":"module"}