{"ast":null,"code":"export function arrayToBox(nodeIndex32, array, target) {\n  target.min.x = array[nodeIndex32];\n  target.min.y = array[nodeIndex32 + 1];\n  target.min.z = array[nodeIndex32 + 2];\n  target.max.x = array[nodeIndex32 + 3];\n  target.max.y = array[nodeIndex32 + 4];\n  target.max.z = array[nodeIndex32 + 5];\n  return target;\n}\nexport function getLongestEdgeIndex(bounds) {\n  let splitDimIdx = -1;\n  let splitDist = -Infinity;\n\n  for (let i = 0; i < 3; i++) {\n    const dist = bounds[i + 3] - bounds[i];\n\n    if (dist > splitDist) {\n      splitDist = dist;\n      splitDimIdx = i;\n    }\n  }\n\n  return splitDimIdx;\n} // copies bounds a into bounds b\n\nexport function copyBounds(source, target) {\n  target.set(source);\n} // sets bounds target to the union of bounds a and b\n\nexport function unionBounds(a, b, target) {\n  let aVal, bVal;\n\n  for (let d = 0; d < 3; d++) {\n    const d3 = d + 3; // set the minimum values\n\n    aVal = a[d];\n    bVal = b[d];\n    target[d] = aVal < bVal ? aVal : bVal; // set the max values\n\n    aVal = a[d3];\n    bVal = b[d3];\n    target[d3] = aVal > bVal ? aVal : bVal;\n  }\n} // expands the given bounds by the provided triangle bounds\n\nexport function expandByTriangleBounds(startIndex, triangleBounds, bounds) {\n  for (let d = 0; d < 3; d++) {\n    const tCenter = triangleBounds[startIndex + 2 * d];\n    const tHalf = triangleBounds[startIndex + 2 * d + 1];\n    const tMin = tCenter - tHalf;\n    const tMax = tCenter + tHalf;\n\n    if (tMin < bounds[d]) {\n      bounds[d] = tMin;\n    }\n\n    if (tMax > bounds[d + 3]) {\n      bounds[d + 3] = tMax;\n    }\n  }\n} // compute bounds surface area\n\nexport function computeSurfaceArea(bounds) {\n  const d0 = bounds[3] - bounds[0];\n  const d1 = bounds[4] - bounds[1];\n  const d2 = bounds[5] - bounds[2];\n  return 2 * (d0 * d1 + d1 * d2 + d2 * d0);\n}","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js"],"names":["arrayToBox","nodeIndex32","array","target","min","x","y","z","max","getLongestEdgeIndex","bounds","splitDimIdx","splitDist","Infinity","i","dist","copyBounds","source","set","unionBounds","a","b","aVal","bVal","d","d3","expandByTriangleBounds","startIndex","triangleBounds","tCenter","tHalf","tMin","tMax","computeSurfaceArea","d0","d1","d2"],"mappings":"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","sourcesContent":["export function arrayToBox( nodeIndex32, array, target ) {\n\n\ttarget.min.x = array[ nodeIndex32 ];\n\ttarget.min.y = array[ nodeIndex32 + 1 ];\n\ttarget.min.z = array[ nodeIndex32 + 2 ];\n\n\ttarget.max.x = array[ nodeIndex32 + 3 ];\n\ttarget.max.y = array[ nodeIndex32 + 4 ];\n\ttarget.max.z = array[ nodeIndex32 + 5 ];\n\n\treturn target;\n\n}\n\nexport function getLongestEdgeIndex( bounds ) {\n\n\tlet splitDimIdx = - 1;\n\tlet splitDist = - Infinity;\n\n\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\tconst dist = bounds[ i + 3 ] - bounds[ i ];\n\t\tif ( dist > splitDist ) {\n\n\t\t\tsplitDist = dist;\n\t\t\tsplitDimIdx = i;\n\n\t\t}\n\n\t}\n\n\treturn splitDimIdx;\n\n}\n\n// copies bounds a into bounds b\nexport function copyBounds( source, target ) {\n\n\ttarget.set( source );\n\n}\n\n// sets bounds target to the union of bounds a and b\nexport function unionBounds( a, b, target ) {\n\n\tlet aVal, bVal;\n\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\tconst d3 = d + 3;\n\n\t\t// set the minimum values\n\t\taVal = a[ d ];\n\t\tbVal = b[ d ];\n\t\ttarget[ d ] = aVal < bVal ? aVal : bVal;\n\n\t\t// set the max values\n\t\taVal = a[ d3 ];\n\t\tbVal = b[ d3 ];\n\t\ttarget[ d3 ] = aVal > bVal ? aVal : bVal;\n\n\t}\n\n}\n\n// expands the given bounds by the provided triangle bounds\nexport function expandByTriangleBounds( startIndex, triangleBounds, bounds ) {\n\n\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\tconst tCenter = triangleBounds[ startIndex + 2 * d ];\n\t\tconst tHalf = triangleBounds[ startIndex + 2 * d + 1 ];\n\n\t\tconst tMin = tCenter - tHalf;\n\t\tconst tMax = tCenter + tHalf;\n\n\t\tif ( tMin < bounds[ d ] ) {\n\n\t\t\tbounds[ d ] = tMin;\n\n\t\t}\n\n\t\tif ( tMax > bounds[ d + 3 ] ) {\n\n\t\t\tbounds[ d + 3 ] = tMax;\n\n\t\t}\n\n\t}\n\n}\n\n// compute bounds surface area\nexport function computeSurfaceArea( bounds ) {\n\n\tconst d0 = bounds[ 3 ] - bounds[ 0 ];\n\tconst d1 = bounds[ 4 ] - bounds[ 1 ];\n\tconst d2 = bounds[ 5 ] - bounds[ 2 ];\n\n\treturn 2 * ( d0 * d1 + d1 * d2 + d2 * d0 );\n\n}\n"]},"metadata":{},"sourceType":"module"}