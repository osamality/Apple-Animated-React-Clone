{"ast":null,"code":"///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\nconst KHR_SUPERCOMPRESSION_NONE = 0;\nconst KHR_SUPERCOMPRESSION_BASISLZ = 1;\nconst KHR_SUPERCOMPRESSION_ZSTD = 2;\nconst KHR_SUPERCOMPRESSION_ZLIB = 3; ///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nconst KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT = 0;\nconst KHR_DF_VENDORID_KHRONOS = 0;\nconst KHR_DF_VERSION = 2;\nconst KHR_DF_MODEL_UNSPECIFIED = 0;\nconst KHR_DF_MODEL_RGBSDA = 1; // ...\n\nconst KHR_DF_MODEL_ETC1 = 160;\nconst KHR_DF_MODEL_ETC2 = 161;\nconst KHR_DF_MODEL_ASTC = 162;\nconst KHR_DF_MODEL_ETC1S = 163;\nconst KHR_DF_MODEL_UASTC = 166;\nconst KHR_DF_FLAG_ALPHA_STRAIGHT = 0;\nconst KHR_DF_FLAG_ALPHA_PREMULTIPLIED = 1;\nconst KHR_DF_TRANSFER_UNSPECIFIED = 0;\nconst KHR_DF_TRANSFER_LINEAR = 1;\nconst KHR_DF_TRANSFER_SRGB = 2;\nconst KHR_DF_TRANSFER_ITU = 3;\nconst KHR_DF_TRANSFER_NTSC = 4;\nconst KHR_DF_TRANSFER_SLOG = 5;\nconst KHR_DF_TRANSFER_SLOG2 = 6;\nconst KHR_DF_TRANSFER_BT1886 = 7;\nconst KHR_DF_TRANSFER_HLG_OETF = 8;\nconst KHR_DF_TRANSFER_HLG_EOTF = 9;\nconst KHR_DF_TRANSFER_PQ_EOTF = 10;\nconst KHR_DF_TRANSFER_PQ_OETF = 11;\nconst KHR_DF_TRANSFER_DCIP3 = 12;\nconst KHR_DF_TRANSFER_PAL_OETF = 13;\nconst KHR_DF_TRANSFER_PAL625_EOTF = 14;\nconst KHR_DF_TRANSFER_ST240 = 15;\nconst KHR_DF_TRANSFER_ACESCC = 16;\nconst KHR_DF_TRANSFER_ACESCCT = 17;\nconst KHR_DF_TRANSFER_ADOBERGB = 18;\nconst KHR_DF_PRIMARIES_UNSPECIFIED = 0;\nconst KHR_DF_PRIMARIES_BT709 = 1;\nconst KHR_DF_PRIMARIES_BT601_EBU = 2;\nconst KHR_DF_PRIMARIES_BT601_SMPTE = 3;\nconst KHR_DF_PRIMARIES_BT2020 = 4;\nconst KHR_DF_PRIMARIES_CIEXYZ = 5;\nconst KHR_DF_PRIMARIES_ACES = 6;\nconst KHR_DF_PRIMARIES_ACESCC = 7;\nconst KHR_DF_PRIMARIES_NTSC1953 = 8;\nconst KHR_DF_PRIMARIES_PAL525 = 9;\nconst KHR_DF_PRIMARIES_DISPLAYP3 = 10;\nconst KHR_DF_PRIMARIES_ADOBERGB = 11;\nconst KHR_DF_CHANNEL_RGBSDA_RED = 0;\nconst KHR_DF_CHANNEL_RGBSDA_GREEN = 1;\nconst KHR_DF_CHANNEL_RGBSDA_BLUE = 2;\nconst KHR_DF_CHANNEL_RGBSDA_STENCIL = 13;\nconst KHR_DF_CHANNEL_RGBSDA_DEPTH = 14;\nconst KHR_DF_CHANNEL_RGBSDA_ALPHA = 15;\nconst KHR_DF_SAMPLE_DATATYPE_FLOAT = 0x80;\nconst KHR_DF_SAMPLE_DATATYPE_SIGNED = 0x40;\nconst KHR_DF_SAMPLE_DATATYPE_EXPONENT = 0x20;\nconst KHR_DF_SAMPLE_DATATYPE_LINEAR = 0x10; ///////////////////////////////////////////////////\n// VK FORMAT.\n///////////////////////////////////////////////////\n\nconst VK_FORMAT_UNDEFINED = 0;\nconst VK_FORMAT_R4G4_UNORM_PACK8 = 1;\nconst VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2;\nconst VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3;\nconst VK_FORMAT_R5G6B5_UNORM_PACK16 = 4;\nconst VK_FORMAT_B5G6R5_UNORM_PACK16 = 5;\nconst VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6;\nconst VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7;\nconst VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8;\nconst VK_FORMAT_R8_UNORM = 9;\nconst VK_FORMAT_R8_SNORM = 10;\nconst VK_FORMAT_R8_UINT = 13;\nconst VK_FORMAT_R8_SINT = 14;\nconst VK_FORMAT_R8_SRGB = 15;\nconst VK_FORMAT_R8G8_UNORM = 16;\nconst VK_FORMAT_R8G8_SNORM = 17;\nconst VK_FORMAT_R8G8_UINT = 20;\nconst VK_FORMAT_R8G8_SINT = 21;\nconst VK_FORMAT_R8G8_SRGB = 22;\nconst VK_FORMAT_R8G8B8_UNORM = 23;\nconst VK_FORMAT_R8G8B8_SNORM = 24;\nconst VK_FORMAT_R8G8B8_UINT = 27;\nconst VK_FORMAT_R8G8B8_SINT = 28;\nconst VK_FORMAT_R8G8B8_SRGB = 29;\nconst VK_FORMAT_B8G8R8_UNORM = 30;\nconst VK_FORMAT_B8G8R8_SNORM = 31;\nconst VK_FORMAT_B8G8R8_UINT = 34;\nconst VK_FORMAT_B8G8R8_SINT = 35;\nconst VK_FORMAT_B8G8R8_SRGB = 36;\nconst VK_FORMAT_R8G8B8A8_UNORM = 37;\nconst VK_FORMAT_R8G8B8A8_SNORM = 38;\nconst VK_FORMAT_R8G8B8A8_UINT = 41;\nconst VK_FORMAT_R8G8B8A8_SINT = 42;\nconst VK_FORMAT_R8G8B8A8_SRGB = 43;\nconst VK_FORMAT_B8G8R8A8_UNORM = 44;\nconst VK_FORMAT_B8G8R8A8_SNORM = 45;\nconst VK_FORMAT_B8G8R8A8_UINT = 48;\nconst VK_FORMAT_B8G8R8A8_SINT = 49;\nconst VK_FORMAT_B8G8R8A8_SRGB = 50;\nconst VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58;\nconst VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59;\nconst VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62;\nconst VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63;\nconst VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64;\nconst VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65;\nconst VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68;\nconst VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69;\nconst VK_FORMAT_R16_UNORM = 70;\nconst VK_FORMAT_R16_SNORM = 71;\nconst VK_FORMAT_R16_UINT = 74;\nconst VK_FORMAT_R16_SINT = 75;\nconst VK_FORMAT_R16_SFLOAT = 76;\nconst VK_FORMAT_R16G16_UNORM = 77;\nconst VK_FORMAT_R16G16_SNORM = 78;\nconst VK_FORMAT_R16G16_UINT = 81;\nconst VK_FORMAT_R16G16_SINT = 82;\nconst VK_FORMAT_R16G16_SFLOAT = 83;\nconst VK_FORMAT_R16G16B16_UNORM = 84;\nconst VK_FORMAT_R16G16B16_SNORM = 85;\nconst VK_FORMAT_R16G16B16_UINT = 88;\nconst VK_FORMAT_R16G16B16_SINT = 89;\nconst VK_FORMAT_R16G16B16_SFLOAT = 90;\nconst VK_FORMAT_R16G16B16A16_UNORM = 91;\nconst VK_FORMAT_R16G16B16A16_SNORM = 92;\nconst VK_FORMAT_R16G16B16A16_UINT = 95;\nconst VK_FORMAT_R16G16B16A16_SINT = 96;\nconst VK_FORMAT_R16G16B16A16_SFLOAT = 97;\nconst VK_FORMAT_R32_UINT = 98;\nconst VK_FORMAT_R32_SINT = 99;\nconst VK_FORMAT_R32_SFLOAT = 100;\nconst VK_FORMAT_R32G32_UINT = 101;\nconst VK_FORMAT_R32G32_SINT = 102;\nconst VK_FORMAT_R32G32_SFLOAT = 103;\nconst VK_FORMAT_R32G32B32_UINT = 104;\nconst VK_FORMAT_R32G32B32_SINT = 105;\nconst VK_FORMAT_R32G32B32_SFLOAT = 106;\nconst VK_FORMAT_R32G32B32A32_UINT = 107;\nconst VK_FORMAT_R32G32B32A32_SINT = 108;\nconst VK_FORMAT_R32G32B32A32_SFLOAT = 109;\nconst VK_FORMAT_R64_UINT = 110;\nconst VK_FORMAT_R64_SINT = 111;\nconst VK_FORMAT_R64_SFLOAT = 112;\nconst VK_FORMAT_R64G64_UINT = 113;\nconst VK_FORMAT_R64G64_SINT = 114;\nconst VK_FORMAT_R64G64_SFLOAT = 115;\nconst VK_FORMAT_R64G64B64_UINT = 116;\nconst VK_FORMAT_R64G64B64_SINT = 117;\nconst VK_FORMAT_R64G64B64_SFLOAT = 118;\nconst VK_FORMAT_R64G64B64A64_UINT = 119;\nconst VK_FORMAT_R64G64B64A64_SINT = 120;\nconst VK_FORMAT_R64G64B64A64_SFLOAT = 121;\nconst VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122;\nconst VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123;\nconst VK_FORMAT_D16_UNORM = 124;\nconst VK_FORMAT_X8_D24_UNORM_PACK32 = 125;\nconst VK_FORMAT_D32_SFLOAT = 126;\nconst VK_FORMAT_S8_UINT = 127;\nconst VK_FORMAT_D16_UNORM_S8_UINT = 128;\nconst VK_FORMAT_D24_UNORM_S8_UINT = 129;\nconst VK_FORMAT_D32_SFLOAT_S8_UINT = 130;\nconst VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131;\nconst VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132;\nconst VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133;\nconst VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134;\nconst VK_FORMAT_BC2_UNORM_BLOCK = 135;\nconst VK_FORMAT_BC2_SRGB_BLOCK = 136;\nconst VK_FORMAT_BC3_UNORM_BLOCK = 137;\nconst VK_FORMAT_BC3_SRGB_BLOCK = 138;\nconst VK_FORMAT_BC4_UNORM_BLOCK = 139;\nconst VK_FORMAT_BC4_SNORM_BLOCK = 140;\nconst VK_FORMAT_BC5_UNORM_BLOCK = 141;\nconst VK_FORMAT_BC5_SNORM_BLOCK = 142;\nconst VK_FORMAT_BC6H_UFLOAT_BLOCK = 143;\nconst VK_FORMAT_BC6H_SFLOAT_BLOCK = 144;\nconst VK_FORMAT_BC7_UNORM_BLOCK = 145;\nconst VK_FORMAT_BC7_SRGB_BLOCK = 146;\nconst VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147;\nconst VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148;\nconst VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149;\nconst VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150;\nconst VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151;\nconst VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152;\nconst VK_FORMAT_EAC_R11_UNORM_BLOCK = 153;\nconst VK_FORMAT_EAC_R11_SNORM_BLOCK = 154;\nconst VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155;\nconst VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156;\nconst VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157;\nconst VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158;\nconst VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159;\nconst VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160;\nconst VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161;\nconst VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162;\nconst VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163;\nconst VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164;\nconst VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165;\nconst VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166;\nconst VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167;\nconst VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168;\nconst VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169;\nconst VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170;\nconst VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171;\nconst VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172;\nconst VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173;\nconst VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174;\nconst VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175;\nconst VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176;\nconst VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177;\nconst VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178;\nconst VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179;\nconst VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180;\nconst VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181;\nconst VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182;\nconst VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183;\nconst VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184;\nconst VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007;\nconst VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008;\nconst VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009;\nconst VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010;\nconst VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011;\nconst VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017;\nconst VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018;\nconst VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019;\nconst VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020;\nconst VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021;\nconst VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000;\nconst VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001;\nconst VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002;\nconst VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003;\nconst VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004;\nconst VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005;\nconst VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006;\nconst VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007;\nconst VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000;\nconst VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001;\nconst VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002;\nconst VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003;\nconst VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004;\nconst VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005;\nconst VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006;\nconst VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007;\nconst VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008;\nconst VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009;\nconst VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010;\nconst VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011;\nconst VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012;\nconst VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013;\nconst VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000;\nconst VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001;\n/**\r\n * Represents an unpacked KTX 2.0 texture container. Data for individual mip levels are stored in\r\n * the `.levels` array, typically compressed in Basis Universal formats. Additional properties\r\n * provide metadata required to process, transcode, and upload these textures.\r\n */\n\nclass KTX2Container {\n  constructor() {\n    this.vkFormat = VK_FORMAT_UNDEFINED;\n    this.typeSize = 1;\n    this.pixelWidth = 0;\n    this.pixelHeight = 0;\n    this.pixelDepth = 0;\n    this.layerCount = 0;\n    this.faceCount = 1;\n    this.supercompressionScheme = KHR_SUPERCOMPRESSION_NONE;\n    this.levels = [];\n    this.dataFormatDescriptor = [{\n      vendorId: KHR_DF_VENDORID_KHRONOS,\n      descriptorType: KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,\n      descriptorBlockSize: 0,\n      versionNumber: KHR_DF_VERSION,\n      colorModel: KHR_DF_MODEL_UNSPECIFIED,\n      colorPrimaries: KHR_DF_PRIMARIES_BT709,\n      transferFunction: KHR_DF_TRANSFER_SRGB,\n      flags: KHR_DF_FLAG_ALPHA_STRAIGHT,\n      texelBlockDimension: [0, 0, 0, 0],\n      bytesPlane: [0, 0, 0, 0, 0, 0, 0, 0],\n      samples: []\n    }];\n    this.keyValue = {};\n    this.globalData = null;\n  }\n\n}\n\nclass BufferReader {\n  constructor(data, byteOffset, byteLength, littleEndian) {\n    this._dataView = void 0;\n    this._littleEndian = void 0;\n    this._offset = void 0;\n    this._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);\n    this._littleEndian = littleEndian;\n    this._offset = 0;\n  }\n\n  _nextUint8() {\n    const value = this._dataView.getUint8(this._offset);\n\n    this._offset += 1;\n    return value;\n  }\n\n  _nextUint16() {\n    const value = this._dataView.getUint16(this._offset, this._littleEndian);\n\n    this._offset += 2;\n    return value;\n  }\n\n  _nextUint32() {\n    const value = this._dataView.getUint32(this._offset, this._littleEndian);\n\n    this._offset += 4;\n    return value;\n  }\n\n  _nextUint64() {\n    const left = this._dataView.getUint32(this._offset, this._littleEndian);\n\n    const right = this._dataView.getUint32(this._offset + 4, this._littleEndian); // TODO(cleanup): Just test this...\n    // const value = this._littleEndian ? left + (2 ** 32 * right) : (2 ** 32 * left) + right;\n\n\n    const value = left + 2 ** 32 * right;\n    this._offset += 8;\n    return value;\n  }\n\n  _nextInt32() {\n    const value = this._dataView.getInt32(this._offset, this._littleEndian);\n\n    this._offset += 4;\n    return value;\n  }\n\n  _skip(bytes) {\n    this._offset += bytes;\n    return this;\n  }\n\n  _scan(maxByteLength, term) {\n    if (term === void 0) {\n      term = 0x00;\n    }\n\n    const byteOffset = this._offset;\n    let byteLength = 0;\n\n    while (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n      byteLength++;\n      this._offset++;\n    }\n\n    if (byteLength < maxByteLength) this._offset++;\n    return new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + byteOffset, byteLength);\n  }\n\n} ///////////////////////////////////////////////////\n// Common.\n///////////////////////////////////////////////////\n\n\nconst KTX_WRITER = \"KTX-Parse v\" + \"0.4.5\";\nconst NUL = new Uint8Array([0x00]); ///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nconst KTX2_ID = [// '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n0xab, 0x4b, 0x54, 0x58, 0x20, 0x32, 0x30, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a];\nconst HEADER_BYTE_LENGTH = 68; // 13 * 4 + 2 * 8\n\n/** Encodes text to an ArrayBuffer. */\n\nfunction encodeText(text) {\n  if (typeof TextEncoder !== 'undefined') {\n    return new TextEncoder().encode(text);\n  }\n\n  return Buffer.from(text);\n}\n/** Decodes an ArrayBuffer to text. */\n\n\nfunction decodeText(buffer) {\n  if (typeof TextDecoder !== 'undefined') {\n    return new TextDecoder().decode(buffer);\n  }\n\n  return Buffer.from(buffer).toString('utf8');\n}\n/** Concatenates N ArrayBuffers. */\n\n\nfunction concat(buffers) {\n  let totalByteLength = 0;\n\n  for (const buffer of buffers) {\n    totalByteLength += buffer.byteLength;\n  }\n\n  const result = new Uint8Array(totalByteLength);\n  let byteOffset = 0;\n\n  for (const buffer of buffers) {\n    result.set(new Uint8Array(buffer), byteOffset);\n    byteOffset += buffer.byteLength;\n  }\n\n  return result;\n}\n/**\r\n * Parses a KTX 2.0 file, returning an unpacked {@link KTX2Container} instance with all associated\r\n * data. The container's mip levels and other binary data are pointers into the original file, not\r\n * copies, so the original file should not be overwritten after reading.\r\n *\r\n * @param data Bytes of KTX 2.0 file, as Uint8Array or Buffer.\r\n */\n\n\nfunction read(data) {\n  ///////////////////////////////////////////////////\n  // KTX 2.0 Identifier.\n  ///////////////////////////////////////////////////\n  const id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);\n\n  if (id[0] !== KTX2_ID[0] || // '´'\n  id[1] !== KTX2_ID[1] || // 'K'\n  id[2] !== KTX2_ID[2] || // 'T'\n  id[3] !== KTX2_ID[3] || // 'X'\n  id[4] !== KTX2_ID[4] || // ' '\n  id[5] !== KTX2_ID[5] || // '2'\n  id[6] !== KTX2_ID[6] || // '0'\n  id[7] !== KTX2_ID[7] || // 'ª'\n  id[8] !== KTX2_ID[8] || // '\\r'\n  id[9] !== KTX2_ID[9] || // '\\n'\n  id[10] !== KTX2_ID[10] || // '\\x1A'\n  id[11] !== KTX2_ID[11] // '\\n'\n  ) {\n      throw new Error('Missing KTX 2.0 identifier.');\n    }\n\n  const container = new KTX2Container(); ///////////////////////////////////////////////////\n  // Header.\n  ///////////////////////////////////////////////////\n\n  const headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;\n  const headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);\n  container.vkFormat = headerReader._nextUint32();\n  container.typeSize = headerReader._nextUint32();\n  container.pixelWidth = headerReader._nextUint32();\n  container.pixelHeight = headerReader._nextUint32();\n  container.pixelDepth = headerReader._nextUint32();\n  container.layerCount = headerReader._nextUint32();\n  container.faceCount = headerReader._nextUint32();\n\n  const levelCount = headerReader._nextUint32();\n\n  container.supercompressionScheme = headerReader._nextUint32();\n\n  const dfdByteOffset = headerReader._nextUint32();\n\n  const dfdByteLength = headerReader._nextUint32();\n\n  const kvdByteOffset = headerReader._nextUint32();\n\n  const kvdByteLength = headerReader._nextUint32();\n\n  const sgdByteOffset = headerReader._nextUint64();\n\n  const sgdByteLength = headerReader._nextUint64(); ///////////////////////////////////////////////////\n  // Level Index.\n  ///////////////////////////////////////////////////\n\n\n  const levelByteLength = levelCount * 3 * 8;\n  const levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);\n\n  for (let i = 0; i < levelCount; i++) {\n    container.levels.push({\n      levelData: new Uint8Array(data.buffer, data.byteOffset + levelReader._nextUint64(), levelReader._nextUint64()),\n      uncompressedByteLength: levelReader._nextUint64()\n    });\n  } ///////////////////////////////////////////////////\n  // Data Format Descriptor (DFD).\n  ///////////////////////////////////////////////////\n\n\n  const dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);\n  const dfd = {\n    vendorId: dfdReader._skip(4\n    /* totalSize */\n    )._nextUint16(),\n    descriptorType: dfdReader._nextUint16(),\n    versionNumber: dfdReader._nextUint16(),\n    descriptorBlockSize: dfdReader._nextUint16(),\n    colorModel: dfdReader._nextUint8(),\n    colorPrimaries: dfdReader._nextUint8(),\n    transferFunction: dfdReader._nextUint8(),\n    flags: dfdReader._nextUint8(),\n    texelBlockDimension: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n    bytesPlane: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n    samples: []\n  };\n  const sampleStart = 6;\n  const sampleWords = 4;\n  const numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n\n  for (let i = 0; i < numSamples; i++) {\n    const sample = {\n      bitOffset: dfdReader._nextUint16(),\n      bitLength: dfdReader._nextUint8(),\n      channelType: dfdReader._nextUint8(),\n      samplePosition: [dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8(), dfdReader._nextUint8()],\n      sampleLower: -Infinity,\n      sampleUpper: Infinity\n    };\n\n    if (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n      sample.sampleLower = dfdReader._nextInt32();\n      sample.sampleUpper = dfdReader._nextInt32();\n    } else {\n      sample.sampleLower = dfdReader._nextUint32();\n      sample.sampleUpper = dfdReader._nextUint32();\n    }\n\n    dfd.samples[i] = sample;\n  }\n\n  container.dataFormatDescriptor.length = 0;\n  container.dataFormatDescriptor.push(dfd); ///////////////////////////////////////////////////\n  // Key/Value Data (KVD).\n  ///////////////////////////////////////////////////\n\n  const kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n\n  while (kvdReader._offset < kvdByteLength) {\n    const keyValueByteLength = kvdReader._nextUint32();\n\n    const keyData = kvdReader._scan(keyValueByteLength);\n\n    const key = decodeText(keyData);\n\n    const valueData = kvdReader._scan(keyValueByteLength - keyData.byteLength);\n\n    container.keyValue[key] = key.match(/^ktx/i) ? decodeText(valueData) : valueData; // 4-byte alignment.\n\n    if (kvdReader._offset % 4) kvdReader._skip(4 - kvdReader._offset % 4);\n  } ///////////////////////////////////////////////////\n  // Supercompression Global Data (SGD).\n  ///////////////////////////////////////////////////\n\n\n  if (sgdByteLength <= 0) return container;\n  const sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n\n  const endpointCount = sgdReader._nextUint16();\n\n  const selectorCount = sgdReader._nextUint16();\n\n  const endpointsByteLength = sgdReader._nextUint32();\n\n  const selectorsByteLength = sgdReader._nextUint32();\n\n  const tablesByteLength = sgdReader._nextUint32();\n\n  const extendedByteLength = sgdReader._nextUint32();\n\n  const imageDescs = [];\n\n  for (let i = 0; i < levelCount; i++) {\n    imageDescs.push({\n      imageFlags: sgdReader._nextUint32(),\n      rgbSliceByteOffset: sgdReader._nextUint32(),\n      rgbSliceByteLength: sgdReader._nextUint32(),\n      alphaSliceByteOffset: sgdReader._nextUint32(),\n      alphaSliceByteLength: sgdReader._nextUint32()\n    });\n  }\n\n  const endpointsByteOffset = sgdByteOffset + sgdReader._offset;\n  const selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n  const tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n  const extendedByteOffset = tablesByteOffset + tablesByteLength;\n  const endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);\n  const selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);\n  const tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);\n  const extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);\n  container.globalData = {\n    endpointCount,\n    selectorCount,\n    imageDescs,\n    endpointsData,\n    selectorsData,\n    tablesData,\n    extendedData\n  };\n  return container;\n}\n\nconst DEFAULT_OPTIONS = {\n  keepWriter: false\n};\n/**\r\n * Serializes a {@link KTX2Container} instance to a KTX 2.0 file. Mip levels and other binary data\r\n * are copied into the resulting Uint8Array, so the original container can safely be edited or\r\n * destroyed after it is serialized.\r\n *\r\n * Options:\r\n * - keepWriter: If true, 'KTXWriter' key/value field is written as provided by the container.\r\n * \t\tOtherwise, a string for the current ktx-parse version is generated. Default: false.\r\n *\r\n * @param container\r\n * @param options\r\n */\n\nfunction write(container, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  options = { ...DEFAULT_OPTIONS,\n    ...options\n  }; ///////////////////////////////////////////////////\n  // Supercompression Global Data (SGD).\n  ///////////////////////////////////////////////////\n\n  let sgdBuffer = new ArrayBuffer(0);\n\n  if (container.globalData) {\n    const sgdHeaderBuffer = new ArrayBuffer(20 + container.globalData.imageDescs.length * 5 * 4);\n    const sgdHeaderView = new DataView(sgdHeaderBuffer);\n    sgdHeaderView.setUint16(0, container.globalData.endpointCount, true);\n    sgdHeaderView.setUint16(2, container.globalData.selectorCount, true);\n    sgdHeaderView.setUint32(4, container.globalData.endpointsData.byteLength, true);\n    sgdHeaderView.setUint32(8, container.globalData.selectorsData.byteLength, true);\n    sgdHeaderView.setUint32(12, container.globalData.tablesData.byteLength, true);\n    sgdHeaderView.setUint32(16, container.globalData.extendedData.byteLength, true);\n\n    for (let i = 0; i < container.globalData.imageDescs.length; i++) {\n      const imageDesc = container.globalData.imageDescs[i];\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 0, imageDesc.imageFlags, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 4, imageDesc.rgbSliceByteOffset, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 8, imageDesc.rgbSliceByteLength, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 12, imageDesc.alphaSliceByteOffset, true);\n      sgdHeaderView.setUint32(20 + i * 5 * 4 + 16, imageDesc.alphaSliceByteLength, true);\n    }\n\n    sgdBuffer = concat([sgdHeaderBuffer, container.globalData.endpointsData, container.globalData.selectorsData, container.globalData.tablesData, container.globalData.extendedData]);\n  } ///////////////////////////////////////////////////\n  // Key/Value Data (KVD).\n  ///////////////////////////////////////////////////\n\n\n  const keyValueData = [];\n  let keyValue = container.keyValue;\n\n  if (!options.keepWriter) {\n    keyValue = { ...container.keyValue,\n      KTXwriter: KTX_WRITER\n    };\n  }\n\n  for (const key in keyValue) {\n    const value = keyValue[key];\n    const keyData = encodeText(key);\n    const valueData = typeof value === 'string' ? encodeText(value) : value;\n    const kvByteLength = keyData.byteLength + 1 + valueData.byteLength + 1;\n    const kvPadding = kvByteLength % 4 ? 4 - kvByteLength % 4 : 0; // align(4)\n\n    keyValueData.push(concat([new Uint32Array([kvByteLength]), keyData, NUL, valueData, NUL, new Uint8Array(kvPadding).fill(0x00) // align(4)\n    ]));\n  }\n\n  const kvdBuffer = concat(keyValueData); ///////////////////////////////////////////////////\n  // Data Format Descriptor (DFD).\n  ///////////////////////////////////////////////////\n\n  if (container.dataFormatDescriptor.length !== 1 || container.dataFormatDescriptor[0].descriptorType !== KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT) {\n    throw new Error('Only BASICFORMAT Data Format Descriptor output supported.');\n  }\n\n  const dfd = container.dataFormatDescriptor[0];\n  const dfdBuffer = new ArrayBuffer(28 + dfd.samples.length * 16);\n  const dfdView = new DataView(dfdBuffer);\n  const descriptorBlockSize = 24 + dfd.samples.length * 16;\n  dfdView.setUint32(0, dfdBuffer.byteLength, true);\n  dfdView.setUint16(4, dfd.vendorId, true);\n  dfdView.setUint16(6, dfd.descriptorType, true);\n  dfdView.setUint16(8, dfd.versionNumber, true);\n  dfdView.setUint16(10, descriptorBlockSize, true);\n  dfdView.setUint8(12, dfd.colorModel);\n  dfdView.setUint8(13, dfd.colorPrimaries);\n  dfdView.setUint8(14, dfd.transferFunction);\n  dfdView.setUint8(15, dfd.flags);\n\n  if (!Array.isArray(dfd.texelBlockDimension)) {\n    throw new Error('texelBlockDimension is now an array. For dimensionality `d`, set `d - 1`.');\n  }\n\n  dfdView.setUint8(16, dfd.texelBlockDimension[0]);\n  dfdView.setUint8(17, dfd.texelBlockDimension[1]);\n  dfdView.setUint8(18, dfd.texelBlockDimension[2]);\n  dfdView.setUint8(19, dfd.texelBlockDimension[3]);\n\n  for (let i = 0; i < 8; i++) dfdView.setUint8(20 + i, dfd.bytesPlane[i]);\n\n  for (let i = 0; i < dfd.samples.length; i++) {\n    const sample = dfd.samples[i];\n    const sampleByteOffset = 28 + i * 16;\n\n    if (sample.channelID) {\n      throw new Error('channelID has been renamed to channelType.');\n    }\n\n    dfdView.setUint16(sampleByteOffset + 0, sample.bitOffset, true);\n    dfdView.setUint8(sampleByteOffset + 2, sample.bitLength);\n    dfdView.setUint8(sampleByteOffset + 3, sample.channelType);\n    dfdView.setUint8(sampleByteOffset + 4, sample.samplePosition[0]);\n    dfdView.setUint8(sampleByteOffset + 5, sample.samplePosition[1]);\n    dfdView.setUint8(sampleByteOffset + 6, sample.samplePosition[2]);\n    dfdView.setUint8(sampleByteOffset + 7, sample.samplePosition[3]);\n\n    if (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n      dfdView.setInt32(sampleByteOffset + 8, sample.sampleLower, true);\n      dfdView.setInt32(sampleByteOffset + 12, sample.sampleUpper, true);\n    } else {\n      dfdView.setUint32(sampleByteOffset + 8, sample.sampleLower, true);\n      dfdView.setUint32(sampleByteOffset + 12, sample.sampleUpper, true);\n    }\n  } ///////////////////////////////////////////////////\n  // Data alignment.\n  ///////////////////////////////////////////////////\n\n\n  const dfdByteOffset = KTX2_ID.length + HEADER_BYTE_LENGTH + container.levels.length * 3 * 8;\n  const kvdByteOffset = dfdByteOffset + dfdBuffer.byteLength;\n  let sgdByteOffset = sgdBuffer.byteLength > 0 ? kvdByteOffset + kvdBuffer.byteLength : 0;\n  if (sgdByteOffset % 8) sgdByteOffset += 8 - sgdByteOffset % 8; // align(8)\n  ///////////////////////////////////////////////////\n  // Level Index.\n  ///////////////////////////////////////////////////\n\n  const levelData = [];\n  const levelIndex = new DataView(new ArrayBuffer(container.levels.length * 3 * 8));\n  let levelDataByteOffset = (sgdByteOffset || kvdByteOffset + kvdBuffer.byteLength) + sgdBuffer.byteLength;\n\n  for (let i = 0; i < container.levels.length; i++) {\n    const level = container.levels[i];\n    levelData.push(level.levelData);\n    levelIndex.setBigUint64(i * 24 + 0, BigInt(levelDataByteOffset), true);\n    levelIndex.setBigUint64(i * 24 + 8, BigInt(level.levelData.byteLength), true);\n    levelIndex.setBigUint64(i * 24 + 16, BigInt(level.uncompressedByteLength), true);\n    levelDataByteOffset += level.levelData.byteLength;\n  } ///////////////////////////////////////////////////\n  // Header.\n  ///////////////////////////////////////////////////\n\n\n  const headerBuffer = new ArrayBuffer(HEADER_BYTE_LENGTH);\n  const headerView = new DataView(headerBuffer);\n  headerView.setUint32(0, container.vkFormat, true);\n  headerView.setUint32(4, container.typeSize, true);\n  headerView.setUint32(8, container.pixelWidth, true);\n  headerView.setUint32(12, container.pixelHeight, true);\n  headerView.setUint32(16, container.pixelDepth, true);\n  headerView.setUint32(20, container.layerCount, true);\n  headerView.setUint32(24, container.faceCount, true);\n  headerView.setUint32(28, container.levels.length, true);\n  headerView.setUint32(32, container.supercompressionScheme, true);\n  headerView.setUint32(36, dfdByteOffset, true);\n  headerView.setUint32(40, dfdBuffer.byteLength, true);\n  headerView.setUint32(44, kvdByteOffset, true);\n  headerView.setUint32(48, kvdBuffer.byteLength, true);\n  headerView.setBigUint64(52, BigInt(sgdBuffer.byteLength > 0 ? sgdByteOffset : 0), true);\n  headerView.setBigUint64(60, BigInt(sgdBuffer.byteLength), true); ///////////////////////////////////////////////////\n  // Compose.\n  ///////////////////////////////////////////////////\n\n  return new Uint8Array(concat([new Uint8Array(KTX2_ID).buffer, headerBuffer, levelIndex.buffer, dfdBuffer, kvdBuffer, sgdByteOffset > 0 ? new ArrayBuffer(sgdByteOffset - (kvdByteOffset + kvdBuffer.byteLength)) // align(8)\n  : new ArrayBuffer(0), sgdBuffer, ...levelData]));\n}\n\nexport { KHR_DF_CHANNEL_RGBSDA_ALPHA, KHR_DF_CHANNEL_RGBSDA_BLUE, KHR_DF_CHANNEL_RGBSDA_DEPTH, KHR_DF_CHANNEL_RGBSDA_GREEN, KHR_DF_CHANNEL_RGBSDA_RED, KHR_DF_CHANNEL_RGBSDA_STENCIL, KHR_DF_FLAG_ALPHA_PREMULTIPLIED, KHR_DF_FLAG_ALPHA_STRAIGHT, KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT, KHR_DF_MODEL_ASTC, KHR_DF_MODEL_ETC1, KHR_DF_MODEL_ETC1S, KHR_DF_MODEL_ETC2, KHR_DF_MODEL_RGBSDA, KHR_DF_MODEL_UASTC, KHR_DF_MODEL_UNSPECIFIED, KHR_DF_PRIMARIES_ACES, KHR_DF_PRIMARIES_ACESCC, KHR_DF_PRIMARIES_ADOBERGB, KHR_DF_PRIMARIES_BT2020, KHR_DF_PRIMARIES_BT601_EBU, KHR_DF_PRIMARIES_BT601_SMPTE, KHR_DF_PRIMARIES_BT709, KHR_DF_PRIMARIES_CIEXYZ, KHR_DF_PRIMARIES_DISPLAYP3, KHR_DF_PRIMARIES_NTSC1953, KHR_DF_PRIMARIES_PAL525, KHR_DF_PRIMARIES_UNSPECIFIED, KHR_DF_SAMPLE_DATATYPE_EXPONENT, KHR_DF_SAMPLE_DATATYPE_FLOAT, KHR_DF_SAMPLE_DATATYPE_LINEAR, KHR_DF_SAMPLE_DATATYPE_SIGNED, KHR_DF_TRANSFER_ACESCC, KHR_DF_TRANSFER_ACESCCT, KHR_DF_TRANSFER_ADOBERGB, KHR_DF_TRANSFER_BT1886, KHR_DF_TRANSFER_DCIP3, KHR_DF_TRANSFER_HLG_EOTF, KHR_DF_TRANSFER_HLG_OETF, KHR_DF_TRANSFER_ITU, KHR_DF_TRANSFER_LINEAR, KHR_DF_TRANSFER_NTSC, KHR_DF_TRANSFER_PAL625_EOTF, KHR_DF_TRANSFER_PAL_OETF, KHR_DF_TRANSFER_PQ_EOTF, KHR_DF_TRANSFER_PQ_OETF, KHR_DF_TRANSFER_SLOG, KHR_DF_TRANSFER_SLOG2, KHR_DF_TRANSFER_SRGB, KHR_DF_TRANSFER_ST240, KHR_DF_TRANSFER_UNSPECIFIED, KHR_DF_VENDORID_KHRONOS, KHR_DF_VERSION, KHR_SUPERCOMPRESSION_BASISLZ, KHR_SUPERCOMPRESSION_NONE, KHR_SUPERCOMPRESSION_ZLIB, KHR_SUPERCOMPRESSION_ZSTD, KTX2Container, VK_FORMAT_A1R5G5B5_UNORM_PACK16, VK_FORMAT_A2B10G10R10_SINT_PACK32, VK_FORMAT_A2B10G10R10_SNORM_PACK32, VK_FORMAT_A2B10G10R10_UINT_PACK32, VK_FORMAT_A2B10G10R10_UNORM_PACK32, VK_FORMAT_A2R10G10B10_SINT_PACK32, VK_FORMAT_A2R10G10B10_SNORM_PACK32, VK_FORMAT_A2R10G10B10_UINT_PACK32, VK_FORMAT_A2R10G10B10_UNORM_PACK32, VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT, VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT, VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x10_SRGB_BLOCK, VK_FORMAT_ASTC_10x10_UNORM_BLOCK, VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x5_SRGB_BLOCK, VK_FORMAT_ASTC_10x5_UNORM_BLOCK, VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x6_SRGB_BLOCK, VK_FORMAT_ASTC_10x6_UNORM_BLOCK, VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_10x8_SRGB_BLOCK, VK_FORMAT_ASTC_10x8_UNORM_BLOCK, VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_12x10_SRGB_BLOCK, VK_FORMAT_ASTC_12x10_UNORM_BLOCK, VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_12x12_SRGB_BLOCK, VK_FORMAT_ASTC_12x12_UNORM_BLOCK, VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_4x4_SRGB_BLOCK, VK_FORMAT_ASTC_4x4_UNORM_BLOCK, VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_5x4_SRGB_BLOCK, VK_FORMAT_ASTC_5x4_UNORM_BLOCK, VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_5x5_SRGB_BLOCK, VK_FORMAT_ASTC_5x5_UNORM_BLOCK, VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_6x5_SRGB_BLOCK, VK_FORMAT_ASTC_6x5_UNORM_BLOCK, VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, VK_FORMAT_ASTC_6x6_UNORM_BLOCK, VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_8x5_SRGB_BLOCK, VK_FORMAT_ASTC_8x5_UNORM_BLOCK, VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_8x6_SRGB_BLOCK, VK_FORMAT_ASTC_8x6_UNORM_BLOCK, VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT, VK_FORMAT_ASTC_8x8_SRGB_BLOCK, VK_FORMAT_ASTC_8x8_UNORM_BLOCK, VK_FORMAT_B10G11R11_UFLOAT_PACK32, VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16, VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16, VK_FORMAT_B4G4R4A4_UNORM_PACK16, VK_FORMAT_B5G5R5A1_UNORM_PACK16, VK_FORMAT_B5G6R5_UNORM_PACK16, VK_FORMAT_B8G8R8A8_SINT, VK_FORMAT_B8G8R8A8_SNORM, VK_FORMAT_B8G8R8A8_SRGB, VK_FORMAT_B8G8R8A8_UINT, VK_FORMAT_B8G8R8A8_UNORM, VK_FORMAT_B8G8R8_SINT, VK_FORMAT_B8G8R8_SNORM, VK_FORMAT_B8G8R8_SRGB, VK_FORMAT_B8G8R8_UINT, VK_FORMAT_B8G8R8_UNORM, VK_FORMAT_BC1_RGBA_SRGB_BLOCK, VK_FORMAT_BC1_RGBA_UNORM_BLOCK, VK_FORMAT_BC1_RGB_SRGB_BLOCK, VK_FORMAT_BC1_RGB_UNORM_BLOCK, VK_FORMAT_BC2_SRGB_BLOCK, VK_FORMAT_BC2_UNORM_BLOCK, VK_FORMAT_BC3_SRGB_BLOCK, VK_FORMAT_BC3_UNORM_BLOCK, VK_FORMAT_BC4_SNORM_BLOCK, VK_FORMAT_BC4_UNORM_BLOCK, VK_FORMAT_BC5_SNORM_BLOCK, VK_FORMAT_BC5_UNORM_BLOCK, VK_FORMAT_BC6H_SFLOAT_BLOCK, VK_FORMAT_BC6H_UFLOAT_BLOCK, VK_FORMAT_BC7_SRGB_BLOCK, VK_FORMAT_BC7_UNORM_BLOCK, VK_FORMAT_D16_UNORM, VK_FORMAT_D16_UNORM_S8_UINT, VK_FORMAT_D24_UNORM_S8_UINT, VK_FORMAT_D32_SFLOAT, VK_FORMAT_D32_SFLOAT_S8_UINT, VK_FORMAT_E5B9G9R9_UFLOAT_PACK32, VK_FORMAT_EAC_R11G11_SNORM_BLOCK, VK_FORMAT_EAC_R11G11_UNORM_BLOCK, VK_FORMAT_EAC_R11_SNORM_BLOCK, VK_FORMAT_EAC_R11_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16, VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16, VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG, VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG, VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG, VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG, VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG, VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16, VK_FORMAT_R10X6G10X6_UNORM_2PACK16, VK_FORMAT_R10X6_UNORM_PACK16, VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16, VK_FORMAT_R12X4G12X4_UNORM_2PACK16, VK_FORMAT_R12X4_UNORM_PACK16, VK_FORMAT_R16G16B16A16_SFLOAT, VK_FORMAT_R16G16B16A16_SINT, VK_FORMAT_R16G16B16A16_SNORM, VK_FORMAT_R16G16B16A16_UINT, VK_FORMAT_R16G16B16A16_UNORM, VK_FORMAT_R16G16B16_SFLOAT, VK_FORMAT_R16G16B16_SINT, VK_FORMAT_R16G16B16_SNORM, VK_FORMAT_R16G16B16_UINT, VK_FORMAT_R16G16B16_UNORM, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R16G16_SINT, VK_FORMAT_R16G16_SNORM, VK_FORMAT_R16G16_UINT, VK_FORMAT_R16G16_UNORM, VK_FORMAT_R16_SFLOAT, VK_FORMAT_R16_SINT, VK_FORMAT_R16_SNORM, VK_FORMAT_R16_UINT, VK_FORMAT_R16_UNORM, VK_FORMAT_R32G32B32A32_SFLOAT, VK_FORMAT_R32G32B32A32_SINT, VK_FORMAT_R32G32B32A32_UINT, VK_FORMAT_R32G32B32_SFLOAT, VK_FORMAT_R32G32B32_SINT, VK_FORMAT_R32G32B32_UINT, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R32G32_SINT, VK_FORMAT_R32G32_UINT, VK_FORMAT_R32_SFLOAT, VK_FORMAT_R32_SINT, VK_FORMAT_R32_UINT, VK_FORMAT_R4G4B4A4_UNORM_PACK16, VK_FORMAT_R4G4_UNORM_PACK8, VK_FORMAT_R5G5B5A1_UNORM_PACK16, VK_FORMAT_R5G6B5_UNORM_PACK16, VK_FORMAT_R64G64B64A64_SFLOAT, VK_FORMAT_R64G64B64A64_SINT, VK_FORMAT_R64G64B64A64_UINT, VK_FORMAT_R64G64B64_SFLOAT, VK_FORMAT_R64G64B64_SINT, VK_FORMAT_R64G64B64_UINT, VK_FORMAT_R64G64_SFLOAT, VK_FORMAT_R64G64_SINT, VK_FORMAT_R64G64_UINT, VK_FORMAT_R64_SFLOAT, VK_FORMAT_R64_SINT, VK_FORMAT_R64_UINT, VK_FORMAT_R8G8B8A8_SINT, VK_FORMAT_R8G8B8A8_SNORM, VK_FORMAT_R8G8B8A8_SRGB, VK_FORMAT_R8G8B8A8_UINT, VK_FORMAT_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8_SINT, VK_FORMAT_R8G8B8_SNORM, VK_FORMAT_R8G8B8_SRGB, VK_FORMAT_R8G8B8_UINT, VK_FORMAT_R8G8B8_UNORM, VK_FORMAT_R8G8_SINT, VK_FORMAT_R8G8_SNORM, VK_FORMAT_R8G8_SRGB, VK_FORMAT_R8G8_UINT, VK_FORMAT_R8G8_UNORM, VK_FORMAT_R8_SINT, VK_FORMAT_R8_SNORM, VK_FORMAT_R8_SRGB, VK_FORMAT_R8_UINT, VK_FORMAT_R8_UNORM, VK_FORMAT_S8_UINT, VK_FORMAT_UNDEFINED, VK_FORMAT_X8_D24_UNORM_PACK32, read, write };","map":{"version":3,"sources":["../src/constants.ts","../src/container.ts","../src/buffer-reader.ts","../src/constants-internal.ts","../src/util.ts","../src/read.ts","../src/write.ts"],"names":["KHR_SUPERCOMPRESSION_NONE","KHR_SUPERCOMPRESSION_BASISLZ","KHR_SUPERCOMPRESSION_ZSTD","KHR_SUPERCOMPRESSION_ZLIB","KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT","KHR_DF_VENDORID_KHRONOS","KHR_DF_VERSION","KHR_DF_MODEL_UNSPECIFIED","KHR_DF_MODEL_RGBSDA","KHR_DF_MODEL_ETC1","KHR_DF_MODEL_ETC2","KHR_DF_MODEL_ASTC","KHR_DF_MODEL_ETC1S","KHR_DF_MODEL_UASTC","KHR_DF_FLAG_ALPHA_STRAIGHT","KHR_DF_FLAG_ALPHA_PREMULTIPLIED","KHR_DF_TRANSFER_UNSPECIFIED","KHR_DF_TRANSFER_LINEAR","KHR_DF_TRANSFER_SRGB","KHR_DF_TRANSFER_ITU","KHR_DF_TRANSFER_NTSC","KHR_DF_TRANSFER_SLOG","KHR_DF_TRANSFER_SLOG2","KHR_DF_TRANSFER_BT1886","KHR_DF_TRANSFER_HLG_OETF","KHR_DF_TRANSFER_HLG_EOTF","KHR_DF_TRANSFER_PQ_EOTF","KHR_DF_TRANSFER_PQ_OETF","KHR_DF_TRANSFER_DCIP3","KHR_DF_TRANSFER_PAL_OETF","KHR_DF_TRANSFER_PAL625_EOTF","KHR_DF_TRANSFER_ST240","KHR_DF_TRANSFER_ACESCC","KHR_DF_TRANSFER_ACESCCT","KHR_DF_TRANSFER_ADOBERGB","KHR_DF_PRIMARIES_UNSPECIFIED","KHR_DF_PRIMARIES_BT709","KHR_DF_PRIMARIES_BT601_EBU","KHR_DF_PRIMARIES_BT601_SMPTE","KHR_DF_PRIMARIES_BT2020","KHR_DF_PRIMARIES_CIEXYZ","KHR_DF_PRIMARIES_ACES","KHR_DF_PRIMARIES_ACESCC","KHR_DF_PRIMARIES_NTSC1953","KHR_DF_PRIMARIES_PAL525","KHR_DF_PRIMARIES_DISPLAYP3","KHR_DF_PRIMARIES_ADOBERGB","KHR_DF_CHANNEL_RGBSDA_RED","KHR_DF_CHANNEL_RGBSDA_GREEN","KHR_DF_CHANNEL_RGBSDA_BLUE","KHR_DF_CHANNEL_RGBSDA_STENCIL","KHR_DF_CHANNEL_RGBSDA_DEPTH","KHR_DF_CHANNEL_RGBSDA_ALPHA","KHR_DF_SAMPLE_DATATYPE_FLOAT","KHR_DF_SAMPLE_DATATYPE_SIGNED","KHR_DF_SAMPLE_DATATYPE_EXPONENT","KHR_DF_SAMPLE_DATATYPE_LINEAR","VK_FORMAT_UNDEFINED","VK_FORMAT_R4G4_UNORM_PACK8","VK_FORMAT_R4G4B4A4_UNORM_PACK16","VK_FORMAT_B4G4R4A4_UNORM_PACK16","VK_FORMAT_R5G6B5_UNORM_PACK16","VK_FORMAT_B5G6R5_UNORM_PACK16","VK_FORMAT_R5G5B5A1_UNORM_PACK16","VK_FORMAT_B5G5R5A1_UNORM_PACK16","VK_FORMAT_A1R5G5B5_UNORM_PACK16","VK_FORMAT_R8_UNORM","VK_FORMAT_R8_SNORM","VK_FORMAT_R8_UINT","VK_FORMAT_R8_SINT","VK_FORMAT_R8_SRGB","VK_FORMAT_R8G8_UNORM","VK_FORMAT_R8G8_SNORM","VK_FORMAT_R8G8_UINT","VK_FORMAT_R8G8_SINT","VK_FORMAT_R8G8_SRGB","VK_FORMAT_R8G8B8_UNORM","VK_FORMAT_R8G8B8_SNORM","VK_FORMAT_R8G8B8_UINT","VK_FORMAT_R8G8B8_SINT","VK_FORMAT_R8G8B8_SRGB","VK_FORMAT_B8G8R8_UNORM","VK_FORMAT_B8G8R8_SNORM","VK_FORMAT_B8G8R8_UINT","VK_FORMAT_B8G8R8_SINT","VK_FORMAT_B8G8R8_SRGB","VK_FORMAT_R8G8B8A8_UNORM","VK_FORMAT_R8G8B8A8_SNORM","VK_FORMAT_R8G8B8A8_UINT","VK_FORMAT_R8G8B8A8_SINT","VK_FORMAT_R8G8B8A8_SRGB","VK_FORMAT_B8G8R8A8_UNORM","VK_FORMAT_B8G8R8A8_SNORM","VK_FORMAT_B8G8R8A8_UINT","VK_FORMAT_B8G8R8A8_SINT","VK_FORMAT_B8G8R8A8_SRGB","VK_FORMAT_A2R10G10B10_UNORM_PACK32","VK_FORMAT_A2R10G10B10_SNORM_PACK32","VK_FORMAT_A2R10G10B10_UINT_PACK32","VK_FORMAT_A2R10G10B10_SINT_PACK32","VK_FORMAT_A2B10G10R10_UNORM_PACK32","VK_FORMAT_A2B10G10R10_SNORM_PACK32","VK_FORMAT_A2B10G10R10_UINT_PACK32","VK_FORMAT_A2B10G10R10_SINT_PACK32","VK_FORMAT_R16_UNORM","VK_FORMAT_R16_SNORM","VK_FORMAT_R16_UINT","VK_FORMAT_R16_SINT","VK_FORMAT_R16_SFLOAT","VK_FORMAT_R16G16_UNORM","VK_FORMAT_R16G16_SNORM","VK_FORMAT_R16G16_UINT","VK_FORMAT_R16G16_SINT","VK_FORMAT_R16G16_SFLOAT","VK_FORMAT_R16G16B16_UNORM","VK_FORMAT_R16G16B16_SNORM","VK_FORMAT_R16G16B16_UINT","VK_FORMAT_R16G16B16_SINT","VK_FORMAT_R16G16B16_SFLOAT","VK_FORMAT_R16G16B16A16_UNORM","VK_FORMAT_R16G16B16A16_SNORM","VK_FORMAT_R16G16B16A16_UINT","VK_FORMAT_R16G16B16A16_SINT","VK_FORMAT_R16G16B16A16_SFLOAT","VK_FORMAT_R32_UINT","VK_FORMAT_R32_SINT","VK_FORMAT_R32_SFLOAT","VK_FORMAT_R32G32_UINT","VK_FORMAT_R32G32_SINT","VK_FORMAT_R32G32_SFLOAT","VK_FORMAT_R32G32B32_UINT","VK_FORMAT_R32G32B32_SINT","VK_FORMAT_R32G32B32_SFLOAT","VK_FORMAT_R32G32B32A32_UINT","VK_FORMAT_R32G32B32A32_SINT","VK_FORMAT_R32G32B32A32_SFLOAT","VK_FORMAT_R64_UINT","VK_FORMAT_R64_SINT","VK_FORMAT_R64_SFLOAT","VK_FORMAT_R64G64_UINT","VK_FORMAT_R64G64_SINT","VK_FORMAT_R64G64_SFLOAT","VK_FORMAT_R64G64B64_UINT","VK_FORMAT_R64G64B64_SINT","VK_FORMAT_R64G64B64_SFLOAT","VK_FORMAT_R64G64B64A64_UINT","VK_FORMAT_R64G64B64A64_SINT","VK_FORMAT_R64G64B64A64_SFLOAT","VK_FORMAT_B10G11R11_UFLOAT_PACK32","VK_FORMAT_E5B9G9R9_UFLOAT_PACK32","VK_FORMAT_D16_UNORM","VK_FORMAT_X8_D24_UNORM_PACK32","VK_FORMAT_D32_SFLOAT","VK_FORMAT_S8_UINT","VK_FORMAT_D16_UNORM_S8_UINT","VK_FORMAT_D24_UNORM_S8_UINT","VK_FORMAT_D32_SFLOAT_S8_UINT","VK_FORMAT_BC1_RGB_UNORM_BLOCK","VK_FORMAT_BC1_RGB_SRGB_BLOCK","VK_FORMAT_BC1_RGBA_UNORM_BLOCK","VK_FORMAT_BC1_RGBA_SRGB_BLOCK","VK_FORMAT_BC2_UNORM_BLOCK","VK_FORMAT_BC2_SRGB_BLOCK","VK_FORMAT_BC3_UNORM_BLOCK","VK_FORMAT_BC3_SRGB_BLOCK","VK_FORMAT_BC4_UNORM_BLOCK","VK_FORMAT_BC4_SNORM_BLOCK","VK_FORMAT_BC5_UNORM_BLOCK","VK_FORMAT_BC5_SNORM_BLOCK","VK_FORMAT_BC6H_UFLOAT_BLOCK","VK_FORMAT_BC6H_SFLOAT_BLOCK","VK_FORMAT_BC7_UNORM_BLOCK","VK_FORMAT_BC7_SRGB_BLOCK","VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK","VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK","VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK","VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK","VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK","VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK","VK_FORMAT_EAC_R11_UNORM_BLOCK","VK_FORMAT_EAC_R11_SNORM_BLOCK","VK_FORMAT_EAC_R11G11_UNORM_BLOCK","VK_FORMAT_EAC_R11G11_SNORM_BLOCK","VK_FORMAT_ASTC_4x4_UNORM_BLOCK","VK_FORMAT_ASTC_4x4_SRGB_BLOCK","VK_FORMAT_ASTC_5x4_UNORM_BLOCK","VK_FORMAT_ASTC_5x4_SRGB_BLOCK","VK_FORMAT_ASTC_5x5_UNORM_BLOCK","VK_FORMAT_ASTC_5x5_SRGB_BLOCK","VK_FORMAT_ASTC_6x5_UNORM_BLOCK","VK_FORMAT_ASTC_6x5_SRGB_BLOCK","VK_FORMAT_ASTC_6x6_UNORM_BLOCK","VK_FORMAT_ASTC_6x6_SRGB_BLOCK","VK_FORMAT_ASTC_8x5_UNORM_BLOCK","VK_FORMAT_ASTC_8x5_SRGB_BLOCK","VK_FORMAT_ASTC_8x6_UNORM_BLOCK","VK_FORMAT_ASTC_8x6_SRGB_BLOCK","VK_FORMAT_ASTC_8x8_UNORM_BLOCK","VK_FORMAT_ASTC_8x8_SRGB_BLOCK","VK_FORMAT_ASTC_10x5_UNORM_BLOCK","VK_FORMAT_ASTC_10x5_SRGB_BLOCK","VK_FORMAT_ASTC_10x6_UNORM_BLOCK","VK_FORMAT_ASTC_10x6_SRGB_BLOCK","VK_FORMAT_ASTC_10x8_UNORM_BLOCK","VK_FORMAT_ASTC_10x8_SRGB_BLOCK","VK_FORMAT_ASTC_10x10_UNORM_BLOCK","VK_FORMAT_ASTC_10x10_SRGB_BLOCK","VK_FORMAT_ASTC_12x10_UNORM_BLOCK","VK_FORMAT_ASTC_12x10_SRGB_BLOCK","VK_FORMAT_ASTC_12x12_UNORM_BLOCK","VK_FORMAT_ASTC_12x12_SRGB_BLOCK","VK_FORMAT_R10X6_UNORM_PACK16","VK_FORMAT_R10X6G10X6_UNORM_2PACK16","VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16","VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16","VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16","VK_FORMAT_R12X4_UNORM_PACK16","VK_FORMAT_R12X4G12X4_UNORM_2PACK16","VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16","VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16","VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16","VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG","VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG","VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG","VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG","VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG","VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG","VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG","VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG","VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT","VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT","VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT","VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT","KTX2Container","vendorId","descriptorType","descriptorBlockSize","versionNumber","colorModel","colorPrimaries","transferFunction","flags","texelBlockDimension","bytesPlane","samples","BufferReader","_dataView","_littleEndian","_offset","constructor","data","_nextUint8","value","_nextUint16","_nextUint32","_nextUint64","left","right","_nextInt32","_skip","_scan","term","byteOffset","byteLength","KTX_WRITER","NUL","KTX2_ID","HEADER_BYTE_LENGTH","Buffer","totalByteLength","buffer","result","id","container","headerByteLength","Uint32Array","headerReader","levelCount","dfdByteOffset","dfdByteLength","kvdByteOffset","kvdByteLength","sgdByteOffset","sgdByteLength","levelByteLength","levelReader","i","levelData","uncompressedByteLength","dfdReader","dfd","sampleStart","sampleWords","numSamples","sample","bitOffset","bitLength","channelType","samplePosition","sampleLower","sampleUpper","Infinity","kvdReader","keyValueByteLength","keyData","key","decodeText","valueData","sgdReader","endpointCount","selectorCount","endpointsByteLength","selectorsByteLength","tablesByteLength","extendedByteLength","imageDescs","imageFlags","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","endpointsByteOffset","selectorsByteOffset","tablesByteOffset","extendedByteOffset","endpointsData","selectorsData","tablesData","extendedData","DEFAULT_OPTIONS","keepWriter","write","options","sgdBuffer","sgdHeaderBuffer","sgdHeaderView","imageDesc","concat","keyValueData","keyValue","KTXwriter","encodeText","kvByteLength","kvPadding","kvdBuffer","dfdBuffer","dfdView","Array","sampleByteOffset","levelIndex","levelDataByteOffset","level","BigInt","headerBuffer","headerView"],"mappings":"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","sourcesContent":["///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport const KHR_SUPERCOMPRESSION_NONE = 0;\nexport const KHR_SUPERCOMPRESSION_BASISLZ = 1;\nexport const KHR_SUPERCOMPRESSION_ZSTD = 2;\nexport const KHR_SUPERCOMPRESSION_ZLIB = 3;\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport const KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT = 0;\nexport const KHR_DF_VENDORID_KHRONOS = 0;\nexport const KHR_DF_VERSION = 2;\n\nexport const KHR_DF_MODEL_UNSPECIFIED = 0;\nexport const KHR_DF_MODEL_RGBSDA = 1;\n// ...\nexport const KHR_DF_MODEL_ETC1 = 160;\nexport const KHR_DF_MODEL_ETC2 = 161;\nexport const KHR_DF_MODEL_ASTC = 162;\nexport const KHR_DF_MODEL_ETC1S = 163;\nexport const KHR_DF_MODEL_UASTC = 166;\n\nexport const KHR_DF_FLAG_ALPHA_STRAIGHT = 0;\nexport const KHR_DF_FLAG_ALPHA_PREMULTIPLIED = 1;\n\nexport const KHR_DF_TRANSFER_UNSPECIFIED = 0;\nexport const KHR_DF_TRANSFER_LINEAR = 1;\nexport const KHR_DF_TRANSFER_SRGB = 2;\nexport const KHR_DF_TRANSFER_ITU = 3;\nexport const KHR_DF_TRANSFER_NTSC = 4;\nexport const KHR_DF_TRANSFER_SLOG = 5;\nexport const KHR_DF_TRANSFER_SLOG2 = 6;\nexport const KHR_DF_TRANSFER_BT1886 = 7;\nexport const KHR_DF_TRANSFER_HLG_OETF = 8;\nexport const KHR_DF_TRANSFER_HLG_EOTF = 9;\nexport const KHR_DF_TRANSFER_PQ_EOTF = 10;\nexport const KHR_DF_TRANSFER_PQ_OETF = 11;\nexport const KHR_DF_TRANSFER_DCIP3 = 12;\nexport const KHR_DF_TRANSFER_PAL_OETF = 13;\nexport const KHR_DF_TRANSFER_PAL625_EOTF = 14;\nexport const KHR_DF_TRANSFER_ST240 = 15;\nexport const KHR_DF_TRANSFER_ACESCC = 16;\nexport const KHR_DF_TRANSFER_ACESCCT = 17;\nexport const KHR_DF_TRANSFER_ADOBERGB = 18;\n\nexport const KHR_DF_PRIMARIES_UNSPECIFIED = 0;\nexport const KHR_DF_PRIMARIES_BT709 = 1;\nexport const KHR_DF_PRIMARIES_BT601_EBU = 2;\nexport const KHR_DF_PRIMARIES_BT601_SMPTE = 3;\nexport const KHR_DF_PRIMARIES_BT2020 = 4;\nexport const KHR_DF_PRIMARIES_CIEXYZ = 5;\nexport const KHR_DF_PRIMARIES_ACES = 6;\nexport const KHR_DF_PRIMARIES_ACESCC = 7;\nexport const KHR_DF_PRIMARIES_NTSC1953 = 8;\nexport const KHR_DF_PRIMARIES_PAL525 = 9;\nexport const KHR_DF_PRIMARIES_DISPLAYP3 = 10;\nexport const KHR_DF_PRIMARIES_ADOBERGB = 11;\n\nexport const KHR_DF_CHANNEL_RGBSDA_RED = 0;\nexport const KHR_DF_CHANNEL_RGBSDA_GREEN = 1;\nexport const KHR_DF_CHANNEL_RGBSDA_BLUE = 2;\nexport const KHR_DF_CHANNEL_RGBSDA_STENCIL = 13;\nexport const KHR_DF_CHANNEL_RGBSDA_DEPTH = 14;\nexport const KHR_DF_CHANNEL_RGBSDA_ALPHA = 15;\n\nexport const KHR_DF_SAMPLE_DATATYPE_FLOAT = 0x80;\nexport const KHR_DF_SAMPLE_DATATYPE_SIGNED = 0x40;\nexport const KHR_DF_SAMPLE_DATATYPE_EXPONENT = 0x20;\nexport const KHR_DF_SAMPLE_DATATYPE_LINEAR = 0x10;\n\n///////////////////////////////////////////////////\n// VK FORMAT.\n///////////////////////////////////////////////////\n\nexport const VK_FORMAT_UNDEFINED = 0;\nexport const VK_FORMAT_R4G4_UNORM_PACK8 = 1;\nexport const VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2;\nexport const VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3;\nexport const VK_FORMAT_R5G6B5_UNORM_PACK16 = 4;\nexport const VK_FORMAT_B5G6R5_UNORM_PACK16 = 5;\nexport const VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6;\nexport const VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7;\nexport const VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8;\nexport const VK_FORMAT_R8_UNORM = 9;\nexport const VK_FORMAT_R8_SNORM = 10;\nexport const VK_FORMAT_R8_UINT = 13;\nexport const VK_FORMAT_R8_SINT = 14;\nexport const VK_FORMAT_R8_SRGB = 15;\nexport const VK_FORMAT_R8G8_UNORM = 16;\nexport const VK_FORMAT_R8G8_SNORM = 17;\nexport const VK_FORMAT_R8G8_UINT = 20;\nexport const VK_FORMAT_R8G8_SINT = 21;\nexport const VK_FORMAT_R8G8_SRGB = 22;\nexport const VK_FORMAT_R8G8B8_UNORM = 23;\nexport const VK_FORMAT_R8G8B8_SNORM = 24;\nexport const VK_FORMAT_R8G8B8_UINT = 27;\nexport const VK_FORMAT_R8G8B8_SINT = 28;\nexport const VK_FORMAT_R8G8B8_SRGB = 29;\nexport const VK_FORMAT_B8G8R8_UNORM = 30;\nexport const VK_FORMAT_B8G8R8_SNORM = 31;\nexport const VK_FORMAT_B8G8R8_UINT = 34;\nexport const VK_FORMAT_B8G8R8_SINT = 35;\nexport const VK_FORMAT_B8G8R8_SRGB = 36;\nexport const VK_FORMAT_R8G8B8A8_UNORM = 37;\nexport const VK_FORMAT_R8G8B8A8_SNORM = 38;\nexport const VK_FORMAT_R8G8B8A8_UINT = 41;\nexport const VK_FORMAT_R8G8B8A8_SINT = 42;\nexport const VK_FORMAT_R8G8B8A8_SRGB = 43;\nexport const VK_FORMAT_B8G8R8A8_UNORM = 44;\nexport const VK_FORMAT_B8G8R8A8_SNORM = 45;\nexport const VK_FORMAT_B8G8R8A8_UINT = 48;\nexport const VK_FORMAT_B8G8R8A8_SINT = 49;\nexport const VK_FORMAT_B8G8R8A8_SRGB = 50;\nexport const VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58;\nexport const VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59;\nexport const VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62;\nexport const VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63;\nexport const VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64;\nexport const VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65;\nexport const VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68;\nexport const VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69;\nexport const VK_FORMAT_R16_UNORM = 70;\nexport const VK_FORMAT_R16_SNORM = 71;\nexport const VK_FORMAT_R16_UINT = 74;\nexport const VK_FORMAT_R16_SINT = 75;\nexport const VK_FORMAT_R16_SFLOAT = 76;\nexport const VK_FORMAT_R16G16_UNORM = 77;\nexport const VK_FORMAT_R16G16_SNORM = 78;\nexport const VK_FORMAT_R16G16_UINT = 81;\nexport const VK_FORMAT_R16G16_SINT = 82;\nexport const VK_FORMAT_R16G16_SFLOAT = 83;\nexport const VK_FORMAT_R16G16B16_UNORM = 84;\nexport const VK_FORMAT_R16G16B16_SNORM = 85;\nexport const VK_FORMAT_R16G16B16_UINT = 88;\nexport const VK_FORMAT_R16G16B16_SINT = 89;\nexport const VK_FORMAT_R16G16B16_SFLOAT = 90;\nexport const VK_FORMAT_R16G16B16A16_UNORM = 91;\nexport const VK_FORMAT_R16G16B16A16_SNORM = 92;\nexport const VK_FORMAT_R16G16B16A16_UINT = 95;\nexport const VK_FORMAT_R16G16B16A16_SINT = 96;\nexport const VK_FORMAT_R16G16B16A16_SFLOAT = 97;\nexport const VK_FORMAT_R32_UINT = 98;\nexport const VK_FORMAT_R32_SINT = 99;\nexport const VK_FORMAT_R32_SFLOAT = 100;\nexport const VK_FORMAT_R32G32_UINT = 101;\nexport const VK_FORMAT_R32G32_SINT = 102;\nexport const VK_FORMAT_R32G32_SFLOAT = 103;\nexport const VK_FORMAT_R32G32B32_UINT = 104;\nexport const VK_FORMAT_R32G32B32_SINT = 105;\nexport const VK_FORMAT_R32G32B32_SFLOAT = 106;\nexport const VK_FORMAT_R32G32B32A32_UINT = 107;\nexport const VK_FORMAT_R32G32B32A32_SINT = 108;\nexport const VK_FORMAT_R32G32B32A32_SFLOAT = 109;\nexport const VK_FORMAT_R64_UINT = 110;\nexport const VK_FORMAT_R64_SINT = 111;\nexport const VK_FORMAT_R64_SFLOAT = 112;\nexport const VK_FORMAT_R64G64_UINT = 113;\nexport const VK_FORMAT_R64G64_SINT = 114;\nexport const VK_FORMAT_R64G64_SFLOAT = 115;\nexport const VK_FORMAT_R64G64B64_UINT = 116;\nexport const VK_FORMAT_R64G64B64_SINT = 117;\nexport const VK_FORMAT_R64G64B64_SFLOAT = 118;\nexport const VK_FORMAT_R64G64B64A64_UINT = 119;\nexport const VK_FORMAT_R64G64B64A64_SINT = 120;\nexport const VK_FORMAT_R64G64B64A64_SFLOAT = 121;\nexport const VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122;\nexport const VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123;\nexport const VK_FORMAT_D16_UNORM = 124;\nexport const VK_FORMAT_X8_D24_UNORM_PACK32 = 125;\nexport const VK_FORMAT_D32_SFLOAT = 126;\nexport const VK_FORMAT_S8_UINT = 127;\nexport const VK_FORMAT_D16_UNORM_S8_UINT = 128;\nexport const VK_FORMAT_D24_UNORM_S8_UINT = 129;\nexport const VK_FORMAT_D32_SFLOAT_S8_UINT = 130;\nexport const VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131;\nexport const VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132;\nexport const VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133;\nexport const VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134;\nexport const VK_FORMAT_BC2_UNORM_BLOCK = 135;\nexport const VK_FORMAT_BC2_SRGB_BLOCK = 136;\nexport const VK_FORMAT_BC3_UNORM_BLOCK = 137;\nexport const VK_FORMAT_BC3_SRGB_BLOCK = 138;\nexport const VK_FORMAT_BC4_UNORM_BLOCK = 139;\nexport const VK_FORMAT_BC4_SNORM_BLOCK = 140;\nexport const VK_FORMAT_BC5_UNORM_BLOCK = 141;\nexport const VK_FORMAT_BC5_SNORM_BLOCK = 142;\nexport const VK_FORMAT_BC6H_UFLOAT_BLOCK = 143;\nexport const VK_FORMAT_BC6H_SFLOAT_BLOCK = 144;\nexport const VK_FORMAT_BC7_UNORM_BLOCK = 145;\nexport const VK_FORMAT_BC7_SRGB_BLOCK = 146;\nexport const VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147;\nexport const VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148;\nexport const VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149;\nexport const VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150;\nexport const VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151;\nexport const VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152;\nexport const VK_FORMAT_EAC_R11_UNORM_BLOCK = 153;\nexport const VK_FORMAT_EAC_R11_SNORM_BLOCK = 154;\nexport const VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155;\nexport const VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156;\nexport const VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157;\nexport const VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158;\nexport const VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159;\nexport const VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160;\nexport const VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161;\nexport const VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162;\nexport const VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163;\nexport const VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164;\nexport const VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165;\nexport const VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166;\nexport const VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167;\nexport const VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168;\nexport const VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169;\nexport const VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170;\nexport const VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171;\nexport const VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172;\nexport const VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173;\nexport const VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174;\nexport const VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175;\nexport const VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176;\nexport const VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177;\nexport const VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178;\nexport const VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179;\nexport const VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180;\nexport const VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181;\nexport const VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182;\nexport const VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183;\nexport const VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184;\nexport const VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007;\nexport const VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008;\nexport const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009;\nexport const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010;\nexport const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011;\nexport const VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017;\nexport const VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018;\nexport const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019;\nexport const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020;\nexport const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021;\nexport const VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000;\nexport const VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001;\nexport const VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002;\nexport const VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003;\nexport const VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004;\nexport const VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005;\nexport const VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006;\nexport const VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007;\nexport const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = 1000066000;\nexport const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = 1000066001;\nexport const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = 1000066002;\nexport const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = 1000066003;\nexport const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = 1000066004;\nexport const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = 1000066005;\nexport const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = 1000066006;\nexport const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = 1000066007;\nexport const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = 1000066008;\nexport const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = 1000066009;\nexport const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = 1000066010;\nexport const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = 1000066011;\nexport const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = 1000066012;\nexport const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = 1000066013;\nexport const VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = 1000340000;\nexport const VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = 1000340001;\n","import {\n\tKHR_DF_FLAG_ALPHA_STRAIGHT,\n\tKHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,\n\tKHR_DF_MODEL_UNSPECIFIED,\n\tKHR_DF_PRIMARIES_BT709,\n\tKHR_DF_TRANSFER_SRGB,\n\tKHR_DF_VENDORID_KHRONOS,\n\tKHR_DF_VERSION,\n\tKHR_SUPERCOMPRESSION_NONE,\n\tVK_FORMAT_UNDEFINED,\n} from './constants';\n\n/**\n * Represents an unpacked KTX 2.0 texture container. Data for individual mip levels are stored in\n * the `.levels` array, typically compressed in Basis Universal formats. Additional properties\n * provide metadata required to process, transcode, and upload these textures.\n */\nexport class KTX2Container {\n\t/**\n\t * Specifies the image format using Vulkan VkFormat enum values. When using Basis Universal\n\t * texture formats, `vkFormat` must be VK_FORMAT_UNDEFINED.\n\t */\n\tpublic vkFormat = VK_FORMAT_UNDEFINED;\n\n\t/**\n\t * Size of the data type in bytes used to upload the data to a graphics API. When `vkFormat` is\n\t * VK_FORMAT_UNDEFINED, `typeSize` must be 1.\n\t */\n\tpublic typeSize = 1;\n\n\t/** Width of the texture image for level 0, in pixels. */\n\tpublic pixelWidth = 0;\n\n\t/** Height of the texture image for level 0, in pixels. */\n\tpublic pixelHeight = 0;\n\n\t/** Depth of the texture image for level 0, in pixels (3D textures only). */\n\tpublic pixelDepth = 0;\n\n\t/** Number of array elements (array textures only). */\n\tpublic layerCount = 0;\n\n\t/**\n\t * Number of cubemap faces. For cubemaps and cubemap arrays, `faceCount` must be 6. For all\n\t * other textures, `faceCount` must be 1. Cubemap faces are stored in +X, -X, +Y, -Y, +Z, -Z\n\t * order.\n\t */\n\tpublic faceCount = 1;\n\n\t/** Indicates which supercompression scheme has been applied to mip level images, if any. */\n\tpublic supercompressionScheme = KHR_SUPERCOMPRESSION_NONE;\n\n\t/** Mip levels, ordered largest (original) to smallest (~1px). */\n\tpublic levels: KTX2Level[] = [];\n\n\t/** Data Format Descriptor. */\n\tpublic dataFormatDescriptor: KTX2DataFormatDescriptorBasicFormat[] = [\n\t\t{\n\t\t\tvendorId: KHR_DF_VENDORID_KHRONOS,\n\t\t\tdescriptorType: KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT,\n\t\t\tdescriptorBlockSize: 0,\n\t\t\tversionNumber: KHR_DF_VERSION,\n\t\t\tcolorModel: KHR_DF_MODEL_UNSPECIFIED,\n\t\t\tcolorPrimaries: KHR_DF_PRIMARIES_BT709,\n\t\t\ttransferFunction: KHR_DF_TRANSFER_SRGB,\n\t\t\tflags: KHR_DF_FLAG_ALPHA_STRAIGHT,\n\t\t\ttexelBlockDimension: [0, 0, 0, 0],\n\t\t\tbytesPlane: [0, 0, 0, 0, 0, 0, 0, 0],\n\t\t\tsamples: [],\n\t\t},\n\t];\n\n\t/** Key/Value Data. */\n\tpublic keyValue: { [key: string]: string | Uint8Array } = {};\n\n\t/** Supercompression Global Data. */\n\tpublic globalData: KTX2GlobalDataBasisLZ | null = null;\n}\n\n///////////////////////////////////////////////////\n// Mip Levels.\n///////////////////////////////////////////////////\n\nexport interface KTX2Level {\n\t/** Compressed data of the mip level. */\n\tlevelData: Uint8Array;\n\n\t/**\n\t * Size of the mip level after reflation from supercompression, if applicable. When\n\t * `supercompressionType` is BASISLZ, `uncompressedByteLength` must be 0. When\n\t * `supercompressionType` is `NONE`, `uncompressedByteLength` must match the `levelData` byte\n\t * length.\n\t *\n\t * _**NOTICE:** this implies that for formats such as UASTC, `uncompressedByteLength` may\n\t * indicate size after ZSTD reflation (and of transcoded ASTC data), but does _not_ indicate\n\t * size of decoded RGBA32 pixels._\n\t */\n\tuncompressedByteLength: number;\n}\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport interface KTX2DataFormatDescriptorBasicFormat {\n\tvendorId: number;\n\tdescriptorType: number;\n\tversionNumber: number;\n\t/** @deprecated Inferred. */\n\tdescriptorBlockSize: number;\n\tcolorModel: number;\n\tcolorPrimaries: number;\n\ttransferFunction: number;\n\tflags: number;\n\ttexelBlockDimension: [number, number, number, number];\n\tbytesPlane: [number, number, number, number, number, number, number, number];\n\tsamples: KTX2BasicFormatSample[];\n}\n\nexport interface KTX2BasicFormatSample {\n\tbitOffset: number;\n\tbitLength: number;\n\t/** @deprecated Renamed to 'channelType'. */\n\tchannelID?: number;\n\tchannelType: number;\n\tsamplePosition: number[];\n\tsampleLower: number;\n\tsampleUpper: number;\n}\n\n///////////////////////////////////////////////////\n// Supercompression Global Data.\n///////////////////////////////////////////////////\n\nexport interface KTX2GlobalDataBasisLZ {\n\tendpointCount: number;\n\tselectorCount: number;\n\timageDescs: KTX2GlobalDataBasisLZImageDesc[];\n\tendpointsData: Uint8Array;\n\tselectorsData: Uint8Array;\n\ttablesData: Uint8Array;\n\textendedData: Uint8Array;\n}\n\ninterface KTX2GlobalDataBasisLZImageDesc {\n\timageFlags: number;\n\trgbSliceByteOffset: number;\n\trgbSliceByteLength: number;\n\talphaSliceByteOffset: number;\n\talphaSliceByteLength: number;\n}\n","export class BufferReader {\n\tprivate _dataView: DataView;\n\tprivate _littleEndian: boolean;\n\tpublic _offset: number;\n\n\tconstructor(data: Uint8Array, byteOffset: number, byteLength: number, littleEndian: boolean) {\n\t\tthis._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);\n\t\tthis._littleEndian = littleEndian;\n\t\tthis._offset = 0;\n\t}\n\n\t_nextUint8() {\n\t\tconst value = this._dataView.getUint8(this._offset);\n\t\tthis._offset += 1;\n\t\treturn value;\n\t}\n\n\t_nextUint16() {\n\t\tconst value = this._dataView.getUint16(this._offset, this._littleEndian);\n\t\tthis._offset += 2;\n\t\treturn value;\n\t}\n\n\t_nextUint32() {\n\t\tconst value = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tthis._offset += 4;\n\t\treturn value;\n\t}\n\n\t_nextUint64() {\n\t\tconst left = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tconst right = this._dataView.getUint32(this._offset + 4, this._littleEndian);\n\t\t// TODO(cleanup): Just test this...\n\t\t// const value = this._littleEndian ? left + (2 ** 32 * right) : (2 ** 32 * left) + right;\n\t\tconst value = left + 2 ** 32 * right;\n\t\tthis._offset += 8;\n\t\treturn value;\n\t}\n\n\t_nextInt32() {\n\t\tconst value = this._dataView.getInt32(this._offset, this._littleEndian);\n\t\tthis._offset += 4;\n\t\treturn value;\n\t}\n\n\t_skip(bytes: number) {\n\t\tthis._offset += bytes;\n\t\treturn this;\n\t}\n\n\t_scan(maxByteLength: number, term = 0x00): Uint8Array {\n\t\tconst byteOffset = this._offset;\n\t\tlet byteLength = 0;\n\t\twhile (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n\t\t\tbyteLength++;\n\t\t\tthis._offset++;\n\t\t}\n\n\t\tif (byteLength < maxByteLength) this._offset++;\n\n\t\treturn new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + byteOffset, byteLength);\n\t}\n}\n","///////////////////////////////////////////////////\n// Common.\n///////////////////////////////////////////////////\n\n// Injected at compile time, from $npm_package_version.\ndeclare const PACKAGE_VERSION: string;\n\nexport const KTX_WRITER = `KTX-Parse v${PACKAGE_VERSION}`;\n\nexport const NUL = new Uint8Array([0x00]);\n\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport const KTX2_ID = [\n\t// '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n\t0xab, 0x4b, 0x54, 0x58, 0x20, 0x32, 0x30, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a,\n];\n\nexport const HEADER_BYTE_LENGTH = 68; // 13 * 4 + 2 * 8\n","/** Encodes text to an ArrayBuffer. */\nexport function encodeText(text: string): Uint8Array {\n\tif (typeof TextEncoder !== 'undefined') {\n\t\treturn new TextEncoder().encode(text);\n\t}\n\treturn Buffer.from(text);\n}\n\n/** Decodes an ArrayBuffer to text. */\nexport function decodeText(buffer: Uint8Array): string {\n\tif (typeof TextDecoder !== 'undefined') {\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\treturn Buffer.from(buffer).toString('utf8');\n}\n\n/** Concatenates N ArrayBuffers. */\nexport function concat(buffers: (ArrayBuffer | Uint8Array)[]): Uint8Array {\n\tlet totalByteLength = 0;\n\tfor (const buffer of buffers) {\n\t\ttotalByteLength += buffer.byteLength;\n\t}\n\n\tconst result = new Uint8Array(totalByteLength);\n\tlet byteOffset = 0;\n\n\tfor (const buffer of buffers) {\n\t\tresult.set(new Uint8Array(buffer), byteOffset);\n\t\tbyteOffset += buffer.byteLength;\n\t}\n\n\treturn result;\n}\n","import { BufferReader } from './buffer-reader';\nimport { KHR_DF_SAMPLE_DATATYPE_SIGNED } from './constants';\nimport { KTX2_ID } from './constants-internal';\nimport { KTX2Container, KTX2DataFormatDescriptorBasicFormat } from './container';\nimport { decodeText } from './util';\n\n/**\n * Parses a KTX 2.0 file, returning an unpacked {@link KTX2Container} instance with all associated\n * data. The container's mip levels and other binary data are pointers into the original file, not\n * copies, so the original file should not be overwritten after reading.\n *\n * @param data Bytes of KTX 2.0 file, as Uint8Array or Buffer.\n */\nexport function read(data: Uint8Array): KTX2Container {\n\t///////////////////////////////////////////////////\n\t// KTX 2.0 Identifier.\n\t///////////////////////////////////////////////////\n\n\tconst id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);\n\tif (\n\t\tid[0] !== KTX2_ID[0] || // '´'\n\t\tid[1] !== KTX2_ID[1] || // 'K'\n\t\tid[2] !== KTX2_ID[2] || // 'T'\n\t\tid[3] !== KTX2_ID[3] || // 'X'\n\t\tid[4] !== KTX2_ID[4] || // ' '\n\t\tid[5] !== KTX2_ID[5] || // '2'\n\t\tid[6] !== KTX2_ID[6] || // '0'\n\t\tid[7] !== KTX2_ID[7] || // 'ª'\n\t\tid[8] !== KTX2_ID[8] || // '\\r'\n\t\tid[9] !== KTX2_ID[9] || // '\\n'\n\t\tid[10] !== KTX2_ID[10] || // '\\x1A'\n\t\tid[11] !== KTX2_ID[11] // '\\n'\n\t) {\n\t\tthrow new Error('Missing KTX 2.0 identifier.');\n\t}\n\n\tconst container = new KTX2Container();\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;\n\tconst headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);\n\n\tcontainer.vkFormat = headerReader._nextUint32();\n\tcontainer.typeSize = headerReader._nextUint32();\n\tcontainer.pixelWidth = headerReader._nextUint32();\n\tcontainer.pixelHeight = headerReader._nextUint32();\n\tcontainer.pixelDepth = headerReader._nextUint32();\n\tcontainer.layerCount = headerReader._nextUint32();\n\tcontainer.faceCount = headerReader._nextUint32();\n\n\tconst levelCount = headerReader._nextUint32();\n\n\tcontainer.supercompressionScheme = headerReader._nextUint32();\n\n\tconst dfdByteOffset = headerReader._nextUint32();\n\tconst dfdByteLength = headerReader._nextUint32();\n\tconst kvdByteOffset = headerReader._nextUint32();\n\tconst kvdByteLength = headerReader._nextUint32();\n\tconst sgdByteOffset = headerReader._nextUint64();\n\tconst sgdByteLength = headerReader._nextUint64();\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelByteLength = levelCount * 3 * 8;\n\tconst levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);\n\n\tfor (let i = 0; i < levelCount; i++) {\n\t\tcontainer.levels.push({\n\t\t\tlevelData: new Uint8Array(\n\t\t\t\tdata.buffer,\n\t\t\t\tdata.byteOffset + levelReader._nextUint64(),\n\t\t\t\tlevelReader._nextUint64()\n\t\t\t),\n\t\t\tuncompressedByteLength: levelReader._nextUint64(),\n\t\t});\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tconst dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);\n\n\tconst dfd: KTX2DataFormatDescriptorBasicFormat = {\n\t\tvendorId: dfdReader._skip(4 /* totalSize */)._nextUint16(),\n\t\tdescriptorType: dfdReader._nextUint16(),\n\t\tversionNumber: dfdReader._nextUint16(),\n\t\tdescriptorBlockSize: dfdReader._nextUint16(),\n\t\tcolorModel: dfdReader._nextUint8(),\n\t\tcolorPrimaries: dfdReader._nextUint8(),\n\t\ttransferFunction: dfdReader._nextUint8(),\n\t\tflags: dfdReader._nextUint8(),\n\t\ttexelBlockDimension: [\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t],\n\t\tbytesPlane: [\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t],\n\t\tsamples: [],\n\t};\n\n\tconst sampleStart = 6;\n\tconst sampleWords = 4;\n\tconst numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n\n\tfor (let i = 0; i < numSamples; i++) {\n\t\tconst sample = {\n\t\t\tbitOffset: dfdReader._nextUint16(),\n\t\t\tbitLength: dfdReader._nextUint8(),\n\t\t\tchannelType: dfdReader._nextUint8(),\n\t\t\tsamplePosition: [\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t],\n\t\t\tsampleLower: -Infinity,\n\t\t\tsampleUpper: Infinity,\n\t\t};\n\n\t\tif (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n\t\t\tsample.sampleLower = dfdReader._nextInt32();\n\t\t\tsample.sampleUpper = dfdReader._nextInt32();\n\t\t} else {\n\t\t\tsample.sampleLower = dfdReader._nextUint32();\n\t\t\tsample.sampleUpper = dfdReader._nextUint32();\n\t\t}\n\n\t\tdfd.samples[i] = sample;\n\t}\n\n\tcontainer.dataFormatDescriptor.length = 0;\n\tcontainer.dataFormatDescriptor.push(dfd);\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n\n\twhile (kvdReader._offset < kvdByteLength) {\n\t\tconst keyValueByteLength = kvdReader._nextUint32();\n\t\tconst keyData = kvdReader._scan(keyValueByteLength);\n\t\tconst key = decodeText(keyData);\n\n\t\tconst valueData = kvdReader._scan(keyValueByteLength - keyData.byteLength);\n\t\tcontainer.keyValue[key] = key.match(/^ktx/i) ? decodeText(valueData) : valueData;\n\n\t\t// 4-byte alignment.\n\t\tif (kvdReader._offset % 4) kvdReader._skip(4 - (kvdReader._offset % 4));\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tif (sgdByteLength <= 0) return container;\n\n\tconst sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n\n\tconst endpointCount = sgdReader._nextUint16();\n\tconst selectorCount = sgdReader._nextUint16();\n\tconst endpointsByteLength = sgdReader._nextUint32();\n\tconst selectorsByteLength = sgdReader._nextUint32();\n\tconst tablesByteLength = sgdReader._nextUint32();\n\tconst extendedByteLength = sgdReader._nextUint32();\n\n\tconst imageDescs = [];\n\tfor (let i = 0; i < levelCount; i++) {\n\t\timageDescs.push({\n\t\t\timageFlags: sgdReader._nextUint32(),\n\t\t\trgbSliceByteOffset: sgdReader._nextUint32(),\n\t\t\trgbSliceByteLength: sgdReader._nextUint32(),\n\t\t\talphaSliceByteOffset: sgdReader._nextUint32(),\n\t\t\talphaSliceByteLength: sgdReader._nextUint32(),\n\t\t});\n\t}\n\n\tconst endpointsByteOffset = sgdByteOffset + sgdReader._offset;\n\tconst selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n\tconst tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n\tconst extendedByteOffset = tablesByteOffset + tablesByteLength;\n\n\tconst endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);\n\tconst selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);\n\tconst tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);\n\tconst extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);\n\n\tcontainer.globalData = {\n\t\tendpointCount,\n\t\tselectorCount,\n\t\timageDescs,\n\t\tendpointsData,\n\t\tselectorsData,\n\t\ttablesData,\n\t\textendedData,\n\t};\n\n\treturn container;\n}\n","import { HEADER_BYTE_LENGTH, KTX2_ID, KTX_WRITER, NUL } from './constants-internal';\nimport { KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT, KHR_DF_SAMPLE_DATATYPE_SIGNED } from './constants';\nimport { KTX2Container } from './container';\nimport { concat, encodeText } from './util';\n\ninterface WriteOptions {\n\tkeepWriter?: boolean;\n}\nconst DEFAULT_OPTIONS: WriteOptions = { keepWriter: false };\n\n/**\n * Serializes a {@link KTX2Container} instance to a KTX 2.0 file. Mip levels and other binary data\n * are copied into the resulting Uint8Array, so the original container can safely be edited or\n * destroyed after it is serialized.\n *\n * Options:\n * - keepWriter: If true, 'KTXWriter' key/value field is written as provided by the container.\n * \t\tOtherwise, a string for the current ktx-parse version is generated. Default: false.\n *\n * @param container\n * @param options\n */\nexport function write(container: KTX2Container, options: WriteOptions = {}): Uint8Array {\n\toptions = { ...DEFAULT_OPTIONS, ...options };\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tlet sgdBuffer = new ArrayBuffer(0);\n\tif (container.globalData) {\n\t\tconst sgdHeaderBuffer = new ArrayBuffer(20 + container.globalData.imageDescs.length * 5 * 4);\n\t\tconst sgdHeaderView = new DataView(sgdHeaderBuffer);\n\t\tsgdHeaderView.setUint16(0, container.globalData.endpointCount, true);\n\t\tsgdHeaderView.setUint16(2, container.globalData.selectorCount, true);\n\t\tsgdHeaderView.setUint32(4, container.globalData.endpointsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(8, container.globalData.selectorsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(12, container.globalData.tablesData.byteLength, true);\n\t\tsgdHeaderView.setUint32(16, container.globalData.extendedData.byteLength, true);\n\n\t\tfor (let i = 0; i < container.globalData.imageDescs.length; i++) {\n\t\t\tconst imageDesc = container.globalData.imageDescs[i];\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 0, imageDesc.imageFlags, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 4, imageDesc.rgbSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 8, imageDesc.rgbSliceByteLength, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 12, imageDesc.alphaSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 16, imageDesc.alphaSliceByteLength, true);\n\t\t}\n\n\t\tsgdBuffer = concat([\n\t\t\tsgdHeaderBuffer,\n\t\t\tcontainer.globalData.endpointsData,\n\t\t\tcontainer.globalData.selectorsData,\n\t\t\tcontainer.globalData.tablesData,\n\t\t\tcontainer.globalData.extendedData,\n\t\t]);\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst keyValueData: Uint8Array[] = [];\n\tlet keyValue = container.keyValue;\n\n\tif (!options.keepWriter) {\n\t\tkeyValue = { ...container.keyValue, KTXwriter: KTX_WRITER };\n\t}\n\n\tfor (const key in keyValue) {\n\t\tconst value = keyValue[key];\n\t\tconst keyData = encodeText(key);\n\t\tconst valueData = typeof value === 'string' ? encodeText(value) : value;\n\t\tconst kvByteLength = keyData.byteLength + 1 + valueData.byteLength + 1;\n\t\tconst kvPadding = kvByteLength % 4 ? 4 - (kvByteLength % 4) : 0; // align(4)\n\t\tkeyValueData.push(\n\t\t\tconcat([\n\t\t\t\tnew Uint32Array([kvByteLength]),\n\t\t\t\tkeyData,\n\t\t\t\tNUL,\n\t\t\t\tvalueData,\n\t\t\t\tNUL,\n\t\t\t\tnew Uint8Array(kvPadding).fill(0x00), // align(4)\n\t\t\t])\n\t\t);\n\t}\n\n\tconst kvdBuffer = concat(keyValueData);\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tif (\n\t\tcontainer.dataFormatDescriptor.length !== 1 ||\n\t\tcontainer.dataFormatDescriptor[0].descriptorType !== KHR_DF_KHR_DESCRIPTORTYPE_BASICFORMAT\n\t) {\n\t\tthrow new Error('Only BASICFORMAT Data Format Descriptor output supported.');\n\t}\n\n\tconst dfd = container.dataFormatDescriptor[0];\n\n\tconst dfdBuffer = new ArrayBuffer(28 + dfd.samples.length * 16);\n\tconst dfdView = new DataView(dfdBuffer);\n\tconst descriptorBlockSize = 24 + dfd.samples.length * 16;\n\n\tdfdView.setUint32(0, dfdBuffer.byteLength, true);\n\tdfdView.setUint16(4, dfd.vendorId, true);\n\tdfdView.setUint16(6, dfd.descriptorType, true);\n\tdfdView.setUint16(8, dfd.versionNumber, true);\n\tdfdView.setUint16(10, descriptorBlockSize, true);\n\n\tdfdView.setUint8(12, dfd.colorModel);\n\tdfdView.setUint8(13, dfd.colorPrimaries);\n\tdfdView.setUint8(14, dfd.transferFunction);\n\tdfdView.setUint8(15, dfd.flags);\n\n\tif (!Array.isArray(dfd.texelBlockDimension)) {\n\t\tthrow new Error('texelBlockDimension is now an array. For dimensionality `d`, set `d - 1`.');\n\t}\n\n\tdfdView.setUint8(16, dfd.texelBlockDimension[0]);\n\tdfdView.setUint8(17, dfd.texelBlockDimension[1]);\n\tdfdView.setUint8(18, dfd.texelBlockDimension[2]);\n\tdfdView.setUint8(19, dfd.texelBlockDimension[3]);\n\n\tfor (let i = 0; i < 8; i++) dfdView.setUint8(20 + i, dfd.bytesPlane[i]);\n\n\tfor (let i = 0; i < dfd.samples.length; i++) {\n\t\tconst sample = dfd.samples[i];\n\t\tconst sampleByteOffset = 28 + i * 16;\n\n\t\tif (sample.channelID) {\n\t\t\tthrow new Error('channelID has been renamed to channelType.');\n\t\t}\n\n\t\tdfdView.setUint16(sampleByteOffset + 0, sample.bitOffset, true);\n\t\tdfdView.setUint8(sampleByteOffset + 2, sample.bitLength);\n\t\tdfdView.setUint8(sampleByteOffset + 3, sample.channelType);\n\n\t\tdfdView.setUint8(sampleByteOffset + 4, sample.samplePosition[0]);\n\t\tdfdView.setUint8(sampleByteOffset + 5, sample.samplePosition[1]);\n\t\tdfdView.setUint8(sampleByteOffset + 6, sample.samplePosition[2]);\n\t\tdfdView.setUint8(sampleByteOffset + 7, sample.samplePosition[3]);\n\n\t\tif (sample.channelType & KHR_DF_SAMPLE_DATATYPE_SIGNED) {\n\t\t\tdfdView.setInt32(sampleByteOffset + 8, sample.sampleLower, true);\n\t\t\tdfdView.setInt32(sampleByteOffset + 12, sample.sampleUpper, true);\n\t\t} else {\n\t\t\tdfdView.setUint32(sampleByteOffset + 8, sample.sampleLower, true);\n\t\t\tdfdView.setUint32(sampleByteOffset + 12, sample.sampleUpper, true);\n\t\t}\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Data alignment.\n\t///////////////////////////////////////////////////\n\n\tconst dfdByteOffset = KTX2_ID.length + HEADER_BYTE_LENGTH + container.levels.length * 3 * 8;\n\tconst kvdByteOffset = dfdByteOffset + dfdBuffer.byteLength;\n\tlet sgdByteOffset = sgdBuffer.byteLength > 0 ? kvdByteOffset + kvdBuffer.byteLength : 0;\n\tif (sgdByteOffset % 8) sgdByteOffset += 8 - (sgdByteOffset % 8); // align(8)\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelData: Uint8Array[] = [];\n\tconst levelIndex = new DataView(new ArrayBuffer(container.levels.length * 3 * 8));\n\n\tlet levelDataByteOffset = (sgdByteOffset || kvdByteOffset + kvdBuffer.byteLength) + sgdBuffer.byteLength;\n\tfor (let i = 0; i < container.levels.length; i++) {\n\t\tconst level = container.levels[i];\n\t\tlevelData.push(level.levelData);\n\t\tlevelIndex.setBigUint64(i * 24 + 0, BigInt(levelDataByteOffset), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 8, BigInt(level.levelData.byteLength), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 16, BigInt(level.uncompressedByteLength), true);\n\t\tlevelDataByteOffset += level.levelData.byteLength;\n\t}\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerBuffer = new ArrayBuffer(HEADER_BYTE_LENGTH);\n\tconst headerView = new DataView(headerBuffer);\n\theaderView.setUint32(0, container.vkFormat, true);\n\theaderView.setUint32(4, container.typeSize, true);\n\theaderView.setUint32(8, container.pixelWidth, true);\n\theaderView.setUint32(12, container.pixelHeight, true);\n\theaderView.setUint32(16, container.pixelDepth, true);\n\theaderView.setUint32(20, container.layerCount, true);\n\theaderView.setUint32(24, container.faceCount, true);\n\theaderView.setUint32(28, container.levels.length, true);\n\theaderView.setUint32(32, container.supercompressionScheme, true);\n\n\theaderView.setUint32(36, dfdByteOffset, true);\n\theaderView.setUint32(40, dfdBuffer.byteLength, true);\n\theaderView.setUint32(44, kvdByteOffset, true);\n\theaderView.setUint32(48, kvdBuffer.byteLength, true);\n\theaderView.setBigUint64(52, BigInt(sgdBuffer.byteLength > 0 ? sgdByteOffset : 0), true);\n\theaderView.setBigUint64(60, BigInt(sgdBuffer.byteLength), true);\n\n\t///////////////////////////////////////////////////\n\t// Compose.\n\t///////////////////////////////////////////////////\n\n\treturn new Uint8Array(\n\t\tconcat([\n\t\t\tnew Uint8Array(KTX2_ID).buffer,\n\t\t\theaderBuffer,\n\t\t\tlevelIndex.buffer,\n\t\t\tdfdBuffer,\n\t\t\tkvdBuffer,\n\t\t\tsgdByteOffset > 0\n\t\t\t\t? new ArrayBuffer(sgdByteOffset - (kvdByteOffset + kvdBuffer.byteLength)) // align(8)\n\t\t\t\t: new ArrayBuffer(0),\n\t\t\tsgdBuffer,\n\t\t\t...levelData,\n\t\t])\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}