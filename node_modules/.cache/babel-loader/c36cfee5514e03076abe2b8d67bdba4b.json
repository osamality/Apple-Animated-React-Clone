{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from 'three';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nclass BloomPass extends Pass {\n  constructor(strength = 1, kernelSize = 25, sigma = 4, resolution = 256) {\n    super(); // render targets\n\n    _defineProperty(this, \"renderTargetX\", void 0);\n\n    _defineProperty(this, \"renderTargetY\", void 0);\n\n    _defineProperty(this, \"materialCombine\", void 0);\n\n    _defineProperty(this, \"materialConvolution\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"combineUniforms\", void 0);\n\n    _defineProperty(this, \"convolutionUniforms\", void 0);\n\n    _defineProperty(this, \"blurX\", new Vector2(0.001953125, 0.0));\n\n    _defineProperty(this, \"blurY\", new Vector2(0.0, 0.001953125));\n\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetX.texture.name = 'BloomPass.x';\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetY.texture.name = 'BloomPass.y'; // combine material\n\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms['strength'].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    }); // convolution material\n\n    if (ConvolutionShader === undefined) console.error('BloomPass relies on ConvolutionShader');\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialConvolution);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms['tDiffuse'].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n\n}\n\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`,\n  fragmentShader:\n  /* glsl */\n  `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`\n};\nexport { BloomPass };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/postprocessing/BloomPass.js"],"names":["_defineProperty","Pass","FullScreenQuad","Vector2","WebGLRenderTarget","UniformsUtils","ShaderMaterial","AdditiveBlending","ConvolutionShader","BloomPass","constructor","strength","kernelSize","sigma","resolution","renderTargetX","texture","name","renderTargetY","combineUniforms","clone","CombineShader","uniforms","value","materialCombine","vertexShader","fragmentShader","blending","transparent","undefined","console","error","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","blurY","tDiffuse"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from 'three';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nclass BloomPass extends Pass {\n  constructor(strength = 1, kernelSize = 25, sigma = 4, resolution = 256) {\n    super(); // render targets\n\n    _defineProperty(this, \"renderTargetX\", void 0);\n\n    _defineProperty(this, \"renderTargetY\", void 0);\n\n    _defineProperty(this, \"materialCombine\", void 0);\n\n    _defineProperty(this, \"materialConvolution\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"combineUniforms\", void 0);\n\n    _defineProperty(this, \"convolutionUniforms\", void 0);\n\n    _defineProperty(this, \"blurX\", new Vector2(0.001953125, 0.0));\n\n    _defineProperty(this, \"blurY\", new Vector2(0.0, 0.001953125));\n\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetX.texture.name = 'BloomPass.x';\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetY.texture.name = 'BloomPass.y'; // combine material\n\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms['strength'].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    }); // convolution material\n\n    if (ConvolutionShader === undefined) console.error('BloomPass relies on ConvolutionShader');\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialConvolution);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms['tDiffuse'].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n\n}\n\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`,\n  fragmentShader:\n  /* glsl */\n  `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`\n};\n\nexport { BloomPass };\n"]},"metadata":{},"sourceType":"module"}