{"ast":null,"code":"import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._tDiffuseBlur = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._hasBlur = {\n      value: false\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this._mixContrast = {\n      value: 1.0\n    };\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.uniforms.mixContrast = this._mixContrast;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;\n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n\n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n\n      vec4 merge = base;\n\n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n\n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n  get mixContrast() {\n    return this._mixContrast.value;\n  }\n\n  set mixContrast(v) {\n    this._mixContrast.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"names":["MeshStandardMaterial","MeshReflectorMaterial","constructor","parameters","_tDepth","value","_distortionMap","_tDiffuse","_tDiffuseBlur","_textureMatrix","_hasBlur","_mirror","_mixBlur","_blurStrength","_minDepthThreshold","_maxDepthThreshold","_depthScale","_depthToBlurRatioBias","_distortion","_mixContrast","setValues","onBeforeCompile","shader","_shader$defines","defines","USE_UV","uniforms","hasBlur","tDiffuse","tDepth","distortionMap","tDiffuseBlur","textureMatrix","mirror","mixBlur","mixStrength","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","distortion","mixContrast","vertexShader","replace","fragmentShader","v"],"mappings":"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","sourcesContent":["import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._tDiffuseBlur = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._hasBlur = {\n      value: false\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this._mixContrast = {\n      value: 1.0\n    };\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.uniforms.mixContrast = this._mixContrast;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;\n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n\n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n\n      vec4 merge = base;\n\n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n\n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n  get mixContrast() {\n    return this._mixContrast.value;\n  }\n\n  set mixContrast(v) {\n    this._mixContrast.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };\n"]},"metadata":{},"sourceType":"module"}