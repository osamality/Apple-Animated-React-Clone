{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshSurfaceSampler } from 'three-stdlib';\nimport { InstancedBufferAttribute, Vector3, Color, Object3D } from 'three';\n\nfunction useSurfaceSampler(mesh, count = 16, transform, weight, instanceMesh) {\n  const [buffer, setBuffer] = React.useState(() => {\n    const arr = Array.from({\n      length: count\n    }, () => [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]).flat();\n    return new InstancedBufferAttribute(Float32Array.from(arr), 16);\n  });\n  React.useEffect(() => {\n    if (typeof mesh.current === 'undefined') return;\n    const sampler = new MeshSurfaceSampler(mesh.current);\n\n    if (weight) {\n      sampler.setWeightAttribute(weight);\n    }\n\n    sampler.build();\n    const position = new Vector3();\n    const normal = new Vector3();\n    const color = new Color();\n    const dummy = new Object3D();\n    mesh.current.updateMatrixWorld(true);\n\n    for (let i = 0; i < count; i++) {\n      sampler.sample(position, normal, color);\n\n      if (typeof transform === 'function') {\n        transform({\n          dummy,\n          sampledMesh: mesh.current,\n          position,\n          normal,\n          color\n        }, i);\n      } else {\n        dummy.position.copy(position);\n      }\n\n      dummy.updateMatrix();\n\n      if (instanceMesh != null && instanceMesh.current) {\n        instanceMesh.current.setMatrixAt(i, dummy.matrix);\n      }\n\n      dummy.matrix.toArray(buffer.array, i * 16);\n    }\n\n    if (instanceMesh != null && instanceMesh.current) {\n      instanceMesh.current.instanceMatrix.needsUpdate = true;\n    }\n\n    buffer.needsUpdate = true;\n    setBuffer(buffer.clone());\n  }, [mesh, instanceMesh, weight, count, transform]);\n  return buffer;\n}\n\nfunction Sampler({\n  children,\n  weight,\n  transform,\n  instances,\n  mesh,\n  count = 16,\n  ...props\n}) {\n  const group = React.useRef(null);\n  const instancedRef = React.useRef(null);\n  const meshToSampleRef = React.useRef(null);\n  React.useEffect(() => {\n    var _instances$current, _mesh$current;\n\n    instancedRef.current = (_instances$current = instances == null ? void 0 : instances.current) !== null && _instances$current !== void 0 ? _instances$current : group.current.children.find(c => c.hasOwnProperty('instanceMatrix'));\n    meshToSampleRef.current = (_mesh$current = mesh == null ? void 0 : mesh.current) !== null && _mesh$current !== void 0 ? _mesh$current : group.current.children.find(c => c.type === 'Mesh');\n  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);\n  useSurfaceSampler(meshToSampleRef, count, transform, weight, instancedRef);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: group\n  }, props), children);\n}\n\nexport { Sampler, useSurfaceSampler };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/core/Sampler.js"],"names":["_extends","React","MeshSurfaceSampler","InstancedBufferAttribute","Vector3","Color","Object3D","useSurfaceSampler","mesh","count","transform","weight","instanceMesh","buffer","setBuffer","useState","arr","Array","from","length","flat","Float32Array","useEffect","current","sampler","setWeightAttribute","build","position","normal","color","dummy","updateMatrixWorld","i","sample","sampledMesh","copy","updateMatrix","setMatrixAt","matrix","toArray","array","instanceMatrix","needsUpdate","clone","Sampler","children","instances","props","group","useRef","instancedRef","meshToSampleRef","_instances$current","_mesh$current","find","c","hasOwnProperty","type","createElement","ref"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { MeshSurfaceSampler } from 'three-stdlib';\nimport { InstancedBufferAttribute, Vector3, Color, Object3D } from 'three';\n\nfunction useSurfaceSampler(mesh, count = 16, transform, weight, instanceMesh) {\n  const [buffer, setBuffer] = React.useState(() => {\n    const arr = Array.from({\n      length: count\n    }, () => [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]).flat();\n    return new InstancedBufferAttribute(Float32Array.from(arr), 16);\n  });\n  React.useEffect(() => {\n    if (typeof mesh.current === 'undefined') return;\n    const sampler = new MeshSurfaceSampler(mesh.current);\n\n    if (weight) {\n      sampler.setWeightAttribute(weight);\n    }\n\n    sampler.build();\n    const position = new Vector3();\n    const normal = new Vector3();\n    const color = new Color();\n    const dummy = new Object3D();\n    mesh.current.updateMatrixWorld(true);\n\n    for (let i = 0; i < count; i++) {\n      sampler.sample(position, normal, color);\n\n      if (typeof transform === 'function') {\n        transform({\n          dummy,\n          sampledMesh: mesh.current,\n          position,\n          normal,\n          color\n        }, i);\n      } else {\n        dummy.position.copy(position);\n      }\n\n      dummy.updateMatrix();\n\n      if (instanceMesh != null && instanceMesh.current) {\n        instanceMesh.current.setMatrixAt(i, dummy.matrix);\n      }\n\n      dummy.matrix.toArray(buffer.array, i * 16);\n    }\n\n    if (instanceMesh != null && instanceMesh.current) {\n      instanceMesh.current.instanceMatrix.needsUpdate = true;\n    }\n\n    buffer.needsUpdate = true;\n    setBuffer(buffer.clone());\n  }, [mesh, instanceMesh, weight, count, transform]);\n  return buffer;\n}\nfunction Sampler({\n  children,\n  weight,\n  transform,\n  instances,\n  mesh,\n  count = 16,\n  ...props\n}) {\n  const group = React.useRef(null);\n  const instancedRef = React.useRef(null);\n  const meshToSampleRef = React.useRef(null);\n  React.useEffect(() => {\n    var _instances$current, _mesh$current;\n\n    instancedRef.current = (_instances$current = instances == null ? void 0 : instances.current) !== null && _instances$current !== void 0 ? _instances$current : group.current.children.find(c => c.hasOwnProperty('instanceMatrix'));\n    meshToSampleRef.current = (_mesh$current = mesh == null ? void 0 : mesh.current) !== null && _mesh$current !== void 0 ? _mesh$current : group.current.children.find(c => c.type === 'Mesh');\n  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);\n  useSurfaceSampler(meshToSampleRef, count, transform, weight, instancedRef);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: group\n  }, props), children);\n}\n\nexport { Sampler, useSurfaceSampler };\n"]},"metadata":{},"sourceType":"module"}