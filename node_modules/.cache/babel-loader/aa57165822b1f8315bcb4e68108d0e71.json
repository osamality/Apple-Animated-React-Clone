{"ast":null,"code":"import { WebGLRenderTarget, LinearFilter, Vector2, Scene, Camera, BufferGeometry, BufferAttribute, Mesh } from 'three';\nimport { ConvolutionMaterial } from './ConvolutionMaterial.js';\n\nclass BlurPass {\n  constructor({\n    gl,\n    resolution,\n    width = 500,\n    height = 500,\n    minDepthThreshold = 0,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    depthToBlurRatioBias = 0.25\n  }) {\n    this.renderToScreen = false;\n    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      stencilBuffer: false,\n      depthBuffer: false,\n      encoding: gl.outputEncoding\n    });\n    this.renderTargetB = this.renderTargetA.clone();\n    this.convolutionMaterial = new ConvolutionMaterial();\n    this.convolutionMaterial.setTexelSize(1.0 / width, 1.0 / height);\n    this.convolutionMaterial.setResolution(new Vector2(width, height));\n    this.scene = new Scene();\n    this.camera = new Camera();\n    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;\n    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;\n    this.convolutionMaterial.uniforms.depthScale.value = depthScale;\n    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;\n    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;\n    const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);\n    const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n    geometry.setAttribute('uv', new BufferAttribute(uvs, 2));\n    this.screen = new Mesh(geometry, this.convolutionMaterial);\n    this.screen.frustumCulled = false;\n    this.scene.add(this.screen);\n  }\n\n  render(renderer, inputBuffer, outputBuffer) {\n    const scene = this.scene;\n    const camera = this.camera;\n    const renderTargetA = this.renderTargetA;\n    const renderTargetB = this.renderTargetB;\n    let material = this.convolutionMaterial;\n    let uniforms = material.uniforms;\n    uniforms.depthBuffer.value = inputBuffer.depthTexture;\n    const kernel = material.kernel;\n    let lastRT = inputBuffer;\n    let destRT;\n    let i, l; // Apply the multi-pass blur.\n\n    for (i = 0, l = kernel.length - 1; i < l; ++i) {\n      // Alternate between targets.\n      destRT = (i & 1) === 0 ? renderTargetA : renderTargetB;\n      uniforms.kernel.value = kernel[i];\n      uniforms.inputBuffer.value = lastRT.texture;\n      renderer.setRenderTarget(destRT);\n      renderer.render(scene, camera);\n      lastRT = destRT;\n    }\n\n    uniforms.kernel.value = kernel[i];\n    uniforms.inputBuffer.value = lastRT.texture;\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n    renderer.render(scene, camera);\n  }\n\n}\n\nexport { BlurPass };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/@react-three/drei/materials/BlurPass.js"],"names":["WebGLRenderTarget","LinearFilter","Vector2","Scene","Camera","BufferGeometry","BufferAttribute","Mesh","ConvolutionMaterial","BlurPass","constructor","gl","resolution","width","height","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","renderToScreen","renderTargetA","minFilter","magFilter","stencilBuffer","depthBuffer","encoding","outputEncoding","renderTargetB","clone","convolutionMaterial","setTexelSize","setResolution","scene","camera","uniforms","value","defines","USE_DEPTH","vertices","Float32Array","uvs","geometry","setAttribute","screen","frustumCulled","add","render","renderer","inputBuffer","outputBuffer","material","depthTexture","kernel","lastRT","destRT","i","l","length","texture","setRenderTarget"],"mappings":"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","sourcesContent":["import { WebGLRenderTarget, LinearFilter, Vector2, Scene, Camera, BufferGeometry, BufferAttribute, Mesh } from 'three';\nimport { ConvolutionMaterial } from './ConvolutionMaterial.js';\n\nclass BlurPass {\n  constructor({\n    gl,\n    resolution,\n    width = 500,\n    height = 500,\n    minDepthThreshold = 0,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    depthToBlurRatioBias = 0.25\n  }) {\n    this.renderToScreen = false;\n    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      stencilBuffer: false,\n      depthBuffer: false,\n      encoding: gl.outputEncoding\n    });\n    this.renderTargetB = this.renderTargetA.clone();\n    this.convolutionMaterial = new ConvolutionMaterial();\n    this.convolutionMaterial.setTexelSize(1.0 / width, 1.0 / height);\n    this.convolutionMaterial.setResolution(new Vector2(width, height));\n    this.scene = new Scene();\n    this.camera = new Camera();\n    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;\n    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;\n    this.convolutionMaterial.uniforms.depthScale.value = depthScale;\n    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;\n    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;\n    const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);\n    const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n    geometry.setAttribute('uv', new BufferAttribute(uvs, 2));\n    this.screen = new Mesh(geometry, this.convolutionMaterial);\n    this.screen.frustumCulled = false;\n    this.scene.add(this.screen);\n  }\n\n  render(renderer, inputBuffer, outputBuffer) {\n    const scene = this.scene;\n    const camera = this.camera;\n    const renderTargetA = this.renderTargetA;\n    const renderTargetB = this.renderTargetB;\n    let material = this.convolutionMaterial;\n    let uniforms = material.uniforms;\n    uniforms.depthBuffer.value = inputBuffer.depthTexture;\n    const kernel = material.kernel;\n    let lastRT = inputBuffer;\n    let destRT;\n    let i, l; // Apply the multi-pass blur.\n\n    for (i = 0, l = kernel.length - 1; i < l; ++i) {\n      // Alternate between targets.\n      destRT = (i & 1) === 0 ? renderTargetA : renderTargetB;\n      uniforms.kernel.value = kernel[i];\n      uniforms.inputBuffer.value = lastRT.texture;\n      renderer.setRenderTarget(destRT);\n      renderer.render(scene, camera);\n      lastRT = destRT;\n    }\n\n    uniforms.kernel.value = kernel[i];\n    uniforms.inputBuffer.value = lastRT.texture;\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n    renderer.render(scene, camera);\n  }\n\n}\n\nexport { BlurPass };\n"]},"metadata":{},"sourceType":"module"}