{"ast":null,"code":"function clamp(v, min, max) {\n  return Math.max(min, Math.min(v, max));\n}\n\nconst V = {\n  toVector(v, fallback) {\n    if (v === undefined) v = fallback;\n    return Array.isArray(v) ? v : [v, v];\n  },\n\n  add(v1, v2) {\n    return [v1[0] + v2[0], v1[1] + v2[1]];\n  },\n\n  sub(v1, v2) {\n    return [v1[0] - v2[0], v1[1] - v2[1]];\n  },\n\n  addTo(v1, v2) {\n    v1[0] += v2[0];\n    v1[1] += v2[1];\n  },\n\n  subTo(v1, v2) {\n    v1[0] -= v2[0];\n    v1[1] -= v2[1];\n  }\n\n};\n\nfunction rubberband(distance, dimension, constant) {\n  if (dimension === 0 || Math.abs(dimension) === Infinity) return Math.pow(distance, constant * 5);\n  return distance * dimension * constant / (dimension + constant * distance);\n}\n\nfunction rubberbandIfOutOfBounds(position, min, max, constant = 0.15) {\n  if (constant === 0) return clamp(position, min, max);\n  if (position < min) return -rubberband(min - position, max - min, constant) + min;\n  if (position > max) return +rubberband(position - max, max - min, constant) + max;\n  return position;\n}\n\nfunction computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {\n  const [[X0, X1], [Y0, Y1]] = bounds;\n  return [rubberbandIfOutOfBounds(Vx, X0, X1, Rx), rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)];\n}\n\nexport { V, computeRubberband as c, rubberbandIfOutOfBounds as r };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/@use-gesture/core/dist/maths-b28d9b98.esm.js"],"names":["clamp","v","min","max","Math","V","toVector","fallback","undefined","Array","isArray","add","v1","v2","sub","addTo","subTo","rubberband","distance","dimension","constant","abs","Infinity","pow","rubberbandIfOutOfBounds","position","computeRubberband","bounds","Vx","Vy","Rx","Ry","X0","X1","Y0","Y1","c","r"],"mappings":"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","sourcesContent":["function clamp(v, min, max) {\n  return Math.max(min, Math.min(v, max));\n}\nconst V = {\n  toVector(v, fallback) {\n    if (v === undefined) v = fallback;\n    return Array.isArray(v) ? v : [v, v];\n  },\n  add(v1, v2) {\n    return [v1[0] + v2[0], v1[1] + v2[1]];\n  },\n  sub(v1, v2) {\n    return [v1[0] - v2[0], v1[1] - v2[1]];\n  },\n  addTo(v1, v2) {\n    v1[0] += v2[0];\n    v1[1] += v2[1];\n  },\n  subTo(v1, v2) {\n    v1[0] -= v2[0];\n    v1[1] -= v2[1];\n  }\n};\n\nfunction rubberband(distance, dimension, constant) {\n  if (dimension === 0 || Math.abs(dimension) === Infinity) return Math.pow(distance, constant * 5);\n  return distance * dimension * constant / (dimension + constant * distance);\n}\nfunction rubberbandIfOutOfBounds(position, min, max, constant = 0.15) {\n  if (constant === 0) return clamp(position, min, max);\n  if (position < min) return -rubberband(min - position, max - min, constant) + min;\n  if (position > max) return +rubberband(position - max, max - min, constant) + max;\n  return position;\n}\nfunction computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {\n  const [[X0, X1], [Y0, Y1]] = bounds;\n  return [rubberbandIfOutOfBounds(Vx, X0, X1, Rx), rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)];\n}\n\nexport { V, computeRubberband as c, rubberbandIfOutOfBounds as r };\n"]},"metadata":{},"sourceType":"module"}