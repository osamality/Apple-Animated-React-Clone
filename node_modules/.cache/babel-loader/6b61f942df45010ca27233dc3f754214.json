{"ast":null,"code":"import { Vector3, Vector2 } from 'three';\n/**\n * Helpers for converting buffers to and from Three.js objects\n */\n\n/**\n * Convents passed buffer of passed stride to an array of vectors with the correct length.\n *\n * @param buffer\n * @param stride\n * @returns\n */\n\nfunction bufferToVectors(buffer) {\n  var stride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  var p = [];\n\n  for (var i = 0, j = 0; i < buffer.length; i += stride, j++) {\n    if (stride === 3) {\n      p[j] = new Vector3(buffer[i], buffer[i + 1], buffer[i + 2]);\n    } else {\n      p[j] = new Vector2(buffer[i], buffer[i + 1]);\n    }\n  }\n\n  return p;\n}\n/**\n * Transforms a passed Vector2 or Vector3 array to a points buffer\n *\n * @param vectorArray\n * @returns\n */\n\n\nfunction vectorsToBuffer(vectorArray) {\n  var l = vectorArray.length;\n  var stride = vectorArray[0].hasOwnProperty(\"z\") ? 3 : 2;\n  var buffer = new Float32Array(l * stride);\n\n  for (var i = 0; i < l; i++) {\n    var j = i * stride;\n    buffer[j] = vectorArray[i].x;\n    buffer[j + 1] = vectorArray[i].y;\n\n    if (stride === 3) {\n      buffer[j + 2] = vectorArray[i].z;\n    }\n  }\n\n  return buffer;\n}\n\nvar three = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bufferToVectors: bufferToVectors,\n  vectorsToBuffer: vectorsToBuffer\n});\nexport { bufferToVectors as b, three as t, vectorsToBuffer as v };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/maath/dist/three-eb2ad8c0.esm.js"],"names":["Vector3","Vector2","bufferToVectors","buffer","stride","arguments","length","undefined","p","i","j","vectorsToBuffer","vectorArray","l","hasOwnProperty","Float32Array","x","y","z","three","Object","freeze","__proto__","b","t","v"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,OAAjC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;AAC/B,MAAIC,MAAM,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAAjF;AACA,MAAIG,CAAC,GAAG,EAAR;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAApB,EAAuBD,CAAC,GAAGN,MAAM,CAACG,MAAlC,EAA0CG,CAAC,IAAIL,MAAL,EAAaM,CAAC,EAAxD,EAA4D;AAC1D,QAAIN,MAAM,KAAK,CAAf,EAAkB;AAChBI,MAAAA,CAAC,CAACE,CAAD,CAAD,GAAO,IAAIV,OAAJ,CAAYG,MAAM,CAACM,CAAD,CAAlB,EAAuBN,MAAM,CAACM,CAAC,GAAG,CAAL,CAA7B,EAAsCN,MAAM,CAACM,CAAC,GAAG,CAAL,CAA5C,CAAP;AACD,KAFD,MAEO;AACLD,MAAAA,CAAC,CAACE,CAAD,CAAD,GAAO,IAAIT,OAAJ,CAAYE,MAAM,CAACM,CAAD,CAAlB,EAAuBN,MAAM,CAACM,CAAC,GAAG,CAAL,CAA7B,CAAP;AACD;AACF;;AAED,SAAOD,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASG,eAAT,CAAyBC,WAAzB,EAAsC;AACpC,MAAIC,CAAC,GAAGD,WAAW,CAACN,MAApB;AACA,MAAIF,MAAM,GAAGQ,WAAW,CAAC,CAAD,CAAX,CAAeE,cAAf,CAA8B,GAA9B,IAAqC,CAArC,GAAyC,CAAtD;AACA,MAAIX,MAAM,GAAG,IAAIY,YAAJ,CAAiBF,CAAC,GAAGT,MAArB,CAAb;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,CAApB,EAAuBJ,CAAC,EAAxB,EAA4B;AAC1B,QAAIC,CAAC,GAAGD,CAAC,GAAGL,MAAZ;AACAD,IAAAA,MAAM,CAACO,CAAD,CAAN,GAAYE,WAAW,CAACH,CAAD,CAAX,CAAeO,CAA3B;AACAb,IAAAA,MAAM,CAACO,CAAC,GAAG,CAAL,CAAN,GAAgBE,WAAW,CAACH,CAAD,CAAX,CAAeQ,CAA/B;;AAEA,QAAIb,MAAM,KAAK,CAAf,EAAkB;AAChBD,MAAAA,MAAM,CAACO,CAAC,GAAG,CAAL,CAAN,GAAgBE,WAAW,CAACH,CAAD,CAAX,CAAeS,CAA/B;AACD;AACF;;AAED,SAAOf,MAAP;AACD;;AAED,IAAIgB,KAAK,GAAG,aAAaC,MAAM,CAACC,MAAP,CAAc;AACrCC,EAAAA,SAAS,EAAE,IAD0B;AAErCpB,EAAAA,eAAe,EAAEA,eAFoB;AAGrCS,EAAAA,eAAe,EAAEA;AAHoB,CAAd,CAAzB;AAMA,SAAST,eAAe,IAAIqB,CAA5B,EAA+BJ,KAAK,IAAIK,CAAxC,EAA2Cb,eAAe,IAAIc,CAA9D","sourcesContent":["import { Vector3, Vector2 } from 'three';\n\n/**\n * Helpers for converting buffers to and from Three.js objects\n */\n\n/**\n * Convents passed buffer of passed stride to an array of vectors with the correct length.\n *\n * @param buffer\n * @param stride\n * @returns\n */\nfunction bufferToVectors(buffer) {\n  var stride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  var p = [];\n\n  for (var i = 0, j = 0; i < buffer.length; i += stride, j++) {\n    if (stride === 3) {\n      p[j] = new Vector3(buffer[i], buffer[i + 1], buffer[i + 2]);\n    } else {\n      p[j] = new Vector2(buffer[i], buffer[i + 1]);\n    }\n  }\n\n  return p;\n}\n/**\n * Transforms a passed Vector2 or Vector3 array to a points buffer\n *\n * @param vectorArray\n * @returns\n */\n\nfunction vectorsToBuffer(vectorArray) {\n  var l = vectorArray.length;\n  var stride = vectorArray[0].hasOwnProperty(\"z\") ? 3 : 2;\n  var buffer = new Float32Array(l * stride);\n\n  for (var i = 0; i < l; i++) {\n    var j = i * stride;\n    buffer[j] = vectorArray[i].x;\n    buffer[j + 1] = vectorArray[i].y;\n\n    if (stride === 3) {\n      buffer[j + 2] = vectorArray[i].z;\n    }\n  }\n\n  return buffer;\n}\n\nvar three = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  bufferToVectors: bufferToVectors,\n  vectorsToBuffer: vectorsToBuffer\n});\n\nexport { bufferToVectors as b, three as t, vectorsToBuffer as v };\n"]},"metadata":{},"sourceType":"module"}