{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport AttributeNode from '../core/AttributeNode.js';\nimport VaryNode from '../core/VaryNode.js';\nimport ModelNode from './ModelNode.js';\nimport CameraNode from './CameraNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MathNode from '../math/MathNode.js';\n\nclass NormalNode extends Node {\n  constructor(scope = NormalNode.LOCAL) {\n    super('vec3');\n    this.scope = scope;\n  }\n\n  getHash() {\n    return `normal-${this.scope}`;\n  }\n\n  generate(builder) {\n    const scope = this.scope;\n    let outputNode = null;\n\n    if (scope === NormalNode.GEOMETRY) {\n      outputNode = new AttributeNode('normal', 'vec3');\n    } else if (scope === NormalNode.LOCAL) {\n      outputNode = new VaryNode(new NormalNode(NormalNode.GEOMETRY));\n    } else if (scope === NormalNode.VIEW) {\n      const vertexNormalNode = new OperatorNode('*', new ModelNode(ModelNode.NORMAL_MATRIX), new NormalNode(NormalNode.LOCAL));\n      outputNode = new MathNode(MathNode.NORMALIZE, new VaryNode(vertexNormalNode));\n    } else if (scope === NormalNode.WORLD) {\n      // To use INVERSE_TRANSFORM_DIRECTION only inverse the param order like this: MathNode( ..., Vector, Matrix );\n      const vertexNormalNode = new MathNode(MathNode.TRANSFORM_DIRECTION, new NormalNode(NormalNode.VIEW), new CameraNode(CameraNode.VIEW_MATRIX));\n      outputNode = new MathNode(MathNode.NORMALIZE, new VaryNode(vertexNormalNode));\n    }\n\n    return outputNode.build(builder);\n  }\n\n  serialize(data) {\n    super.serialize(data);\n    data.scope = this.scope;\n  }\n\n  deserialize(data) {\n    super.deserialize(data);\n    this.scope = data.scope;\n  }\n\n}\n\n_defineProperty(NormalNode, \"GEOMETRY\", 'geometry');\n\n_defineProperty(NormalNode, \"LOCAL\", 'local');\n\n_defineProperty(NormalNode, \"WORLD\", 'world');\n\n_defineProperty(NormalNode, \"VIEW\", 'view');\n\nexport default NormalNode;","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/nodes/accessors/NormalNode.js"],"names":["_defineProperty","Node","AttributeNode","VaryNode","ModelNode","CameraNode","OperatorNode","MathNode","NormalNode","constructor","scope","LOCAL","getHash","generate","builder","outputNode","GEOMETRY","VIEW","vertexNormalNode","NORMAL_MATRIX","NORMALIZE","WORLD","TRANSFORM_DIRECTION","VIEW_MATRIX","build","serialize","data","deserialize"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;AAEA,MAAMC,UAAN,SAAyBP,IAAzB,CAA8B;AAC5BQ,EAAAA,WAAW,CAACC,KAAK,GAAGF,UAAU,CAACG,KAApB,EAA2B;AACpC,UAAM,MAAN;AACA,SAAKD,KAAL,GAAaA,KAAb;AACD;;AAEDE,EAAAA,OAAO,GAAG;AACR,WAAQ,UAAS,KAAKF,KAAM,EAA5B;AACD;;AAEDG,EAAAA,QAAQ,CAACC,OAAD,EAAU;AAChB,UAAMJ,KAAK,GAAG,KAAKA,KAAnB;AACA,QAAIK,UAAU,GAAG,IAAjB;;AAEA,QAAIL,KAAK,KAAKF,UAAU,CAACQ,QAAzB,EAAmC;AACjCD,MAAAA,UAAU,GAAG,IAAIb,aAAJ,CAAkB,QAAlB,EAA4B,MAA5B,CAAb;AACD,KAFD,MAEO,IAAIQ,KAAK,KAAKF,UAAU,CAACG,KAAzB,EAAgC;AACrCI,MAAAA,UAAU,GAAG,IAAIZ,QAAJ,CAAa,IAAIK,UAAJ,CAAeA,UAAU,CAACQ,QAA1B,CAAb,CAAb;AACD,KAFM,MAEA,IAAIN,KAAK,KAAKF,UAAU,CAACS,IAAzB,EAA+B;AACpC,YAAMC,gBAAgB,GAAG,IAAIZ,YAAJ,CAAiB,GAAjB,EAAsB,IAAIF,SAAJ,CAAcA,SAAS,CAACe,aAAxB,CAAtB,EAA8D,IAAIX,UAAJ,CAAeA,UAAU,CAACG,KAA1B,CAA9D,CAAzB;AACAI,MAAAA,UAAU,GAAG,IAAIR,QAAJ,CAAaA,QAAQ,CAACa,SAAtB,EAAiC,IAAIjB,QAAJ,CAAae,gBAAb,CAAjC,CAAb;AACD,KAHM,MAGA,IAAIR,KAAK,KAAKF,UAAU,CAACa,KAAzB,EAAgC;AACrC;AACA,YAAMH,gBAAgB,GAAG,IAAIX,QAAJ,CAAaA,QAAQ,CAACe,mBAAtB,EAA2C,IAAId,UAAJ,CAAeA,UAAU,CAACS,IAA1B,CAA3C,EAA4E,IAAIZ,UAAJ,CAAeA,UAAU,CAACkB,WAA1B,CAA5E,CAAzB;AACAR,MAAAA,UAAU,GAAG,IAAIR,QAAJ,CAAaA,QAAQ,CAACa,SAAtB,EAAiC,IAAIjB,QAAJ,CAAae,gBAAb,CAAjC,CAAb;AACD;;AAED,WAAOH,UAAU,CAACS,KAAX,CAAiBV,OAAjB,CAAP;AACD;;AAEDW,EAAAA,SAAS,CAACC,IAAD,EAAO;AACd,UAAMD,SAAN,CAAgBC,IAAhB;AACAA,IAAAA,IAAI,CAAChB,KAAL,GAAa,KAAKA,KAAlB;AACD;;AAEDiB,EAAAA,WAAW,CAACD,IAAD,EAAO;AAChB,UAAMC,WAAN,CAAkBD,IAAlB;AACA,SAAKhB,KAAL,GAAagB,IAAI,CAAChB,KAAlB;AACD;;AAtC2B;;AA0C9BV,eAAe,CAACQ,UAAD,EAAa,UAAb,EAAyB,UAAzB,CAAf;;AAEAR,eAAe,CAACQ,UAAD,EAAa,OAAb,EAAsB,OAAtB,CAAf;;AAEAR,eAAe,CAACQ,UAAD,EAAa,OAAb,EAAsB,OAAtB,CAAf;;AAEAR,eAAe,CAACQ,UAAD,EAAa,MAAb,EAAqB,MAArB,CAAf;;AAEA,eAAeA,UAAf","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport Node from '../core/Node.js';\nimport AttributeNode from '../core/AttributeNode.js';\nimport VaryNode from '../core/VaryNode.js';\nimport ModelNode from './ModelNode.js';\nimport CameraNode from './CameraNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport MathNode from '../math/MathNode.js';\n\nclass NormalNode extends Node {\n  constructor(scope = NormalNode.LOCAL) {\n    super('vec3');\n    this.scope = scope;\n  }\n\n  getHash() {\n    return `normal-${this.scope}`;\n  }\n\n  generate(builder) {\n    const scope = this.scope;\n    let outputNode = null;\n\n    if (scope === NormalNode.GEOMETRY) {\n      outputNode = new AttributeNode('normal', 'vec3');\n    } else if (scope === NormalNode.LOCAL) {\n      outputNode = new VaryNode(new NormalNode(NormalNode.GEOMETRY));\n    } else if (scope === NormalNode.VIEW) {\n      const vertexNormalNode = new OperatorNode('*', new ModelNode(ModelNode.NORMAL_MATRIX), new NormalNode(NormalNode.LOCAL));\n      outputNode = new MathNode(MathNode.NORMALIZE, new VaryNode(vertexNormalNode));\n    } else if (scope === NormalNode.WORLD) {\n      // To use INVERSE_TRANSFORM_DIRECTION only inverse the param order like this: MathNode( ..., Vector, Matrix );\n      const vertexNormalNode = new MathNode(MathNode.TRANSFORM_DIRECTION, new NormalNode(NormalNode.VIEW), new CameraNode(CameraNode.VIEW_MATRIX));\n      outputNode = new MathNode(MathNode.NORMALIZE, new VaryNode(vertexNormalNode));\n    }\n\n    return outputNode.build(builder);\n  }\n\n  serialize(data) {\n    super.serialize(data);\n    data.scope = this.scope;\n  }\n\n  deserialize(data) {\n    super.deserialize(data);\n    this.scope = data.scope;\n  }\n\n}\n\n_defineProperty(NormalNode, \"GEOMETRY\", 'geometry');\n\n_defineProperty(NormalNode, \"LOCAL\", 'local');\n\n_defineProperty(NormalNode, \"WORLD\", 'world');\n\n_defineProperty(NormalNode, \"VIEW\", 'view');\n\nexport default NormalNode;\n"]},"metadata":{},"sourceType":"module"}