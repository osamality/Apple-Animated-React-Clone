{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useRef, useMemo, useLayoutEffect } from 'react';\nimport { extend, useThree } from '@react-three/fiber';\nimport { MeshBVH, SAH } from 'three-mesh-bvh';\nimport { MeshRefractionMaterial as MeshRefractionMaterial$1 } from '../materials/MeshRefractionMaterial.js';\n\nconst isCubeTexture = def => def && def.isCubeTexture;\n\nfunction MeshRefractionMaterial({\n  aberrationStrength = 0,\n  fastChroma = true,\n  envMap,\n  ...props\n}) {\n  extend({\n    MeshRefractionMaterial: MeshRefractionMaterial$1\n  });\n  const material = useRef();\n  const {\n    size\n  } = useThree();\n  const defines = useMemo(() => {\n    var _ref, _envMap$image$;\n\n    const temp = {}; // Sampler2D and SamplerCube need different defines\n\n    const isCubeMap = isCubeTexture(envMap);\n    const w = (_ref = isCubeMap ? (_envMap$image$ = envMap.image[0]) == null ? void 0 : _envMap$image$.width : envMap.image.width) !== null && _ref !== void 0 ? _ref : 1024;\n    const cubeSize = w / 4;\n\n    const _lodMax = Math.floor(Math.log2(cubeSize));\n\n    const _cubeSize = Math.pow(2, _lodMax);\n\n    const width = 3 * Math.max(_cubeSize, 16 * 7);\n    const height = 4 * _cubeSize;\n    if (isCubeMap) temp.ENVMAP_TYPE_CUBEM = '';\n    temp.CUBEUV_TEXEL_WIDTH = `${1.0 / width}`;\n    temp.CUBEUV_TEXEL_HEIGHT = `${1.0 / height}`;\n    temp.CUBEUV_MAX_MIP = `${_lodMax}.0`; // Add defines from chromatic aberration\n\n    if (aberrationStrength > 0) temp.CHROMATIC_ABERRATIONS = '';\n    if (fastChroma) temp.FAST_CHROMA = '';\n    return temp;\n  }, [aberrationStrength, fastChroma]);\n  useLayoutEffect(() => {\n    var _material$current, _material$current$__r, _material$current$__r2; // Get the geometry of this materials parent\n\n\n    const geometry = (_material$current = material.current) == null ? void 0 : (_material$current$__r = _material$current.__r3f) == null ? void 0 : (_material$current$__r2 = _material$current$__r.parent) == null ? void 0 : _material$current$__r2.geometry; // Update the BVH\n\n    if (geometry) material.current.bvh.updateFrom(new MeshBVH(geometry.toNonIndexed(), {\n      lazyGeneration: false,\n      strategy: SAH\n    }));\n  }, []);\n  return /*#__PURE__*/React.createElement(\"meshRefractionMaterial\", _extends({\n    // @ts-ignore\n    key: JSON.stringify(defines) // @ts-ignore\n    ,\n    defines: defines,\n    ref: material,\n    resolution: [size.width, size.height],\n    aberrationStrength: aberrationStrength,\n    envMap: envMap\n  }, props));\n}\n\nexport { MeshRefractionMaterial };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/core/MeshRefractionMaterial.js"],"names":["_extends","React","useRef","useMemo","useLayoutEffect","extend","useThree","MeshBVH","SAH","MeshRefractionMaterial","MeshRefractionMaterial$1","isCubeTexture","def","aberrationStrength","fastChroma","envMap","props","material","size","defines","_ref","_envMap$image$","temp","isCubeMap","w","image","width","cubeSize","_lodMax","Math","floor","log2","_cubeSize","pow","max","height","ENVMAP_TYPE_CUBEM","CUBEUV_TEXEL_WIDTH","CUBEUV_TEXEL_HEIGHT","CUBEUV_MAX_MIP","CHROMATIC_ABERRATIONS","FAST_CHROMA","_material$current","_material$current$__r","_material$current$__r2","geometry","current","__r3f","parent","bvh","updateFrom","toNonIndexed","lazyGeneration","strategy","createElement","key","JSON","stringify","ref","resolution"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useRef, useMemo, useLayoutEffect } from 'react';\nimport { extend, useThree } from '@react-three/fiber';\nimport { MeshBVH, SAH } from 'three-mesh-bvh';\nimport { MeshRefractionMaterial as MeshRefractionMaterial$1 } from '../materials/MeshRefractionMaterial.js';\n\nconst isCubeTexture = def => def && def.isCubeTexture;\n\nfunction MeshRefractionMaterial({\n  aberrationStrength = 0,\n  fastChroma = true,\n  envMap,\n  ...props\n}) {\n  extend({\n    MeshRefractionMaterial: MeshRefractionMaterial$1\n  });\n  const material = useRef();\n  const {\n    size\n  } = useThree();\n  const defines = useMemo(() => {\n    var _ref, _envMap$image$;\n\n    const temp = {}; // Sampler2D and SamplerCube need different defines\n\n    const isCubeMap = isCubeTexture(envMap);\n    const w = (_ref = isCubeMap ? (_envMap$image$ = envMap.image[0]) == null ? void 0 : _envMap$image$.width : envMap.image.width) !== null && _ref !== void 0 ? _ref : 1024;\n    const cubeSize = w / 4;\n\n    const _lodMax = Math.floor(Math.log2(cubeSize));\n\n    const _cubeSize = Math.pow(2, _lodMax);\n\n    const width = 3 * Math.max(_cubeSize, 16 * 7);\n    const height = 4 * _cubeSize;\n    if (isCubeMap) temp.ENVMAP_TYPE_CUBEM = '';\n    temp.CUBEUV_TEXEL_WIDTH = `${1.0 / width}`;\n    temp.CUBEUV_TEXEL_HEIGHT = `${1.0 / height}`;\n    temp.CUBEUV_MAX_MIP = `${_lodMax}.0`; // Add defines from chromatic aberration\n\n    if (aberrationStrength > 0) temp.CHROMATIC_ABERRATIONS = '';\n    if (fastChroma) temp.FAST_CHROMA = '';\n    return temp;\n  }, [aberrationStrength, fastChroma]);\n  useLayoutEffect(() => {\n    var _material$current, _material$current$__r, _material$current$__r2;\n\n    // Get the geometry of this materials parent\n    const geometry = (_material$current = material.current) == null ? void 0 : (_material$current$__r = _material$current.__r3f) == null ? void 0 : (_material$current$__r2 = _material$current$__r.parent) == null ? void 0 : _material$current$__r2.geometry; // Update the BVH\n\n    if (geometry) material.current.bvh.updateFrom(new MeshBVH(geometry.toNonIndexed(), {\n      lazyGeneration: false,\n      strategy: SAH\n    }));\n  }, []);\n  return /*#__PURE__*/React.createElement(\"meshRefractionMaterial\", _extends({\n    // @ts-ignore\n    key: JSON.stringify(defines) // @ts-ignore\n    ,\n    defines: defines,\n    ref: material,\n    resolution: [size.width, size.height],\n    aberrationStrength: aberrationStrength,\n    envMap: envMap\n  }, props));\n}\n\nexport { MeshRefractionMaterial };\n"]},"metadata":{},"sourceType":"module"}