{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Mesh, SphereGeometry, MeshBasicMaterial } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { MotionControllerConstants, fetchProfile, MotionController } from '../libs/MotionControllers.js';\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nconst applyEnvironmentMap = (envMap, obj) => {\n  obj.traverse(child => {\n    if (child instanceof Mesh && 'envMap' in child.material) {\n      child.material.envMap = envMap;\n      child.material.needsUpdate = true;\n    }\n  });\n};\n\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"envMap\", void 0);\n\n    _defineProperty(this, \"motionController\", void 0);\n\n    this.motionController = null;\n    this.envMap = null;\n  }\n\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n\n    this.envMap = envMap;\n    applyEnvironmentMap(this.envMap, this);\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n    this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n    Object.values(this.motionController.components).forEach(component => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse; // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n\n        if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === 'boolean') {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNode && maxNode && typeof value === 'number') {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n\n}\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\n\n\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001);\n        const material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene);\n  } // Add the glTF scene to the controllerModel.\n\n\n  controllerModel.add(scene);\n}\n\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null) {\n    _defineProperty(this, \"gltfLoader\", void 0);\n\n    _defineProperty(this, \"path\", void 0);\n\n    _defineProperty(this, \"_assetCache\", void 0);\n\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n\n    const onConnected = event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({\n        profile,\n        assetPath\n      }) => {\n        if (!assetPath) {\n          throw new Error('no asset path');\n        }\n\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const assetUrl = controllerModel.motionController.assetUrl;\n        const cachedAsset = this._assetCache[assetUrl];\n\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error('GLTFLoader not set.');\n          }\n\n          this.gltfLoader.setPath('');\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            if (!controllerModel.motionController) {\n              console.warn('motionController gone while gltf load, bailing...');\n              return;\n            }\n\n            this._assetCache[assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          }, null, () => {\n            throw new Error(`Asset ${assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    };\n\n    controller.addEventListener('connected', onConnected);\n\n    const onDisconnected = () => {\n      controller.removeEventListener('connected', onConnected);\n      controller.removeEventListener('disconnected', onDisconnected);\n      controllerModel.motionController = null;\n\n      if (scene) {\n        controllerModel.remove(scene);\n      }\n\n      scene = null;\n    };\n\n    controller.addEventListener('disconnected', onDisconnected);\n    return controllerModel;\n  }\n\n}\n\nexport { XRControllerModelFactory };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/webxr/XRControllerModelFactory.js"],"names":["_defineProperty","Object3D","Mesh","SphereGeometry","MeshBasicMaterial","GLTFLoader","MotionControllerConstants","fetchProfile","MotionController","DEFAULT_PROFILES_PATH","DEFAULT_PROFILE","applyEnvironmentMap","envMap","obj","traverse","child","material","needsUpdate","XRControllerModel","constructor","motionController","setEnvironmentMap","updateMatrixWorld","force","updateFromGamepad","Object","values","components","forEach","component","visualResponses","visualResponse","valueNode","minNode","maxNode","value","valueNodeProperty","VisualResponseProperty","VISIBILITY","visible","TRANSFORM","quaternion","slerpQuaternions","position","lerpVectors","findNodes","scene","type","touchPointNodeName","ComponentType","TOUCHPAD","touchPointNode","getObjectByName","sphereGeometry","color","sphere","add","console","warn","id","valueNodeName","minNodeName","maxNodeName","addAssetSceneToControllerModel","controllerModel","XRControllerModelFactory","gltfLoader","path","_assetCache","createControllerModel","controller","onConnected","event","xrInputSource","data","targetRayMode","gamepad","then","profile","assetPath","Error","assetUrl","cachedAsset","clone","setPath","load","asset","catch","err","addEventListener","onDisconnected","removeEventListener","remove"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Object3D, Mesh, SphereGeometry, MeshBasicMaterial } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { MotionControllerConstants, fetchProfile, MotionController } from '../libs/MotionControllers.js';\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nconst applyEnvironmentMap = (envMap, obj) => {\n  obj.traverse(child => {\n    if (child instanceof Mesh && 'envMap' in child.material) {\n      child.material.envMap = envMap;\n      child.material.needsUpdate = true;\n    }\n  });\n};\n\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"envMap\", void 0);\n\n    _defineProperty(this, \"motionController\", void 0);\n\n    this.motionController = null;\n    this.envMap = null;\n  }\n\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n\n    this.envMap = envMap;\n    applyEnvironmentMap(this.envMap, this);\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n    this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n    Object.values(this.motionController.components).forEach(component => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse; // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n\n        if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY && typeof value === 'boolean') {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNode && maxNode && typeof value === 'number') {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n\n}\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\n\n\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD && touchPointNodeName) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001);\n        const material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM && minNodeName && maxNodeName) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    applyEnvironmentMap(controllerModel.envMap, scene);\n  } // Add the glTF scene to the controllerModel.\n\n\n  controllerModel.add(scene);\n}\n\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null) {\n    _defineProperty(this, \"gltfLoader\", void 0);\n\n    _defineProperty(this, \"path\", void 0);\n\n    _defineProperty(this, \"_assetCache\", void 0);\n\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n\n    const onConnected = event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({\n        profile,\n        assetPath\n      }) => {\n        if (!assetPath) {\n          throw new Error('no asset path');\n        }\n\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const assetUrl = controllerModel.motionController.assetUrl;\n        const cachedAsset = this._assetCache[assetUrl];\n\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error('GLTFLoader not set.');\n          }\n\n          this.gltfLoader.setPath('');\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            if (!controllerModel.motionController) {\n              console.warn('motionController gone while gltf load, bailing...');\n              return;\n            }\n\n            this._assetCache[assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          }, null, () => {\n            throw new Error(`Asset ${assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    };\n\n    controller.addEventListener('connected', onConnected);\n\n    const onDisconnected = () => {\n      controller.removeEventListener('connected', onConnected);\n      controller.removeEventListener('disconnected', onDisconnected);\n      controllerModel.motionController = null;\n\n      if (scene) {\n        controllerModel.remove(scene);\n      }\n\n      scene = null;\n    };\n\n    controller.addEventListener('disconnected', onDisconnected);\n    return controllerModel;\n  }\n\n}\n\nexport { XRControllerModelFactory };\n"]},"metadata":{},"sourceType":"module"}