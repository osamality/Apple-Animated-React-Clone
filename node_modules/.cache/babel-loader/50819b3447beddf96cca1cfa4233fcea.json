{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend, useThree } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useTexture } from './useTexture.js';\nconst ImageMaterialImpl = shaderMaterial({\n  color: new THREE.Color('white'),\n  scale: [1, 1],\n  imageBounds: [1, 1],\n  map: null,\n  zoom: 1,\n  grayscale: 0,\n  opacity: 1\n},\n/* glsl */\n`\n  varying vec2 vUv;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n  }\n`,\n/* glsl */\n`\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float zoom;\n  uniform float grayscale;\n  uniform float opacity;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, opacity), grayscale);\n    \n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }\n`);\nconst ImageBase = /*#__PURE__*/React.forwardRef(({\n  children,\n  color,\n  segments = 1,\n  scale = 1,\n  zoom = 1,\n  grayscale = 0,\n  opacity = 1,\n  texture,\n  toneMapped,\n  transparent,\n  ...props\n}, ref) => {\n  extend({\n    ImageMaterial: ImageMaterialImpl\n  });\n  const gl = useThree(state => state.gl);\n  const planeBounds = Array.isArray(scale) ? [scale[0], scale[1]] : [scale, scale];\n  const imageBounds = [texture.image.width, texture.image.height];\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    scale: Array.isArray(scale) ? [...scale, 1] : scale\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"imageMaterial\", {\n    color: color,\n    map: texture,\n    \"map-encoding\": gl.outputEncoding,\n    zoom: zoom,\n    grayscale: grayscale,\n    opacity: opacity,\n    scale: planeBounds,\n    imageBounds: imageBounds,\n    toneMapped: toneMapped,\n    transparent: transparent\n  }), children);\n});\nconst ImageWithUrl = /*#__PURE__*/React.forwardRef(({\n  url,\n  ...props\n}, ref) => {\n  const texture = useTexture(url);\n  return /*#__PURE__*/React.createElement(ImageBase, _extends({}, props, {\n    texture: texture,\n    ref: ref\n  }));\n});\nconst ImageWithTexture = /*#__PURE__*/React.forwardRef(({\n  url: _url,\n  ...props\n}, ref) => {\n  return /*#__PURE__*/React.createElement(ImageBase, _extends({}, props, {\n    ref: ref\n  }));\n});\nconst Image = /*#__PURE__*/React.forwardRef((props, ref) => {\n  if (props.url) return /*#__PURE__*/React.createElement(ImageWithUrl, _extends({}, props, {\n    ref: ref\n  }));else if (props.texture) return /*#__PURE__*/React.createElement(ImageWithTexture, _extends({}, props, {\n    ref: ref\n  }));else throw new Error('<Image /> requires a url or texture');\n});\nexport { Image };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/core/Image.js"],"names":["_extends","React","THREE","extend","useThree","shaderMaterial","useTexture","ImageMaterialImpl","color","Color","scale","imageBounds","map","zoom","grayscale","opacity","ImageBase","forwardRef","children","segments","texture","toneMapped","transparent","props","ref","ImageMaterial","gl","state","planeBounds","Array","isArray","image","width","height","createElement","args","outputEncoding","ImageWithUrl","url","ImageWithTexture","_url","Image","Error"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend, useThree } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useTexture } from './useTexture.js';\n\nconst ImageMaterialImpl = shaderMaterial({\n  color: new THREE.Color('white'),\n  scale: [1, 1],\n  imageBounds: [1, 1],\n  map: null,\n  zoom: 1,\n  grayscale: 0,\n  opacity: 1\n},\n/* glsl */\n`\n  varying vec2 vUv;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n  }\n`,\n/* glsl */\n`\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float zoom;\n  uniform float grayscale;\n  uniform float opacity;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, opacity), grayscale);\n    \n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n  }\n`);\nconst ImageBase = /*#__PURE__*/React.forwardRef(({\n  children,\n  color,\n  segments = 1,\n  scale = 1,\n  zoom = 1,\n  grayscale = 0,\n  opacity = 1,\n  texture,\n  toneMapped,\n  transparent,\n  ...props\n}, ref) => {\n  extend({\n    ImageMaterial: ImageMaterialImpl\n  });\n  const gl = useThree(state => state.gl);\n  const planeBounds = Array.isArray(scale) ? [scale[0], scale[1]] : [scale, scale];\n  const imageBounds = [texture.image.width, texture.image.height];\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    scale: Array.isArray(scale) ? [...scale, 1] : scale\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"imageMaterial\", {\n    color: color,\n    map: texture,\n    \"map-encoding\": gl.outputEncoding,\n    zoom: zoom,\n    grayscale: grayscale,\n    opacity: opacity,\n    scale: planeBounds,\n    imageBounds: imageBounds,\n    toneMapped: toneMapped,\n    transparent: transparent\n  }), children);\n});\nconst ImageWithUrl = /*#__PURE__*/React.forwardRef(({\n  url,\n  ...props\n}, ref) => {\n  const texture = useTexture(url);\n  return /*#__PURE__*/React.createElement(ImageBase, _extends({}, props, {\n    texture: texture,\n    ref: ref\n  }));\n});\nconst ImageWithTexture = /*#__PURE__*/React.forwardRef(({\n  url: _url,\n  ...props\n}, ref) => {\n  return /*#__PURE__*/React.createElement(ImageBase, _extends({}, props, {\n    ref: ref\n  }));\n});\nconst Image = /*#__PURE__*/React.forwardRef((props, ref) => {\n  if (props.url) return /*#__PURE__*/React.createElement(ImageWithUrl, _extends({}, props, {\n    ref: ref\n  }));else if (props.texture) return /*#__PURE__*/React.createElement(ImageWithTexture, _extends({}, props, {\n    ref: ref\n  }));else throw new Error('<Image /> requires a url or texture');\n});\n\nexport { Image };\n"]},"metadata":{},"sourceType":"module"}