{"ast":null,"code":"import Node from '../core/Node.js';\nimport { vector } from '../core/NodeBuilder.js';\n\nclass SplitNode extends Node {\n  constructor(node, components = 'x') {\n    super();\n    this.node = node;\n    this.components = components;\n  }\n\n  getVectorLength() {\n    let vectorLength = this.components.length;\n\n    for (const c of this.components) {\n      vectorLength = Math.max(vector.indexOf(c) + 1, vectorLength);\n    }\n\n    return vectorLength;\n  }\n\n  getNodeType(builder) {\n    return builder.getTypeFromLength(this.components.length);\n  }\n\n  generate(builder) {\n    const node = this.node;\n    const nodeTypeLength = builder.getTypeLength(node.getNodeType(builder));\n\n    if (nodeTypeLength > 1) {\n      let type = null;\n      const componentsLength = this.getVectorLength();\n\n      if (componentsLength >= nodeTypeLength) {\n        // need expand the input node\n        type = builder.getTypeFromLength(this.getVectorLength());\n      }\n\n      const nodeSnippet = node.build(builder, type);\n      return `${nodeSnippet}.${this.components}`;\n    } else {\n      // ignore components if node is a float\n      return node.build(builder);\n    }\n  }\n\n  serialize(data) {\n    super.serialize(data);\n    data.components = this.components;\n  }\n\n  deserialize(data) {\n    super.deserialize(data);\n    this.components = data.components;\n  }\n\n}\n\nexport default SplitNode;","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/nodes/utils/SplitNode.js"],"names":["Node","vector","SplitNode","constructor","node","components","getVectorLength","vectorLength","length","c","Math","max","indexOf","getNodeType","builder","getTypeFromLength","generate","nodeTypeLength","getTypeLength","type","componentsLength","nodeSnippet","build","serialize","data","deserialize"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,iBAAjB;AACA,SAASC,MAAT,QAAuB,wBAAvB;;AAEA,MAAMC,SAAN,SAAwBF,IAAxB,CAA6B;AAC3BG,EAAAA,WAAW,CAACC,IAAD,EAAOC,UAAU,GAAG,GAApB,EAAyB;AAClC;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,QAAIC,YAAY,GAAG,KAAKF,UAAL,CAAgBG,MAAnC;;AAEA,SAAK,MAAMC,CAAX,IAAgB,KAAKJ,UAArB,EAAiC;AAC/BE,MAAAA,YAAY,GAAGG,IAAI,CAACC,GAAL,CAASV,MAAM,CAACW,OAAP,CAAeH,CAAf,IAAoB,CAA7B,EAAgCF,YAAhC,CAAf;AACD;;AAED,WAAOA,YAAP;AACD;;AAEDM,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,WAAOA,OAAO,CAACC,iBAAR,CAA0B,KAAKV,UAAL,CAAgBG,MAA1C,CAAP;AACD;;AAEDQ,EAAAA,QAAQ,CAACF,OAAD,EAAU;AAChB,UAAMV,IAAI,GAAG,KAAKA,IAAlB;AACA,UAAMa,cAAc,GAAGH,OAAO,CAACI,aAAR,CAAsBd,IAAI,CAACS,WAAL,CAAiBC,OAAjB,CAAtB,CAAvB;;AAEA,QAAIG,cAAc,GAAG,CAArB,EAAwB;AACtB,UAAIE,IAAI,GAAG,IAAX;AACA,YAAMC,gBAAgB,GAAG,KAAKd,eAAL,EAAzB;;AAEA,UAAIc,gBAAgB,IAAIH,cAAxB,EAAwC;AACtC;AACAE,QAAAA,IAAI,GAAGL,OAAO,CAACC,iBAAR,CAA0B,KAAKT,eAAL,EAA1B,CAAP;AACD;;AAED,YAAMe,WAAW,GAAGjB,IAAI,CAACkB,KAAL,CAAWR,OAAX,EAAoBK,IAApB,CAApB;AACA,aAAQ,GAAEE,WAAY,IAAG,KAAKhB,UAAW,EAAzC;AACD,KAXD,MAWO;AACL;AACA,aAAOD,IAAI,CAACkB,KAAL,CAAWR,OAAX,CAAP;AACD;AACF;;AAEDS,EAAAA,SAAS,CAACC,IAAD,EAAO;AACd,UAAMD,SAAN,CAAgBC,IAAhB;AACAA,IAAAA,IAAI,CAACnB,UAAL,GAAkB,KAAKA,UAAvB;AACD;;AAEDoB,EAAAA,WAAW,CAACD,IAAD,EAAO;AAChB,UAAMC,WAAN,CAAkBD,IAAlB;AACA,SAAKnB,UAAL,GAAkBmB,IAAI,CAACnB,UAAvB;AACD;;AAlD0B;;AAsD7B,eAAeH,SAAf","sourcesContent":["import Node from '../core/Node.js';\nimport { vector } from '../core/NodeBuilder.js';\n\nclass SplitNode extends Node {\n  constructor(node, components = 'x') {\n    super();\n    this.node = node;\n    this.components = components;\n  }\n\n  getVectorLength() {\n    let vectorLength = this.components.length;\n\n    for (const c of this.components) {\n      vectorLength = Math.max(vector.indexOf(c) + 1, vectorLength);\n    }\n\n    return vectorLength;\n  }\n\n  getNodeType(builder) {\n    return builder.getTypeFromLength(this.components.length);\n  }\n\n  generate(builder) {\n    const node = this.node;\n    const nodeTypeLength = builder.getTypeLength(node.getNodeType(builder));\n\n    if (nodeTypeLength > 1) {\n      let type = null;\n      const componentsLength = this.getVectorLength();\n\n      if (componentsLength >= nodeTypeLength) {\n        // need expand the input node\n        type = builder.getTypeFromLength(this.getVectorLength());\n      }\n\n      const nodeSnippet = node.build(builder, type);\n      return `${nodeSnippet}.${this.components}`;\n    } else {\n      // ignore components if node is a float\n      return node.build(builder);\n    }\n  }\n\n  serialize(data) {\n    super.serialize(data);\n    data.components = this.components;\n  }\n\n  deserialize(data) {\n    super.deserialize(data);\n    this.components = data.components;\n  }\n\n}\n\nexport default SplitNode;\n"]},"metadata":{},"sourceType":"module"}