{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { BlurPass } from '../materials/BlurPass.js';\nimport { MeshReflectorMaterial } from '../materials/MeshReflectorMaterial.js';\nextend({\n  MeshReflectorMaterial\n});\nconst Reflector = /*#__PURE__*/React.forwardRef(({\n  mixBlur = 0,\n  mixStrength = 0.5,\n  resolution = 256,\n  blur = [0, 0],\n  args = [1, 1],\n  minDepthThreshold = 0.9,\n  maxDepthThreshold = 1,\n  depthScale = 0,\n  depthToBlurRatioBias = 0.25,\n  mirror = 0,\n  children,\n  debug = 0,\n  distortion = 1,\n  mixContrast = 1,\n  distortionMap,\n  ...props\n}, ref) => {\n  React.useEffect(() => {\n    console.warn('Reflector has been deprecated and will be removed next major. Replace it with <MeshReflectorMaterial />!');\n  }, []);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  blur = Array.isArray(blur) ? blur : [blur, blur];\n  const hasBlur = blur[0] + blur[1] > 0;\n  const meshRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const beforeRender = React.useCallback(() => {\n    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(meshRef.current.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(meshRef.current.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, []);\n  const [fbo1, fbo2, blurpass, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    const blurpass = new BlurPass({\n      gl,\n      resolution,\n      width: blur[0],\n      height: blur[1],\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias\n    });\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      tDiffuseBlur: fbo2.texture,\n      hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      transparent: true,\n      debug,\n      distortion,\n      distortionMap,\n      mixContrast,\n      'defines-USE_BLUR': hasBlur ? '' : undefined,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined\n    };\n    return [fbo1, fbo2, blurpass, reflectorProps];\n  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, mixContrast]);\n  useFrame(() => {\n    if (!(meshRef != null && meshRef.current)) return;\n    meshRef.current.visible = false;\n    const currentXrEnabled = gl.xr.enabled;\n    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;\n    beforeRender();\n    gl.xr.enabled = false;\n    gl.shadowMap.autoUpdate = false;\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    if (!gl.autoClear) gl.clear();\n    gl.render(scene, virtualCamera);\n    if (hasBlur) blurpass.render(gl, fbo1, fbo2);\n    gl.xr.enabled = currentXrEnabled;\n    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    meshRef.current.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: mergeRefs([meshRef, ref])\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: args\n  }), children ? children('meshReflectorMaterial', reflectorProps) : /*#__PURE__*/React.createElement(\"meshReflectorMaterial\", reflectorProps));\n});\nexport { Reflector };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/core/Reflector.js"],"names":["_extends","React","Plane","Vector3","Matrix4","Vector4","PerspectiveCamera","LinearFilter","WebGLRenderTarget","DepthTexture","DepthFormat","UnsignedShortType","extend","useThree","useFrame","mergeRefs","BlurPass","MeshReflectorMaterial","Reflector","forwardRef","mixBlur","mixStrength","resolution","blur","args","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","mirror","children","debug","distortion","mixContrast","distortionMap","props","ref","useEffect","console","warn","gl","camera","scene","Array","isArray","hasBlur","meshRef","useRef","reflectorPlane","useState","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","beforeRender","useCallback","setFromMatrixPosition","current","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","fbo1","fbo2","blurpass","reflectorProps","useMemo","parameters","minFilter","magFilter","encoding","outputEncoding","depthBuffer","depthTexture","format","type","width","height","tDiffuse","texture","tDepth","tDiffuseBlur","transparent","undefined","visible","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","createElement"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { BlurPass } from '../materials/BlurPass.js';\nimport { MeshReflectorMaterial } from '../materials/MeshReflectorMaterial.js';\n\nextend({\n  MeshReflectorMaterial\n});\nconst Reflector = /*#__PURE__*/React.forwardRef(({\n  mixBlur = 0,\n  mixStrength = 0.5,\n  resolution = 256,\n  blur = [0, 0],\n  args = [1, 1],\n  minDepthThreshold = 0.9,\n  maxDepthThreshold = 1,\n  depthScale = 0,\n  depthToBlurRatioBias = 0.25,\n  mirror = 0,\n  children,\n  debug = 0,\n  distortion = 1,\n  mixContrast = 1,\n  distortionMap,\n  ...props\n}, ref) => {\n  React.useEffect(() => {\n    console.warn('Reflector has been deprecated and will be removed next major. Replace it with <MeshReflectorMaterial />!');\n  }, []);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  blur = Array.isArray(blur) ? blur : [blur, blur];\n  const hasBlur = blur[0] + blur[1] > 0;\n  const meshRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const beforeRender = React.useCallback(() => {\n    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(meshRef.current.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(meshRef.current.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, []);\n  const [fbo1, fbo2, blurpass, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    const blurpass = new BlurPass({\n      gl,\n      resolution,\n      width: blur[0],\n      height: blur[1],\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias\n    });\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      tDiffuseBlur: fbo2.texture,\n      hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      transparent: true,\n      debug,\n      distortion,\n      distortionMap,\n      mixContrast,\n      'defines-USE_BLUR': hasBlur ? '' : undefined,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined\n    };\n    return [fbo1, fbo2, blurpass, reflectorProps];\n  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, mixContrast]);\n  useFrame(() => {\n    if (!(meshRef != null && meshRef.current)) return;\n    meshRef.current.visible = false;\n    const currentXrEnabled = gl.xr.enabled;\n    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;\n    beforeRender();\n    gl.xr.enabled = false;\n    gl.shadowMap.autoUpdate = false;\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    if (!gl.autoClear) gl.clear();\n    gl.render(scene, virtualCamera);\n    if (hasBlur) blurpass.render(gl, fbo1, fbo2);\n    gl.xr.enabled = currentXrEnabled;\n    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    meshRef.current.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: mergeRefs([meshRef, ref])\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: args\n  }), children ? children('meshReflectorMaterial', reflectorProps) : /*#__PURE__*/React.createElement(\"meshReflectorMaterial\", reflectorProps));\n});\n\nexport { Reflector };\n"]},"metadata":{},"sourceType":"module"}