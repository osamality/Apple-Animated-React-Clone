{"ast":null,"code":"import Node from './Node.js';\n\nclass ContextNode extends Node {\n  constructor(node, context = {}) {\n    super();\n    this.node = node;\n    this.context = context;\n  }\n\n  getNodeType(builder) {\n    return this.node.getNodeType(builder);\n  }\n\n  generate(builder, output) {\n    const previousContext = builder.getContext();\n    builder.setContext(Object.assign({}, builder.context, this.context));\n    const snippet = this.node.build(builder, output);\n    builder.setContext(previousContext);\n    return snippet;\n  }\n\n}\n\nContextNode.prototype.isContextNode = true;\nexport default ContextNode;","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/nodes/core/ContextNode.js"],"names":["Node","ContextNode","constructor","node","context","getNodeType","builder","generate","output","previousContext","getContext","setContext","Object","assign","snippet","build","prototype","isContextNode"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,WAAjB;;AAEA,MAAMC,WAAN,SAA0BD,IAA1B,CAA+B;AAC7BE,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAO,GAAG,EAAjB,EAAqB;AAC9B;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD;;AAEDC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,WAAO,KAAKH,IAAL,CAAUE,WAAV,CAAsBC,OAAtB,CAAP;AACD;;AAEDC,EAAAA,QAAQ,CAACD,OAAD,EAAUE,MAAV,EAAkB;AACxB,UAAMC,eAAe,GAAGH,OAAO,CAACI,UAAR,EAAxB;AACAJ,IAAAA,OAAO,CAACK,UAAR,CAAmBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,OAAO,CAACF,OAA1B,EAAmC,KAAKA,OAAxC,CAAnB;AACA,UAAMU,OAAO,GAAG,KAAKX,IAAL,CAAUY,KAAV,CAAgBT,OAAhB,EAAyBE,MAAzB,CAAhB;AACAF,IAAAA,OAAO,CAACK,UAAR,CAAmBF,eAAnB;AACA,WAAOK,OAAP;AACD;;AAjB4B;;AAqB/Bb,WAAW,CAACe,SAAZ,CAAsBC,aAAtB,GAAsC,IAAtC;AAEA,eAAehB,WAAf","sourcesContent":["import Node from './Node.js';\n\nclass ContextNode extends Node {\n  constructor(node, context = {}) {\n    super();\n    this.node = node;\n    this.context = context;\n  }\n\n  getNodeType(builder) {\n    return this.node.getNodeType(builder);\n  }\n\n  generate(builder, output) {\n    const previousContext = builder.getContext();\n    builder.setContext(Object.assign({}, builder.context, this.context));\n    const snippet = this.node.build(builder, output);\n    builder.setContext(previousContext);\n    return snippet;\n  }\n\n}\n\nContextNode.prototype.isContextNode = true;\n\nexport default ContextNode;\n"]},"metadata":{},"sourceType":"module"}