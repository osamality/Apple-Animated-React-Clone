{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { UniformsUtils, ShaderMaterial } from 'three';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\n\nclass DotScreenPass extends Pass {\n  constructor(center, angle, scale) {\n    super();\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    if (DotScreenShader === undefined) console.error('THREE.DotScreenPass relies on THREE.DotScreenShader');\n    const shader = DotScreenShader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    if (center !== undefined) this.uniforms['center'].value.copy(center);\n    if (angle !== undefined) this.uniforms['angle'].value = angle;\n    if (scale !== undefined) this.uniforms['scale'].value = scale;\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n}\n\nexport { DotScreenPass };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/three-stdlib/postprocessing/DotScreenPass.js"],"names":["_defineProperty","Pass","FullScreenQuad","UniformsUtils","ShaderMaterial","DotScreenShader","DotScreenPass","constructor","center","angle","scale","undefined","console","error","shader","uniforms","clone","value","copy","material","vertexShader","fragmentShader","fsQuad","render","renderer","writeBuffer","readBuffer","texture","set","width","height","renderToScreen","setRenderTarget","clear"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,WAArC;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,OAA9C;AACA,SAASC,eAAT,QAAgC,+BAAhC;;AAEA,MAAMC,aAAN,SAA4BL,IAA5B,CAAiC;AAC/BM,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuB;AAChC;;AAEAV,IAAAA,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB,KAAK,CAAxB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAK,CAAtB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB,KAAK,CAAxB,CAAf;;AAEA,QAAIK,eAAe,KAAKM,SAAxB,EAAmCC,OAAO,CAACC,KAAR,CAAc,qDAAd;AACnC,UAAMC,MAAM,GAAGT,eAAf;AACA,SAAKU,QAAL,GAAgBZ,aAAa,CAACa,KAAd,CAAoBF,MAAM,CAACC,QAA3B,CAAhB;AACA,QAAIP,MAAM,KAAKG,SAAf,EAA0B,KAAKI,QAAL,CAAc,QAAd,EAAwBE,KAAxB,CAA8BC,IAA9B,CAAmCV,MAAnC;AAC1B,QAAIC,KAAK,KAAKE,SAAd,EAAyB,KAAKI,QAAL,CAAc,OAAd,EAAuBE,KAAvB,GAA+BR,KAA/B;AACzB,QAAIC,KAAK,KAAKC,SAAd,EAAyB,KAAKI,QAAL,CAAc,OAAd,EAAuBE,KAAvB,GAA+BP,KAA/B;AACzB,SAAKS,QAAL,GAAgB,IAAIf,cAAJ,CAAmB;AACjCW,MAAAA,QAAQ,EAAE,KAAKA,QADkB;AAEjCK,MAAAA,YAAY,EAAEN,MAAM,CAACM,YAFY;AAGjCC,MAAAA,cAAc,EAAEP,MAAM,CAACO;AAHU,KAAnB,CAAhB;AAKA,SAAKC,MAAL,GAAc,IAAIpB,cAAJ,CAAmB,KAAKiB,QAAxB,CAAd;AACD;;AAEDI,EAAAA,MAAM,CAACC,QAAD,EAAWC,WAAX,EAAwBC;AAC9B;AADM,IAEJ;AACA,SAAKX,QAAL,CAAc,UAAd,EAA0BE,KAA1B,GAAkCS,UAAU,CAACC,OAA7C;AACA,SAAKZ,QAAL,CAAc,OAAd,EAAuBE,KAAvB,CAA6BW,GAA7B,CAAiCF,UAAU,CAACG,KAA5C,EAAmDH,UAAU,CAACI,MAA9D;;AAEA,QAAI,KAAKC,cAAT,EAAyB;AACvBP,MAAAA,QAAQ,CAACQ,eAAT,CAAyB,IAAzB;AACA,WAAKV,MAAL,CAAYC,MAAZ,CAAmBC,QAAnB;AACD,KAHD,MAGO;AACLA,MAAAA,QAAQ,CAACQ,eAAT,CAAyBP,WAAzB;AACA,UAAI,KAAKQ,KAAT,EAAgBT,QAAQ,CAACS,KAAT;AAChB,WAAKX,MAAL,CAAYC,MAAZ,CAAmBC,QAAnB;AACD;AACF;;AAtC8B;;AA0CjC,SAASlB,aAAT","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { UniformsUtils, ShaderMaterial } from 'three';\nimport { DotScreenShader } from '../shaders/DotScreenShader.js';\n\nclass DotScreenPass extends Pass {\n  constructor(center, angle, scale) {\n    super();\n\n    _defineProperty(this, \"material\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"uniforms\", void 0);\n\n    if (DotScreenShader === undefined) console.error('THREE.DotScreenPass relies on THREE.DotScreenShader');\n    const shader = DotScreenShader;\n    this.uniforms = UniformsUtils.clone(shader.uniforms);\n    if (center !== undefined) this.uniforms['center'].value.copy(center);\n    if (angle !== undefined) this.uniforms['angle'].value = angle;\n    if (scale !== undefined) this.uniforms['scale'].value = scale;\n    this.material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.fsQuad = new FullScreenQuad(this.material);\n  }\n\n  render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    this.uniforms['tDiffuse'].value = readBuffer.texture;\n    this.uniforms['tSize'].value.set(readBuffer.width, readBuffer.height);\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }\n\n}\n\nexport { DotScreenPass };\n"]},"metadata":{},"sourceType":"module"}