{"ast":null,"code":"import { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\n\nclass XRHandModel extends Object3D {\n  constructor(controller) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n}\n\nclass XRHandModelFactory {\n  constructor() {\n    this.path = null;\n  }\n\n  setPath(path) {\n    this.path = path;\n    return this;\n  }\n\n  createHandModel(controller, profile) {\n    const handModel = new XRHandModel(controller);\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !handModel.motionController) {\n        handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n        if (profile === undefined || profile === 'spheres') {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: 'sphere'\n          });\n        } else if (profile === 'boxes') {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: 'box'\n          });\n        } else if (profile === 'mesh') {\n          handModel.motionController = new XRHandMeshModel(handModel, controller, this.path, xrInputSource.handedness);\n        }\n      }\n    });\n    controller.addEventListener('disconnected', () => {// handModel.motionController = null;\n      // handModel.remove( scene );\n      // scene = null;\n    });\n    return handModel;\n  }\n\n}\n\nexport { XRHandModelFactory };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/three-stdlib/webxr/XRHandModelFactory.js"],"names":["Object3D","XRHandPrimitiveModel","XRHandMeshModel","XRHandModel","constructor","controller","motionController","envMap","mesh","updateMatrixWorld","force","updateMesh","XRHandModelFactory","path","setPath","createHandModel","profile","handModel","addEventListener","event","xrInputSource","data","hand","undefined","handedness","primitive"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,eAAT,QAAgC,sBAAhC;;AAEA,MAAMC,WAAN,SAA0BH,QAA1B,CAAmC;AACjCI,EAAAA,WAAW,CAACC,UAAD,EAAa;AACtB;AACA,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,gBAAL,GAAwB,IAAxB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,IAAL,GAAY,IAAZ;AACD;;AAEDC,EAAAA,iBAAiB,CAACC,KAAD,EAAQ;AACvB,UAAMD,iBAAN,CAAwBC,KAAxB;;AAEA,QAAI,KAAKJ,gBAAT,EAA2B;AACzB,WAAKA,gBAAL,CAAsBK,UAAtB;AACD;AACF;;AAfgC;;AAmBnC,MAAMC,kBAAN,CAAyB;AACvBR,EAAAA,WAAW,GAAG;AACZ,SAAKS,IAAL,GAAY,IAAZ;AACD;;AAEDC,EAAAA,OAAO,CAACD,IAAD,EAAO;AACZ,SAAKA,IAAL,GAAYA,IAAZ;AACA,WAAO,IAAP;AACD;;AAEDE,EAAAA,eAAe,CAACV,UAAD,EAAaW,OAAb,EAAsB;AACnC,UAAMC,SAAS,GAAG,IAAId,WAAJ,CAAgBE,UAAhB,CAAlB;AACAA,IAAAA,UAAU,CAACa,gBAAX,CAA4B,WAA5B,EAAyCC,KAAK,IAAI;AAChD,YAAMC,aAAa,GAAGD,KAAK,CAACE,IAA5B;;AAEA,UAAID,aAAa,CAACE,IAAd,IAAsB,CAACL,SAAS,CAACX,gBAArC,EAAuD;AACrDW,QAAAA,SAAS,CAACG,aAAV,GAA0BA,aAA1B,CADqD,CACZ;;AAEzC,YAAIJ,OAAO,KAAKO,SAAZ,IAAyBP,OAAO,KAAK,SAAzC,EAAoD;AAClDC,UAAAA,SAAS,CAACX,gBAAV,GAA6B,IAAIL,oBAAJ,CAAyBgB,SAAzB,EAAoCZ,UAApC,EAAgD,KAAKQ,IAArD,EAA2DO,aAAa,CAACI,UAAzE,EAAqF;AAChHC,YAAAA,SAAS,EAAE;AADqG,WAArF,CAA7B;AAGD,SAJD,MAIO,IAAIT,OAAO,KAAK,OAAhB,EAAyB;AAC9BC,UAAAA,SAAS,CAACX,gBAAV,GAA6B,IAAIL,oBAAJ,CAAyBgB,SAAzB,EAAoCZ,UAApC,EAAgD,KAAKQ,IAArD,EAA2DO,aAAa,CAACI,UAAzE,EAAqF;AAChHC,YAAAA,SAAS,EAAE;AADqG,WAArF,CAA7B;AAGD,SAJM,MAIA,IAAIT,OAAO,KAAK,MAAhB,EAAwB;AAC7BC,UAAAA,SAAS,CAACX,gBAAV,GAA6B,IAAIJ,eAAJ,CAAoBe,SAApB,EAA+BZ,UAA/B,EAA2C,KAAKQ,IAAhD,EAAsDO,aAAa,CAACI,UAApE,CAA7B;AACD;AACF;AACF,KAlBD;AAmBAnB,IAAAA,UAAU,CAACa,gBAAX,CAA4B,cAA5B,EAA4C,MAAM,CAAC;AACjD;AACA;AACD,KAHD;AAIA,WAAOD,SAAP;AACD;;AApCsB;;AAwCzB,SAASL,kBAAT","sourcesContent":["import { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\n\nclass XRHandModel extends Object3D {\n  constructor(controller) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n}\n\nclass XRHandModelFactory {\n  constructor() {\n    this.path = null;\n  }\n\n  setPath(path) {\n    this.path = path;\n    return this;\n  }\n\n  createHandModel(controller, profile) {\n    const handModel = new XRHandModel(controller);\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !handModel.motionController) {\n        handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n        if (profile === undefined || profile === 'spheres') {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: 'sphere'\n          });\n        } else if (profile === 'boxes') {\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\n            primitive: 'box'\n          });\n        } else if (profile === 'mesh') {\n          handModel.motionController = new XRHandMeshModel(handModel, controller, this.path, xrInputSource.handedness);\n        }\n      }\n    });\n    controller.addEventListener('disconnected', () => {// handModel.motionController = null;\n      // handModel.remove( scene );\n      // scene = null;\n    });\n    return handModel;\n  }\n\n}\n\nexport { XRHandModelFactory };\n"]},"metadata":{},"sourceType":"module"}