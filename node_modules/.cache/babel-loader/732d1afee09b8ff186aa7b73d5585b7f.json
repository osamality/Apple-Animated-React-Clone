{"ast":null,"code":"import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport * as THREE from 'three';\nconst Float = /*#__PURE__*/React.forwardRef(({\n  children,\n  speed = 1,\n  rotationIntensity = 1,\n  floatIntensity = 1,\n  floatingRange = [-0.1, 0.1],\n  ...props\n}, forwardRef) => {\n  const ref = React.useRef(null);\n  const offset = React.useRef(Math.random() * 10000);\n  useFrame(state => {\n    var _floatingRange$, _floatingRange$2;\n\n    const t = offset.current + state.clock.getElapsedTime();\n    ref.current.rotation.x = Math.cos(t / 4 * speed) / 8 * rotationIntensity;\n    ref.current.rotation.y = Math.sin(t / 4 * speed) / 8 * rotationIntensity;\n    ref.current.rotation.z = Math.sin(t / 4 * speed) / 20 * rotationIntensity;\n    let yPosition = Math.sin(t / 4 * speed) / 10;\n    yPosition = THREE.MathUtils.mapLinear(yPosition, -0.1, 0.1, (_floatingRange$ = floatingRange == null ? void 0 : floatingRange[0]) !== null && _floatingRange$ !== void 0 ? _floatingRange$ : -0.1, (_floatingRange$2 = floatingRange == null ? void 0 : floatingRange[1]) !== null && _floatingRange$2 !== void 0 ? _floatingRange$2 : 0.1);\n    ref.current.position.y = yPosition * floatIntensity;\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"group\", {\n    ref: mergeRefs([ref, forwardRef])\n  }, children));\n});\nexport { Float };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/dev/Apple-Animated-React-Clone/node_modules/@react-three/drei/core/Float.js"],"names":["React","useFrame","mergeRefs","THREE","Float","forwardRef","children","speed","rotationIntensity","floatIntensity","floatingRange","props","ref","useRef","offset","Math","random","state","_floatingRange$","_floatingRange$2","t","current","clock","getElapsedTime","rotation","x","cos","y","sin","z","yPosition","MathUtils","mapLinear","position","createElement"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,MAAMC,KAAK,GAAG,aAAaJ,KAAK,CAACK,UAAN,CAAiB,CAAC;AAC3CC,EAAAA,QAD2C;AAE3CC,EAAAA,KAAK,GAAG,CAFmC;AAG3CC,EAAAA,iBAAiB,GAAG,CAHuB;AAI3CC,EAAAA,cAAc,GAAG,CAJ0B;AAK3CC,EAAAA,aAAa,GAAG,CAAC,CAAC,GAAF,EAAO,GAAP,CAL2B;AAM3C,KAAGC;AANwC,CAAD,EAOzCN,UAPyC,KAO1B;AAChB,QAAMO,GAAG,GAAGZ,KAAK,CAACa,MAAN,CAAa,IAAb,CAAZ;AACA,QAAMC,MAAM,GAAGd,KAAK,CAACa,MAAN,CAAaE,IAAI,CAACC,MAAL,KAAgB,KAA7B,CAAf;AACAf,EAAAA,QAAQ,CAACgB,KAAK,IAAI;AAChB,QAAIC,eAAJ,EAAqBC,gBAArB;;AAEA,UAAMC,CAAC,GAAGN,MAAM,CAACO,OAAP,GAAiBJ,KAAK,CAACK,KAAN,CAAYC,cAAZ,EAA3B;AACAX,IAAAA,GAAG,CAACS,OAAJ,CAAYG,QAAZ,CAAqBC,CAArB,GAAyBV,IAAI,CAACW,GAAL,CAASN,CAAC,GAAG,CAAJ,GAAQb,KAAjB,IAA0B,CAA1B,GAA8BC,iBAAvD;AACAI,IAAAA,GAAG,CAACS,OAAJ,CAAYG,QAAZ,CAAqBG,CAArB,GAAyBZ,IAAI,CAACa,GAAL,CAASR,CAAC,GAAG,CAAJ,GAAQb,KAAjB,IAA0B,CAA1B,GAA8BC,iBAAvD;AACAI,IAAAA,GAAG,CAACS,OAAJ,CAAYG,QAAZ,CAAqBK,CAArB,GAAyBd,IAAI,CAACa,GAAL,CAASR,CAAC,GAAG,CAAJ,GAAQb,KAAjB,IAA0B,EAA1B,GAA+BC,iBAAxD;AACA,QAAIsB,SAAS,GAAGf,IAAI,CAACa,GAAL,CAASR,CAAC,GAAG,CAAJ,GAAQb,KAAjB,IAA0B,EAA1C;AACAuB,IAAAA,SAAS,GAAG3B,KAAK,CAAC4B,SAAN,CAAgBC,SAAhB,CAA0BF,SAA1B,EAAqC,CAAC,GAAtC,EAA2C,GAA3C,EAAgD,CAACZ,eAAe,GAAGR,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAAC,CAAD,CAAjE,MAA0E,IAA1E,IAAkFQ,eAAe,KAAK,KAAK,CAA3G,GAA+GA,eAA/G,GAAiI,CAAC,GAAlL,EAAuL,CAACC,gBAAgB,GAAGT,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAAC,CAAD,CAAlE,MAA2E,IAA3E,IAAmFS,gBAAgB,KAAK,KAAK,CAA7G,GAAiHA,gBAAjH,GAAoI,GAA3T,CAAZ;AACAP,IAAAA,GAAG,CAACS,OAAJ,CAAYY,QAAZ,CAAqBN,CAArB,GAAyBG,SAAS,GAAGrB,cAArC;AACD,GAVO,CAAR;AAWA,SAAO,aAAaT,KAAK,CAACkC,aAAN,CAAoB,OAApB,EAA6BvB,KAA7B,EAAoC,aAAaX,KAAK,CAACkC,aAAN,CAAoB,OAApB,EAA6B;AAChGtB,IAAAA,GAAG,EAAEV,SAAS,CAAC,CAACU,GAAD,EAAMP,UAAN,CAAD;AADkF,GAA7B,EAElEC,QAFkE,CAAjD,CAApB;AAGD,CAxB0B,CAA3B;AA0BA,SAASF,KAAT","sourcesContent":["import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport * as THREE from 'three';\n\nconst Float = /*#__PURE__*/React.forwardRef(({\n  children,\n  speed = 1,\n  rotationIntensity = 1,\n  floatIntensity = 1,\n  floatingRange = [-0.1, 0.1],\n  ...props\n}, forwardRef) => {\n  const ref = React.useRef(null);\n  const offset = React.useRef(Math.random() * 10000);\n  useFrame(state => {\n    var _floatingRange$, _floatingRange$2;\n\n    const t = offset.current + state.clock.getElapsedTime();\n    ref.current.rotation.x = Math.cos(t / 4 * speed) / 8 * rotationIntensity;\n    ref.current.rotation.y = Math.sin(t / 4 * speed) / 8 * rotationIntensity;\n    ref.current.rotation.z = Math.sin(t / 4 * speed) / 20 * rotationIntensity;\n    let yPosition = Math.sin(t / 4 * speed) / 10;\n    yPosition = THREE.MathUtils.mapLinear(yPosition, -0.1, 0.1, (_floatingRange$ = floatingRange == null ? void 0 : floatingRange[0]) !== null && _floatingRange$ !== void 0 ? _floatingRange$ : -0.1, (_floatingRange$2 = floatingRange == null ? void 0 : floatingRange[1]) !== null && _floatingRange$2 !== void 0 ? _floatingRange$2 : 0.1);\n    ref.current.position.y = yPosition * floatIntensity;\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"group\", {\n    ref: mergeRefs([ref, forwardRef])\n  }, children));\n});\n\nexport { Float };\n"]},"metadata":{},"sourceType":"module"}