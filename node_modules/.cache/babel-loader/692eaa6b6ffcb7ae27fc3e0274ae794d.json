{"ast":null,"code":"function shallowEqualArrays(arrA, arrB, equal = (a, b) => a === b) {\n  if (arrA === arrB) return true;\n  if (!arrA || !arrB) return false;\n  const len = arrA.length;\n  if (arrB.length !== len) return false;\n\n  for (let i = 0; i < len; i++) if (!equal(arrA[i], arrB[i])) return false;\n\n  return true;\n}\n\nconst globalCache = [];\n\nfunction query(fn, keys, preload = false, config = {}) {\n  for (const entry of globalCache) {\n    // Find a match\n    if (shallowEqualArrays(keys, entry.keys, entry.equal)) {\n      // If we're pre-loading and the element is present, just return\n      if (preload) return undefined; // If an error occurred, throw\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'error')) throw entry.error; // If a response was successful, return\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'response')) return entry.response; // If the promise is still unresolved, throw\n\n      if (!preload) throw entry.promise;\n    }\n  } // The request is new or has changed.\n\n\n  const entry = {\n    keys,\n    equal: config.equal,\n    promise: // Execute the promise\n    fn(...keys) // When it resolves, store its value\n    .then(response => entry.response = response) // Remove the entry if a lifespan was given\n    .then(() => {\n      if (config.lifespan && config.lifespan > 0) {\n        setTimeout(() => {\n          const index = globalCache.indexOf(entry);\n          if (index !== -1) globalCache.splice(index, 1);\n        }, config.lifespan);\n      }\n    }) // Store caught errors, they will be thrown in the render-phase to bubble into an error-bound\n    .catch(error => entry.error = error)\n  }; // Register the entry\n\n  globalCache.push(entry); // And throw the promise, this yields control back to React\n\n  if (!preload) throw entry.promise;\n  return undefined;\n}\n\nconst suspend = (fn, keys, config) => query(fn, keys, false, config);\n\nconst preload = (fn, keys, config) => void query(fn, keys, true, config);\n\nconst peek = keys => {\n  var _globalCache$find;\n\n  return (_globalCache$find = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal))) == null ? void 0 : _globalCache$find.response;\n};\n\nconst clear = keys => {\n  if (keys === undefined || keys.length === 0) globalCache.splice(0, globalCache.length);else {\n    const entry = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal));\n\n    if (entry) {\n      const index = globalCache.indexOf(entry);\n      if (index !== -1) globalCache.splice(index, 1);\n    }\n  }\n};\n\nexport { clear, peek, preload, suspend };","map":{"version":3,"sources":["/Users/osamakhan/Desktop/Apple-Website-Clone-React-master/node_modules/suspend-react/dist/index.js"],"names":["shallowEqualArrays","arrA","arrB","equal","a","b","len","length","i","globalCache","query","fn","keys","preload","config","entry","undefined","Object","prototype","hasOwnProperty","call","error","response","promise","then","lifespan","setTimeout","index","indexOf","splice","catch","push","suspend","peek","_globalCache$find","find","clear"],"mappings":"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","sourcesContent":["function shallowEqualArrays(arrA, arrB, equal = (a, b) => a === b) {\n  if (arrA === arrB) return true;\n  if (!arrA || !arrB) return false;\n  const len = arrA.length;\n  if (arrB.length !== len) return false;\n\n  for (let i = 0; i < len; i++) if (!equal(arrA[i], arrB[i])) return false;\n\n  return true;\n}\n\nconst globalCache = [];\n\nfunction query(fn, keys, preload = false, config = {}) {\n  for (const entry of globalCache) {\n    // Find a match\n    if (shallowEqualArrays(keys, entry.keys, entry.equal)) {\n      // If we're pre-loading and the element is present, just return\n      if (preload) return undefined; // If an error occurred, throw\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'error')) throw entry.error; // If a response was successful, return\n\n      if (Object.prototype.hasOwnProperty.call(entry, 'response')) return entry.response; // If the promise is still unresolved, throw\n\n      if (!preload) throw entry.promise;\n    }\n  } // The request is new or has changed.\n\n\n  const entry = {\n    keys,\n    equal: config.equal,\n    promise: // Execute the promise\n    fn(...keys) // When it resolves, store its value\n    .then(response => entry.response = response) // Remove the entry if a lifespan was given\n    .then(() => {\n      if (config.lifespan && config.lifespan > 0) {\n        setTimeout(() => {\n          const index = globalCache.indexOf(entry);\n          if (index !== -1) globalCache.splice(index, 1);\n        }, config.lifespan);\n      }\n    }) // Store caught errors, they will be thrown in the render-phase to bubble into an error-bound\n    .catch(error => entry.error = error)\n  }; // Register the entry\n\n  globalCache.push(entry); // And throw the promise, this yields control back to React\n\n  if (!preload) throw entry.promise;\n  return undefined;\n}\n\nconst suspend = (fn, keys, config) => query(fn, keys, false, config);\n\nconst preload = (fn, keys, config) => void query(fn, keys, true, config);\n\nconst peek = keys => {\n  var _globalCache$find;\n\n  return (_globalCache$find = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal))) == null ? void 0 : _globalCache$find.response;\n};\n\nconst clear = keys => {\n  if (keys === undefined || keys.length === 0) globalCache.splice(0, globalCache.length);else {\n    const entry = globalCache.find(entry => shallowEqualArrays(keys, entry.keys, entry.equal));\n\n    if (entry) {\n      const index = globalCache.indexOf(entry);\n      if (index !== -1) globalCache.splice(index, 1);\n    }\n  }\n};\n\nexport { clear, peek, preload, suspend };\n"]},"metadata":{},"sourceType":"module"}