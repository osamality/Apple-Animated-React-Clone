'use strict';

const React = require('react');
const {
  Text,
  Box
} = require('ink');
const importJsx = require('import-jsx');
const gltfjsx = require('../gltfjsx');
const ErrorBoundary = importJsx('./ErrorBoundary');
function Conversion({
  file,
  ...config
}) {
  let nameExt = file.match(/[-_\w]+[.][\w]+$/i)[0];
  let name = nameExt.split('.').slice(0, -1).join('.');
  let output = name.charAt(0).toUpperCase() + name.slice(1) + (config.types ? '.tsx' : '.js');
  const [done, setDone] = React.useState(false);
  const [log, setLog] = React.useState([]);
  React.useEffect(() => {
    async function run() {
      try {
        await gltfjsx(file, output, {
          ...config,
          setLog,
          timeout: 0,
          delay: 5
        });
        setDone(true);
      } catch (e) {
        setDone(() => {
          throw e;
        });
      }
    }
    run();
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, !done && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: "black",
    backgroundColor: "white"
  }, ' Parse '), /*#__PURE__*/React.createElement(Text, null, " ", (log[log.length - 1] || '').trim())), done && /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
    color: "black",
    backgroundColor: "green"
  }, ' Done: '), /*#__PURE__*/React.createElement(Text, null, " ", output), config.process && /*#__PURE__*/React.createElement(Text, null, ", ", name, "-processed.glb")));
}
module.exports = function App(props) {
  return /*#__PURE__*/React.createElement(ErrorBoundary, null, /*#__PURE__*/React.createElement(Conversion, props));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwiaW1wb3J0SnN4IiwiZ2x0ZmpzeCIsIkVycm9yQm91bmRhcnkiLCJDb252ZXJzaW9uIiwiZmlsZSIsImNvbmZpZyIsIm5hbWVFeHQiLCJtYXRjaCIsIm5hbWUiLCJzcGxpdCIsInNsaWNlIiwiam9pbiIsIm91dHB1dCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwidHlwZXMiLCJkb25lIiwic2V0RG9uZSIsInVzZVN0YXRlIiwibG9nIiwic2V0TG9nIiwidXNlRWZmZWN0IiwicnVuIiwidGltZW91dCIsImRlbGF5IiwiZSIsImxlbmd0aCIsInRyaW0iLCJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsIkFwcCIsInByb3BzIl0sInNvdXJjZXMiOlsiQXBwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpXG5jb25zdCB7IFRleHQsIEJveCB9ID0gcmVxdWlyZSgnaW5rJylcbmNvbnN0IGltcG9ydEpzeCA9IHJlcXVpcmUoJ2ltcG9ydC1qc3gnKVxuY29uc3QgZ2x0ZmpzeCA9IHJlcXVpcmUoJy4uL2dsdGZqc3gnKVxuY29uc3QgRXJyb3JCb3VuZGFyeSA9IGltcG9ydEpzeCgnLi9FcnJvckJvdW5kYXJ5JylcblxuZnVuY3Rpb24gQ29udmVyc2lvbih7IGZpbGUsIC4uLmNvbmZpZyB9KSB7XG4gIGxldCBuYW1lRXh0ID0gZmlsZS5tYXRjaCgvWy1fXFx3XStbLl1bXFx3XSskL2kpWzBdXG4gIGxldCBuYW1lID0gbmFtZUV4dC5zcGxpdCgnLicpLnNsaWNlKDAsIC0xKS5qb2luKCcuJylcbiAgbGV0IG91dHB1dCA9IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpICsgKGNvbmZpZy50eXBlcyA/ICcudHN4JyA6ICcuanMnKVxuXG4gIGNvbnN0IFtkb25lLCBzZXREb25lXSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbbG9nLCBzZXRMb2ddID0gUmVhY3QudXNlU3RhdGUoW10pXG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBhc3luYyBmdW5jdGlvbiBydW4oKSB7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBnbHRmanN4KGZpbGUsIG91dHB1dCwgeyAuLi5jb25maWcsIHNldExvZywgdGltZW91dDogMCwgZGVsYXk6IDUgfSlcbiAgICAgICAgc2V0RG9uZSh0cnVlKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBzZXREb25lKCgpID0+IHtcbiAgICAgICAgICB0aHJvdyBlXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICAgIHJ1bigpXG4gIH0sIFtdKVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHshZG9uZSAmJiAoXG4gICAgICAgIDxCb3g+XG4gICAgICAgICAgPFRleHQgY29sb3I9XCJibGFja1wiIGJhY2tncm91bmRDb2xvcj1cIndoaXRlXCI+XG4gICAgICAgICAgICB7JyBQYXJzZSAnfVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICA8VGV4dD4geyhsb2dbbG9nLmxlbmd0aCAtIDFdIHx8ICcnKS50cmltKCl9PC9UZXh0PlxuICAgICAgICA8L0JveD5cbiAgICAgICl9XG4gICAgICB7ZG9uZSAmJiAoXG4gICAgICAgIDxCb3g+XG4gICAgICAgICAgPFRleHQgY29sb3I9XCJibGFja1wiIGJhY2tncm91bmRDb2xvcj1cImdyZWVuXCI+XG4gICAgICAgICAgICB7JyBEb25lOiAnfVxuICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICA8VGV4dD4ge291dHB1dH08L1RleHQ+XG4gICAgICAgICAge2NvbmZpZy5wcm9jZXNzICYmIDxUZXh0Piwge25hbWV9LXByb2Nlc3NlZC5nbGI8L1RleHQ+fVxuICAgICAgICA8L0JveD5cbiAgICAgICl9XG4gICAgPC8+XG4gIClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBcHAocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8RXJyb3JCb3VuZGFyeT5cbiAgICAgIDxDb252ZXJzaW9uIHsuLi5wcm9wc30gLz5cbiAgICA8L0Vycm9yQm91bmRhcnk+XG4gIClcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFDWixNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFFQyxJQUFJO0VBQUVDO0FBQUksQ0FBQyxHQUFHRixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3BDLE1BQU1HLFNBQVMsR0FBR0gsT0FBTyxDQUFDLFlBQVksQ0FBQztBQUN2QyxNQUFNSSxPQUFPLEdBQUdKLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDckMsTUFBTUssYUFBYSxHQUFHRixTQUFTLENBQUMsaUJBQWlCLENBQUM7QUFFbEQsU0FBU0csVUFBVSxDQUFDO0VBQUVDLElBQUk7RUFBRSxHQUFHQztBQUFPLENBQUMsRUFBRTtFQUN2QyxJQUFJQyxPQUFPLEdBQUdGLElBQUksQ0FBQ0csS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2hELElBQUlDLElBQUksR0FBR0YsT0FBTyxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUNDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsQ0FBQztFQUNwRCxJQUFJQyxNQUFNLEdBQUdKLElBQUksQ0FBQ0ssTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxXQUFXLEVBQUUsR0FBR04sSUFBSSxDQUFDRSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUlMLE1BQU0sQ0FBQ1UsS0FBSyxHQUFHLE1BQU0sR0FBRyxLQUFLLENBQUM7RUFFM0YsTUFBTSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sQ0FBQyxHQUFHckIsS0FBSyxDQUFDc0IsUUFBUSxDQUFDLEtBQUssQ0FBQztFQUM3QyxNQUFNLENBQUNDLEdBQUcsRUFBRUMsTUFBTSxDQUFDLEdBQUd4QixLQUFLLENBQUNzQixRQUFRLENBQUMsRUFBRSxDQUFDO0VBRXhDdEIsS0FBSyxDQUFDeUIsU0FBUyxDQUFDLE1BQU07SUFDcEIsZUFBZUMsR0FBRyxHQUFHO01BQ25CLElBQUk7UUFDRixNQUFNckIsT0FBTyxDQUFDRyxJQUFJLEVBQUVRLE1BQU0sRUFBRTtVQUFFLEdBQUdQLE1BQU07VUFBRWUsTUFBTTtVQUFFRyxPQUFPLEVBQUUsQ0FBQztVQUFFQyxLQUFLLEVBQUU7UUFBRSxDQUFDLENBQUM7UUFDeEVQLE9BQU8sQ0FBQyxJQUFJLENBQUM7TUFDZixDQUFDLENBQUMsT0FBT1EsQ0FBQyxFQUFFO1FBQ1ZSLE9BQU8sQ0FBQyxNQUFNO1VBQ1osTUFBTVEsQ0FBQztRQUNULENBQUMsQ0FBQztNQUNKO0lBQ0Y7SUFDQUgsR0FBRyxFQUFFO0VBQ1AsQ0FBQyxFQUFFLEVBQUUsQ0FBQztFQUVOLG9CQUNFLDBDQUNHLENBQUNOLElBQUksaUJBQ0osb0JBQUMsR0FBRyxxQkFDRixvQkFBQyxJQUFJO0lBQUMsS0FBSyxFQUFDLE9BQU87SUFBQyxlQUFlLEVBQUM7RUFBTyxHQUN4QyxTQUFTLENBQ0wsZUFDUCxvQkFBQyxJQUFJLFFBQUMsR0FBQyxFQUFDLENBQUNHLEdBQUcsQ0FBQ0EsR0FBRyxDQUFDTyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFQyxJQUFJLEVBQUUsQ0FBUSxDQUVyRCxFQUNBWCxJQUFJLGlCQUNILG9CQUFDLEdBQUcscUJBQ0Ysb0JBQUMsSUFBSTtJQUFDLEtBQUssRUFBQyxPQUFPO0lBQUMsZUFBZSxFQUFDO0VBQU8sR0FDeEMsU0FBUyxDQUNMLGVBQ1Asb0JBQUMsSUFBSSxRQUFDLEdBQUMsRUFBQ0osTUFBTSxDQUFRLEVBQ3JCUCxNQUFNLENBQUN1QixPQUFPLGlCQUFJLG9CQUFDLElBQUksUUFBQyxJQUFFLEVBQUNwQixJQUFJLEVBQUMsZ0JBQWMsQ0FBTyxDQUV6RCxDQUNBO0FBRVA7QUFFQXFCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLEdBQUcsQ0FBQ0MsS0FBSyxFQUFFO0VBQ25DLG9CQUNFLG9CQUFDLGFBQWEscUJBQ1osb0JBQUMsVUFBVSxFQUFLQSxLQUFLLENBQUksQ0FDWDtBQUVwQixDQUFDIn0=